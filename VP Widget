// HTML
<h4>Invoices</h4>
<div class="form-group" ng-repeat="row in data.rows track by $index">

  <hr style="border-width: 1px;" ng-if="$index > 0">

    <span class="fa fa-asterisk mandatory" ng-class="{'mandatory-filled': row.invoice_number != ''}"
          title="Required" style="padding-right: 0.25em;" aria-label="Required Filled "
          aria-hidden="false"></span>
    <label>Invoice Number</label>
    <input type="text"  class="form-control" ng-model="row.invoice_number" ng-change="refreshVariables()"/>
  <div style="margin-top:7px;">
    <span class="fa fa-asterisk mandatory" ng-class="{'mandatory-filled': row.invoice_amount != ''}"
          title="Required" style="padding-right: 0.25em;" aria-label="Required Filled "
          aria-hidden="false"></span>
    <label>Invoice Amount</label>
    <input type="text"  class="form-control" ng-model="row.invoice_amount" ng-change="refreshVariables()" ng-blur="validateCurrency(row.invoice_amount, 'invoiceAmount', row.id)"/>
    <div class="error-message" ng-show="row.show_invoice_error">{{row.invoice_error}}</div>
      </div>
  <div style="margin-top:7px;">
    <label>Credit Memo (if applicable)</label>
    <input type="text" class="form-control" ng-model="row.credit_memo" ng-change="refreshVariables()" ng-blur="validateCurrency(row.credit_memo, 'creditMemo', row.id)" />
    <div class="error-message" ng-show="row.show_credit_error">{{row.credit_error}}</div>
  </div>
  <div class="text-right" style="margin-top:15px;vertical-align:center;">
    <button class="panel-button sp-attachment-add btn btn-link attachment-btn"
            ng-click="setCurrentID(row.id, $event);">
      <span class="fa fa-asterisk mandatory" ng-class="{'mandatory-filled': row.attachmentCount > 0}"
            title="Required" style="padding-right: 0.25em;" aria-label="Required Filled "></span>
      <span class="glyphicon glyphicon-paperclip">
        <span class="badge badge-error" ng-if="row.attachmentCount > 0">{{row.attachmentCount}}</span>
      </span>
    </button>
    <button class="btn btn-danger" ng-click="deleteRow($index, row.id)" ng-if="$index > 0">Delete</button>
  </div>
</div>
<button class='btn btn-primary' id='Add' ng-click="addRow()">Add Invoice</button>




// CSS
.attachment-btn {
    margin-left: 0;
}
.badge-error {
	background-color: #b94a48;
}

.glyphicon {
	text-align: center;
	vertical-align: middle;
}

.badge {
    font-size: .35em;
    position: absolute;
    top: -.75em;
    right: -.75em;
    width: 2em;
    height: 2em;
    text-align: center;
}

.a-viewurl {
	color: black;
}

.a-viewurl:hover {
	text-decoration: underline;
}

.error-message{
 	color:#d9534f;
	font-style: italic;
    font-size: smaller;
    background-color: transparent;
    padding: 0 !important;
    margin: 0 !important;
}




// server script
(function () {

	var FILE_ICON_MAP = {
		'image/jpeg': 'fa-file-image-o',
		'image/pjpeg': 'fa-file-image-o',
		'image/tiff': 'fa-file-image-o',
		'image/png': 'fa-file-image-o',
		'image/gif': 'fa-file-image-o',
		'application/zip': 'fa-file-archive-o',
		'application/x-compressed': 'fa-file-archive-o',
		'application/x-zip-compressed': 'fa-file-archive-o',
		'application/pdf': 'fa-file-pdf-o',
		'application/vnd.openxmlformats-officedoc': 'fa-file-word-o',
		'application/msword': 'fa-file-word-o',
		'application/vnd.openxmlformats-officedocument.wordprocessingml.document': 'fa-file-word-o',
		'application/vnd.openxmlformats-officedocument.wordprocessingml.template': 'fa-file-word-o',
		'application/excel': 'fa-file-excel-o',
		'application/vnd.ms-excel': 'fa-file-excel-o',
		'application/x-excel': 'fa-file-excel-o',
		'application/x-msexcel': 'fa-file-excel-o',
		'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet': 'fa-file-excel-o',
		'application/vnd.openxmlformats-officedocument.spreadsheetml.template': 'fa-file-excel-o',
		'application/powerpoint': 'fa-file-powerpoint-o',
		'application/vnd.ms-powerpoint': 'fa-file-powerpoint-o',
		'application/vnd.openxmlformats-officedocument.presentationml.presentation': 'fa-file-powerpoint-o',
		'application/vnd.openxmlformats-officedocument.presentationml.template': 'fa-file-powerpoint-o',
		'application/vnd.openxmlformats-officedocument.presentationml.slideshow': 'fa-file-powerpoint-o',
		'ppt': 'fa-file-powerpoint-o',
		'pptx': 'fa-file-powerpoint-o',
		'doc': 'fa-file-word-o',
		'docx': 'fa-file-word-o',
		'xls': 'fa-file-excel-o',
		'xlsx': 'fa-file-excel-o'
	};

	// Called when the user opens the attachment modal
	if (input && input.viewattachment) {
		var gr_view = new GlideRecord('sys_attachment');
		gr_view.addQuery('table_sys_id', input.viewattachment);
		gr_view.query();
		var attachments = [];
		while (gr_view.next()) {
			var attachment = {
				sys_id: gr_view.sys_id.toString(),
				file_name: gr_view.file_name.toString(),
				icon: getIcon(gr_view.content_type.toString()),
				viewUrl: '/sys_attachment.do?sys_id=' + gr_view.getValue('sys_id')
			}
			attachments.push(attachment);
		}
		data.attachments = attachments;
	}

	// Called when the user deletes an attachment
	else if (input && input.deleteattachment) {
		var gr_delete = new GlideRecord('sys_attachment');
		if (gr_delete.get(input.deleteattachment)) {
			gr_delete.deleteRecord();
		}
	}

	// Called when a row is deleted
	else if (input && input.action == 'delete_row') {
		var gr_delete_multiple = new GlideRecord('sys_attachment');
		gr_delete_multiple.addQuery('table_sys_id', input.row_id);
		gr_delete_multiple.query();
		gr_delete_multiple.deleteMultiple();
	}

	var row = {
		id: uuidv4(),
		invoice_number: '',
		invoice_amount: '',
		credit_memo: '',
		attachmentCount: 0,
		invoice_error: 'Invalid currency format. Please correct it.',
		credit_error: 'Invalid currency format. Please correct it.',
		show_invoice_error: false,
		show_credit_error: false
	};

	data.rows = [row];

	/**
	 * Returns the icon associated with the content type
	 * @param {String} content_type Content type of the file
	 */
	function getIcon(content_type) {
		return FILE_ICON_MAP[content_type] || "fa-file-o";
	}

	function uuidv4() {
		return 'xxxxxxxx-xxxx-4xxx-yxxx'.replace(/[xy]/g, function (c) {
			var r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);
			return v.toString(16);
		});
	}
})();




// client controller
api.controller = function($scope, $uibModal, nowAttachmentHandler, spUtil) {
    /* widget controller */
    var c = this;
    var g_form = $scope.page.g_form;

    $scope.addRow = function() {
        var row = {
            id: uuidv4(),
            invoice_number: '',
            invoice_amount: '',
            credit_memo: '',
            attachmentCount: 0,
			invoice_error: 'Invalid currency format. Please correct it.',
			credit_error: 'Invalid currency format. Please correct it.',
			show_invoice_error: false,
			show_credit_error: false
        };

        c.data.rows.push(row);
        refreshMandatoryFilled();
    };

    $scope.deleteRow = function(index, row_id) {

        c.server.get({
            action: 'delete_row',
            row_id: row_id
        });

        c.data.rows.splice(index, 1);

        $scope.refreshVariables();
    };

    /**
     * Attachment Handling
     */
    function setupAttachmentHandler() {

        $scope.attachmentHandler = new nowAttachmentHandler(appendDone, appendError);

        $scope.$on('dialog.upload_too_large.show', function(e) {
            $log.error($scope.data.largeAttachmentMsg);
            spUtil.addErrorMessage($scope.data.largeAttachmentMsg);
        });
    }

    setupAttachmentHandler();

    /**
     * Called after an attachment is added
     */
    function appendDone() {
        _updateAttachmentCounter(c.data.current_row_id, 'increment');

        $scope.fetchAttachments(c.data.current_row_id);
    }

    /**
     * Called when the attachment handler throws an exception
     * @param {Object} error Error
     */
    function appendError(error) {
        console.log(error.msg + error.fileName);
    }

    /**
     * Fetches the attachments of the row and opens the attachment modal
     * @param {String} row_id Id of the row
     */
    $scope.setCurrentID = function(row_id, $event) {
        c.data.current_row_id = row_id;
        $scope.fetchAttachments(row_id);
        openModal('add-invoice-attachment', '');
    };

    /**
     * Fetches the attachment associated with the row
     * @param {String} row_id Id of the row
     */
    $scope.fetchAttachments = function(row_id) {
        c.server.get({
            viewattachment: row_id
        }).then(function(response) {
            c.data.attachments = response.data.attachments;
            c.data.current_row_id = row_id;
        });
    };

    /**
     * Prepares the attachment handler
     * @param {$event} $event Event
     */
    $scope.prepareAttachment = function($event) {
        var sizeLimit = 1024 * 1024 * 24; // 24MB
        var current_row_id = c.data.current_row_id.toString();
        $scope.attachmentHandler.setParams('x_banun_submit_a_0_new_invoice_submission', current_row_id, sizeLimit);
        $scope.attachmentHandler.openSelector($event);
    };

    /**
     * Deletes the attachment
     * @param {String} attachment_id Sys Id of the attachment
     */
    $scope.deleteAttachment = function(attachment_id) {
        c.server.get({
            deleteattachment: attachment_id
        }).then(function(response) {
            _updateAttachmentCounter(c.data.current_row_id, 'decrement');
            $scope.fetchAttachments(c.data.current_row_id);
        });
    };
    /**
     * Updates the attachment counter of the row
     * @param {String} row_id Id of the row
     * @param {String} action increment or decrement
     */
    function _updateAttachmentCounter(row_id, action) {
        var rows = c.data.rows;
        for (var i = 0; i < rows.length; i++) {
            if (rows[i].id == row_id) {

                if (action == "increment") {
                    rows[i].attachmentCount++;
                }

                if (action == "decrement") {
                    rows[i].attachmentCount--;
                }
            }
        }
        refreshMandatoryFilled();
    }

    /**
     * Open a modal and store it in c.modalInstance
     * @param {string} template Template to load
     * @param {string} size
     * @param {function} callback What to do when modal is closed
     */
    function openModal(template, size, callback) {
        callback = callback || false;

        c.modalInstance = $uibModal.open({
            templateUrl: template,
            scope: $scope,
            size: size
        });

        if (callback) {
            c.closedModal = c.modalInstance.closed.then(function() {
                callback();
            });
        }
    }

    /** Close the opened modal instance */
    $scope.closeModal = function() {
        c.modalInstance.close();
    };

    /**
     * Generates a unique id
     */
    function uuidv4() {
        return 'xxxxxxxx-xxxx-4xxx-yxxx'.replace(/[xy]/g, function(c) {
            var r = Math.random() * 16 | 0,
                v = c == 'x' ? r : (r & 0x3 | 0x8);
            return v.toString(16);
        });
    }

    function refreshMandatoryFilled() {
        var mandatory_filled = 0;

        for (var i = 0; i < c.data.rows.length; i++) {
            var row = c.data.rows[i];
            if (row.invoice_number != '' && row.invoice_amount != '' && row.attachmentCount > 0) {
                mandatory_filled++;
            }
        }

        g_form.setValue('mandatory_filled', (mandatory_filled == c.data.rows.length && creditMemoFilled && invoiceAmountFilled));
    }

    $scope.refreshVariables = function() {
        var variables = new Array(4);
        var variable_names = ['invoice_numbers', 'invoice_amounts', 'credit_memos', 'attachment_ids'];
        var property_names = ['invoice_number', 'invoice_amount', 'credit_memo', 'id'];

        for (var i = 0; i < c.data.rows.length; i++) {
            for (var j = 0; j < variables.length; j++) {
                variables[j] = variables[j] == undefined ? '' : variables[j];
                variables[j] += c.data.rows[i][property_names[j]] + ',';
            }
        }

        for (var k = 0; k < variables.length; k++) {
            variables[k] = variables[k].substring(0, variables[k].length - 1);
            g_form.setValue(variable_names[k], variables[k]);
        }

        refreshMandatoryFilled();
    };

    $scope.creditMemoError = false;
    $scope.invoiceAmountError = false;
    var creditMemoFilled = true;
    var invoiceAmountFilled = false;

    $scope.validateCurrency = function(value, field, row_id) {
      var currencyRegex = /^(((\d{1,3},?)(\d{3},?)+|\d{1,3})|\d+)(\.\d{2})?$/;
			var rows = c.data.rows;	

      if (!value || currencyRegex.test(value)) {
          if (field == 'invoiceAmount') {
              $scope.invoiceAmountError = false;
              invoiceAmountFilled = true;

              for (var i = 0; i < rows.length; i++) {
                  if (rows[i].id == row_id) {
                      rows[i].show_invoice_error = false;
                  }
              }

          } else if (field == 'creditMemo') {
              $scope.creditMemoError = false;
              creditMemoFilled = true;
				
			for (var j = 0; j < rows.length; j++) {
                  if (rows[j].id == row_id) {
                      rows[j].show_credit_error = false;
                  }
              }
          }
      } else {
          if (field == 'invoiceAmount') {
              $scope.invoiceAmountError = true;
              invoiceAmountFilled = false;
				
			for (var k = 0; k < rows.length; k++) {
                  if (rows[k].id == row_id) {
                      rows[k].show_invoice_error = true;
                  }
              }
          } else if (field == 'creditMemo') {
              $scope.creditMemoError = true;
              creditMemoFilled = false;
				
			for (var l = 0; l < rows.length; l++) {
                  if (rows[l].id == row_id) {
                      rows[l].show_credit_error = true;
                  }
              }
          }
      }
      refreshMandatoryFilled();
    };
};




// RP script
var remit = new GlideRecord('x_banun_submit_a_0_coupa_suppliers_remit_to_address');
remit.addQuery('address_street_1', producer.remit_to_address);
remit.addQuery('supplier_display_name', producer.supplier_name);
remit.query();

if(remit.next()){
	var supplier_name = remit.sys_id;
}

var invoice_numbers = producer.invoice_numbers.toString().split(',');
var invoice_amounts = producer.invoice_amounts.toString().split(',');
var credit_memos = producer.credit_memos.toString().split(',');
var attachment_ids = producer.attachment_ids.toString().split(',');
var invoice_lines = [];
var ids = '';

for (var i = 0; i < invoice_numbers.length; i++) {

	var gr = new GlideRecord('x_banun_submit_a_0_new_invoice_submission');
	gr.initialize();
	gr.requested_by = producer.requested_by;
	gr.invoice_date = producer.invoice_date;
	gr.supplier_name = supplier_name;
	gr.remit_to_address = producer.remit_to_address;
	gr.invoice_number = invoice_numbers[i];
	gr.invoice_total = invoice_amounts[i];
	gr.credit_memo = credit_memos[i];
	var invoice_id = gr.insert();
	invoice_lines.push(invoice_id);
}

linkAttachments();

current.setAbortAction(true);
producer.portal_redirect = "?id=vendorprogram_home";

function linkAttachments() {

	for (var i = 0; i < invoice_lines.length; i++) {
		if (attachment_ids[i] != 'copied') {
			var gr = new GlideRecord('sys_attachment');
			gr.addQuery('table_sys_id', attachment_ids[i]);
			gr.query();

			while (gr.next()) {
				gr.table_sys_id = invoice_lines[i];
				gr.update();
			}
		}
	}
}

