<!-- HTML Template -->
<div class="authority-limits-widget">
  <div ng-if="!c.jobCode" class="alert alert-info">
    <i class="fa fa-info-circle"></i>
    Please select a job code to view authority limits
  </div>
  
  <div ng-if="c.jobCode && c.loading" class="text-center">
    <i class="fa fa-spinner fa-spin fa-2x"></i>
    <p>Loading authority limits...</p>
  </div>
  
  <div ng-if="c.jobCode && !c.loading && c.authorityLimits.length === 0" class="alert alert-warning">
    <i class="fa fa-exclamation-triangle"></i>
    Job code <strong>{{c.jobCodeDisplay || c.jobCode}}</strong> does not have any existing authority limits
  </div>
  
  <div ng-if="c.jobCode && !c.loading && c.authorityLimits.length > 0" class="authority-limits-container">
    <h4 class="limits-header">
      <i class="fa fa-shield"></i>
      Authority Limits for Job Code: {{c.jobCodeDisplay || c.jobCode}}
    </h4>
    
    <div ng-repeat="limit in c.authorityLimits" class="limit-record">
      <div class="job-info">
        <h5>{{limit.job_code_display}} - {{limit.job_description}}</h5>
      </div>
      
      <div class="limits-grid">
        <!-- Credit Limits Section -->
        <div class="limits-section credit-limits">
          <h6 class="section-title">
            <i class="fa fa-credit-card"></i>
            Credit Limits
          </h6>
          <div class="limits-table">
            <div class="limit-row" ng-if="limit.overdraft_external_accounts">
              <span class="limit-label">Overdraft External Accounts:</span>
              <span class="limit-value">{{limit.overdraft_external_accounts | currency}}</span>
            </div>
            <div class="limit-row" ng-if="limit.overdraft_internal_accounts">
              <span class="limit-label">Overdraft Internal Accounts:</span>
              <span class="limit-value">{{limit.overdraft_internal_accounts | currency}}</span>
            </div>
            <div class="limit-row" ng-if="limit.unavailable_funds_external_accounts">
              <span class="limit-label">Unavailable Funds External:</span>
              <span class="limit-value">{{limit.unavailable_funds_external_accounts | currency}}</span>
            </div>
            <div class="limit-row" ng-if="limit.unavailable_funds_internal_accounts">
              <span class="limit-label">Unavailable Funds Internal:</span>
              <span class="limit-value">{{limit.unavailable_funds_internal_accounts | currency}}</span>
            </div>
          </div>
        </div>
        
        <!-- Non-Credit Limits Section -->
        <div class="limits-section non-credit-limits">
          <h6 class="section-title">
            <i class="fa fa-money"></i>
            Non-Credit Limits
          </h6>
          <div class="limits-table">
            <div class="limit-row" ng-if="limit.disbursement_ach">
              <span class="limit-label">Disbursement ACH:</span>
              <span class="limit-value">{{limit.disbursement_ach | currency}}</span>
            </div>
            <div class="limit-row" ng-if="limit.disbursement_wire_transfer_external">
              <span class="limit-label">Wire Transfer External:</span>
              <span class="limit-value">{{limit.disbursement_wire_transfer_external | currency}}</span>
            </div>
            <div class="limit-row" ng-if="limit.disbursement_wire_transfer_internal">
              <span class="limit-label">Wire Transfer Internal:</span>
              <span class="limit-value">{{limit.disbursement_wire_transfer_internal | currency}}</span>
            </div>
            <div class="limit-row" ng-if="limit.disbursement_official_checks_external">
              <span class="limit-label">Official Checks External:</span>
              <span class="limit-value">{{limit.disbursement_official_checks_external | currency}}</span>
            </div>
            <div class="limit-row" ng-if="limit.disbursement_official_checks_internal">
              <span class="limit-label">Official Checks Internal:</span>
              <span class="limit-value">{{limit.disbursement_official_checks_internal | currency}}</span>
            </div>
            <div class="limit-row" ng-if="limit.check_cashing_on_us">
              <span class="limit-label">Check Cashing On Us:</span>
              <span class="limit-value">{{limit.check_cashing_on_us | currency}}</span>
            </div>
            <div class="limit-row" ng-if="limit.check_cashing_not_on_us">
              <span class="limit-label">Check Cashing Not On Us:</span>
              <span class="limit-value">{{limit.check_cashing_not_on_us | currency}}</span>
            </div>
            <div class="limit-row" ng-if="limit.remote_deposit">
              <span class="limit-label">Remote Deposit:</span>
              <span class="limit-value">{{limit.remote_deposit | currency}}</span>
            </div>
            <div class="limit-row" ng-if="limit.treasury_solutions_company_wire_limits">
              <span class="limit-label">Treasury Solutions Wire:</span>
              <span class="limit-value">{{limit.treasury_solutions_company_wire_limits | currency}}</span>
            </div>
            <div class="limit-row" ng-if="limit.fx_wire_limits">
              <span class="limit-label">FX Wire Limits:</span>
              <span class="limit-value">{{limit.fx_wire_limits | currency}}</span>
            </div>
          </div>
        </div>
      </div>
      
      <hr ng-if="!$last" class="record-separator">
    </div>
  </div>
</div>

<!-- CSS - This goes in the CSS section of the widget -->
<style>
.authority-limits-widget {
  padding: 15px;
  font-family: 'Source Sans Pro', Arial, sans-serif;
}

.alert {
  padding: 12px 15px;
  border-radius: 4px;
  margin-bottom: 15px;
  border: 1px solid transparent;
}

.alert-info {
  background-color: #d9edf7;
  border-color: #bce8f1;
  color: #31708f;
}

.alert-warning {
  background-color: #fcf8e3;
  border-color: #faebcc;
  color: #8a6d3b;
}

.authority-limits-container {
  margin-top: 15px;
}

.limits-header {
  color: #2c3e50;
  border-bottom: 2px solid #3498db;
  padding-bottom: 8px;
  margin-bottom: 20px;
}

.limit-record {
  background: #f8f9fa;
  border: 1px solid #e9ecef;
  border-radius: 6px;
  padding: 20px;
  margin-bottom: 15px;
}

.job-info h5 {
  color: #2c3e50;
  margin: 0 0 15px 0;
  font-weight: 600;
}

.limits-grid {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 20px;
}

.limits-section {
  background: white;
  border-radius: 4px;
  padding: 15px;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

.credit-limits {
  border-left: 4px solid #e74c3c;
}

.non-credit-limits {
  border-left: 4px solid #27ae60;
}

.section-title {
  color: #2c3e50;
  margin: 0 0 12px 0;
  font-size: 14px;
  font-weight: 600;
  text-transform: uppercase;
}

.credit-limits .section-title {
  color: #e74c3c;
}

.non-credit-limits .section-title {
  color: #27ae60;
}

.limits-table {
  display: flex;
  flex-direction: column;
  gap: 8px;
}

.limit-row {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 6px 0;
  border-bottom: 1px solid #ecf0f1;
}

.limit-row:last-child {
  border-bottom: none;
}

.limit-label {
  font-size: 13px;
  color: #5a6c7d;
  flex: 1;
}

.limit-value {
  font-weight: 600;
  color: #2c3e50;
  text-align: right;
}

.record-separator {
  border: 0;
  border-top: 2px solid #bdc3c7;
  margin: 20px 0;
}

.fa {
  margin-right: 6px;
}

.text-center {
  text-align: center;
  padding: 30px;
}

.fa-spinner {
  color: #3498db;
}

@media (max-width: 768px) {
  .limits-grid {
    grid-template-columns: 1fr;
  }
  
  .limit-row {
    flex-direction: column;
    align-items: flex-start;
    gap: 4px;
  }
  
  .limit-value {
    text-align: left;
  }
}
</style>

<!-- SERVER SCRIPT -->
(function() {
  'use strict';

  if (input && input.action === 'getAuthorityLimits') {
    var jobCode = input.job_code;
    var limits = [];
    
    if (jobCode) {
      // Query the authority limits table
      var gr = new GlideRecord('x_banun_bunow_si_0_authority_limits');
      gr.addQuery('job_code', jobCode);
      gr.addQuery('active', true);
      gr.query();
      
      while (gr.next()) {
        // Get the actual job code value (not sys_id)
        var jobCodeRecord = gr.job_code.getRefRecord();
        var jobCodeValue = '';
        var jobDescription = '';
        
        if (jobCodeRecord && jobCodeRecord.isValidRecord()) {
          // Try to get the job_code field value (adjust field name as needed)
          jobCodeValue = jobCodeRecord.getValue('job_code') || 
                        jobCodeRecord.getValue('code') || 
                        jobCodeRecord.getValue('number') ||
                        jobCodeRecord.getDisplayValue();
          
          // Get the description (adjust field name as needed)
          jobDescription = jobCodeRecord.getValue('description') || 
                          jobCodeRecord.getValue('name') ||
                          jobCodeRecord.getDisplayValue();
        }
        
        var limit = {
          job_code: gr.getValue('job_code'), // Keep sys_id for reference
          job_code_display: jobCodeValue || gr.job_code.getDisplayValue(), // Display value
          job_description: jobDescription,
          
          // Credit limits
          overdraft_external_accounts: gr.getValue('overdraft_external_accounts'),
          overdraft_internal_accounts: gr.getValue('overdraft_internal_accounts'),
          unavailable_funds_external_accounts: gr.getValue('unavailable_funds_external_accounts'),
          unavailable_funds_internal_accounts: gr.getValue('unavailable_funds_internal_accounts'),
          
          // Non-credit limits
          disbursement_ach: gr.getValue('disbursement_ach'),
          disbursement_wire_transfer_external: gr.getValue('disbursement_wire_transfer_external'),
          disbursement_wire_transfer_internal: gr.getValue('disbursement_wire_transfer_internal'),
          disbursement_official_checks_external: gr.getValue('disbursement_official_checks_external'),
          disbursement_official_checks_internal: gr.getValue('disbursement_official_checks_internal'),
          check_cashing_on_us: gr.getValue('check_cashing_on_us'),
          check_cashing_not_on_us: gr.getValue('check_cashing_not_on_us'),
          remote_deposit: gr.getValue('remote_deposit'),
          treasury_solutions_company_wire_limits: gr.getValue('treasury_solutions_company_wire_limits'),
          fx_wire_limits: gr.getValue('fx_wire_limits')
        };
        
        limits.push(limit);
      }
    }
    
    data.limits = limits;
    data.jobCodeDisplay = input.job_code_display; // Pass through display value
  }
})();

<!-- CLIENT CONTROLLER -->
api.controller = function($scope, spUtil, $timeout) {
  var c = this;
  
  // Initialize variables
  c.jobCode = '';
  c.jobCodeDisplay = '';
  c.authorityLimits = [];
  c.loading = false;
  
  // Function to get job code value from the form
  c.getJobCodeValue = function() {
    // For record producers, try different methods to get the field value
    try {
      // Method 1: Direct g_form access
      if (typeof g_form !== 'undefined' && g_form.getValue) {
        return g_form.getValue('job_code');
      }
      
      // Method 2: Check if we're in a Service Portal form
      if (window.parent && window.parent.g_form) {
        return window.parent.g_form.getValue('job_code');
      }
      
      // Method 3: DOM query for record producer fields
      var jobCodeField = document.querySelector('select[name="job_code"], input[name="job_code"], [data-name="job_code"] select, [data-name="job_code"] input');
      if (jobCodeField) {
        return jobCodeField.value || jobCodeField.selectedOptions?.[0]?.value || '';
      }
      
      // Method 4: Angular form scope (for Service Portal)
      if ($scope.data && $scope.data.job_code) {
        return $scope.data.job_code;
      }
      
    } catch (e) {
      console.log('Error getting job code value:', e);
    }
    
    return '';
  };
  
  // Function to get job code display value
  c.getJobCodeDisplayValue = function() {
    try {
      // Method 1: g_form display value
      if (typeof g_form !== 'undefined' && g_form.getDisplayBox) {
        var displayBox = g_form.getDisplayBox('job_code');
        if (displayBox && displayBox.value) {
          return displayBox.value;
        }
      }
      
      // Method 2: Get text from selected option
      var jobCodeField = document.querySelector('select[name="job_code"], [data-name="job_code"] select');
      if (jobCodeField && jobCodeField.selectedOptions && jobCodeField.selectedOptions[0]) {
        return jobCodeField.selectedOptions[0].text;
      }
      
      // Method 3: For reference fields in Service Portal
      var displayField = document.querySelector('input[name="job_code_display"], [data-name="job_code"] input[type="text"]');
      if (displayField) {
        return displayField.value;
      }
      
    } catch (e) {
      console.log('Error getting job code display value:', e);
    }
    
    return '';
  };
  
  // Function to set up polling to monitor job code changes
  c.setupJobCodeMonitoring = function() {
    var lastJobCode = '';
    
    // Poll for changes every 500ms
    var checkInterval = setInterval(function() {
      var currentJobCode = c.getJobCodeValue();
      
      if (currentJobCode !== lastJobCode) {
        console.log('Job code changed from', lastJobCode, 'to', currentJobCode);
        lastJobCode = currentJobCode;
        c.jobCode = currentJobCode;
        c.jobCodeDisplay = c.getJobCodeDisplayValue();
        
        $timeout(function() {
          c.loadAuthorityLimits();
        });
      }
    }, 500);
    
    // Clean up interval when scope is destroyed
    $scope.$on('$destroy', function() {
      clearInterval(checkInterval);
    });
    
    // Also try to set up direct event listeners
    $timeout(function() {
      c.setupDirectListeners();
    }, 1000);
  };
  
  // Function to set up direct event listeners
  c.setupDirectListeners = function() {
    // Try to add change listeners to job code fields
    var selectors = [
      'select[name="job_code"]',
      'input[name="job_code"]', 
      '[data-name="job_code"] select',
      '[data-name="job_code"] input',
      '#job_code'
    ];
    
    selectors.forEach(function(selector) {
      var elements = document.querySelectorAll(selector);
      elements.forEach(function(element) {
        element.addEventListener('change', function() {
          console.log('Direct change event detected');
          $timeout(function() {
            c.jobCode = c.getJobCodeValue();
            c.jobCodeDisplay = c.getJobCodeDisplayValue();
            c.loadAuthorityLimits();
          });
        });
      });
    });
    
    // Try g_form callback if available
    try {
      if (typeof g_form !== 'undefined' && g_form.addOnChangeCallback) {
        g_form.addOnChangeCallback('job_code', function() {
          console.log('g_form change callback triggered');
          $timeout(function() {
            c.jobCode = c.getJobCodeValue();
            c.jobCodeDisplay = c.getJobCodeDisplayValue();
            c.loadAuthorityLimits();
          });
        });
      }
    } catch (e) {
      console.log('Could not set up g_form callback:', e);
    }
  };
  
  // Function to load authority limits
  c.loadAuthorityLimits = function() {
    console.log('Loading authority limits for job code:', c.jobCode);
    
    if (!c.jobCode) {
      c.authorityLimits = [];
      return;
    }
    
    c.loading = true;
    
    // Call server script to get authority limits
    c.server.get({
      action: 'getAuthorityLimits',
      job_code: c.jobCode,
      job_code_display: c.jobCodeDisplay
    }).then(function(response) {
      console.log('Server response:', response);
      c.authorityLimits = response.data.limits || [];
      if (response.data.jobCodeDisplay) {
        c.jobCodeDisplay = response.data.jobCodeDisplay;
      }
      c.loading = false;
    }).catch(function(error) {
      console.error('Error loading authority limits:', error);
      spUtil.addErrorMessage('Failed to load authority limits');
      c.authorityLimits = [];
      c.loading = false;
    });
  };
  
  // Initialize on load
  $timeout(function() {
    c.jobCode = c.getJobCodeValue();
    c.jobCodeDisplay = c.getJobCodeDisplayValue();
    console.log('Initial job code:', c.jobCode, 'Display:', c.jobCodeDisplay);
    
    if (c.jobCode) {
      c.loadAuthorityLimits();
    }
    
    // Set up monitoring for job code changes
    c.setupJobCodeMonitoring();
  }, 500);
};

<!-- OPTIONS SCHEMA -->
[
  {
    "hint": "Title to display at the top of the widget",
    "name": "title",
    "section": "Presentation",
    "default_value": "Authority Limits",
    "label": "Widget Title",
    "type": "string"
  },
  {
    "hint": "Field name for the job code on the record producer",
    "name": "job_code_field",
    "section": "Behavior",
    "default_value": "job_code",
    "label": "Job Code Field Name",
    "type": "string"
  },
  {
    "hint": "Table name for authority limits lookup",
    "name": "authority_table",
    "section": "Behavior",
    "default_value": "x_banun_bunow_si_0_authority_limits",
    "label": "Authority Limits Table",
    "type": "string"
  }
]
