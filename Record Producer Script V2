// Enhanced section for tracking changes
if (requestType === 'change_to_existing_authority' && producer.original_authority_data) {
    try {
        var originalData = JSON.parse(producer.original_authority_data.toString());
        
        // Create change tracking record or add to description
        var changeDescription = [];
        
        // Track non-credit changes
        if (nonCreditGR) {
            var nonCreditFields = [
                {field: 'disbursement_ach', label: 'Disbursement ACH'},
                {field: 'disbursement_wire_transfer_external', label: 'Wire Transfer External'},
                {field: 'disbursement_wire_transfer_internal', label: 'Wire Transfer Internal'},
                {field: 'disbursement_official_checks_external', label: 'Official Checks External'},
                {field: 'disbursement_official_checks_internal', label: 'Official Checks Internal'},
                {field: 'check_cashing_on_us', label: 'Check Cashing On-Us'},
                {field: 'check_cashing_not_on_us', label: 'Check Cashing Not On-Us'},
                {field: 'remote_deposit', label: 'Remote Deposit'},
                {field: 'treasury_solutions_company_wire_limits', label: 'Treasury Solutions Limits'},
                {field: 'fx_wire_limits', label: 'FX Wire Limits'}
            ];
            
            nonCreditFields.forEach(function(fieldInfo) {
                var oldValue = originalData[fieldInfo.field] || '0';
                var newValue = nonCreditGR.getValue(fieldInfo.field) || '0';
                
                if (oldValue != newValue) {
                    changeDescription.push(fieldInfo.label + ': $' + oldValue + ' → $' + newValue);
                } else if (oldValue != '0') {
                    changeDescription.push(fieldInfo.label + ': $' + oldValue + ' (No Change)');
                }
            });
            
            // Store change summary on the child record
            if (changeDescription.length > 0) {
                nonCreditGR.setValue('change_summary', changeDescription.join('\n'));
                nonCreditGR.update();
            }
        }
        
        // Track credit changes
        if (creditGR) {
            var creditChanges = [];
            var creditFields = [
                {field: 'overdraft_external_accounts', label: 'Overdraft External'},
                {field: 'overdraft_internal_accounts', label: 'Overdraft Internal'},
                {field: 'unavailable_funds_external_accounts', label: 'Unavailable Funds External'},
                {field: 'unavailable_funds_internal_accounts', label: 'Unavailable Funds Internal'}
            ];
            
            creditFields.forEach(function(fieldInfo) {
                var oldValue = originalData[fieldInfo.field] || '0';
                var newValue = creditGR.getValue(fieldInfo.field) || '0';
                
                if (oldValue != newValue) {
                    creditChanges.push(fieldInfo.label + ': $' + oldValue + ' → $' + newValue);
                } else if (oldValue != '0') {
                    creditChanges.push(fieldInfo.label + ': $' + oldValue + ' (No Change)');
                }
            });
            
            if (creditChanges.length > 0) {
                creditGR.setValue('change_summary', creditChanges.join('\n'));
                creditGR.update();
            }
        }
        
        // Store full change summary on parent record for approval notifications
        var fullChangeSummary = changeDescription.concat(creditChanges || []).join('\n');
        if (fullChangeSummary) {
            current.setValue('authority_changes_summary', fullChangeSummary);
        }
        
    } catch (e) {
        gs.addErrorMessage('Error tracking changes: ' + e.message);
    }
}
