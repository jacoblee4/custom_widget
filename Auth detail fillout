<!-- ============================================ -->
<!-- HTML TEMPLATE -->
<!-- Place this in the "HTML Template" field -->
<!-- ============================================ -->

<div class="widget-container">
    <div class="widget-header">
        <h2>Authority Limit Details</h2>
    </div>
    
    <div class="main-content">
        <div class="left-column">
            <div class="checkbox-group" id="nonCreditGroup">
                <input type="checkbox" id="nonCreditAuth" name="non_credit_authority_check">
                <label for="nonCreditAuth">Non-Credit Authority</label>
            </div>
            
            <div id="nonCreditSection" class="section">
                <h3>Non-Credit Authority Limits</h3>
                
                <!-- Disbursement Section -->
                <div class="form-group">
                    <label for="disbursement">
                        Disbursement 
                        <span class="info-icon" title="Disbursements – This authority provides approval limits for the disbursement of ACH, Wire Transfers, and/or Official Check transaction types based on the requested and approved selections. Internal Accounts are defined as BankUnited owned and controlled accounts.
If applicable: Choose the appropriate transaction type(s) and enter the requested disbursement amount. If the transaction type(s) should be restricted to internal accounts, select the Internal Accounts Only option.">ⓘ</span>
                    </label>
                    <div class="currency-wrapper">
                        <span class="currency-symbol">$</span>
                        <input type="text" id="disbursement" class="form-control" placeholder="">
                    </div>
                </div>
                
                <div class="disbursement-options">
                    <div class="checkbox-group-small">
                        <input type="checkbox" id="achCheck">
                        <label for="achCheck">ACH</label>
                    </div>
                    
                    <div class="checkbox-group-small">
                        <input type="checkbox" id="wireTransferCheck">
                        <label for="wireTransferCheck">Wire Transfer</label>
                    </div>
                    
                    <div class="indented-checkbox" id="wireInternalOnlyContainer" style="display: none;">
                        <input type="checkbox" id="wireInternalOnly">
                        <label for="wireInternalOnly">Internal Accounts Only</label>
                    </div>
                    
                    <div class="checkbox-group-small">
                        <input type="checkbox" id="officialChecksCheck">
                        <label for="officialChecksCheck">Official Checks</label>
                    </div>
                    
                    <div class="indented-checkbox spaced-indent" id="checksInternalOnlyContainer" style="display: none;">
                        <input type="checkbox" id="checksInternalOnly">
                        <label for="checksInternalOnly">Internal Accounts Only</label>
                    </div>
                </div>
                
                <!-- Check Cashing Section -->
                <div class="subsection">
                    <h4>
                        Check Cashing & Cash Withdrawal 
                        <span class="info-icon" title="Check Cashing – This authority provides the ability to approve cash withdrawals, the cashing of checks drawn on BankUnited (On-Us), and checks drawn on another institution (not On-Us) that are being cashed by BankUnited. Approval limit is based on the selected options and amounts.
If applicable: Choose the appropriate option(s) and enter the requested approval limit amount.">ⓘ</span>
                    </h4>
                    <div class="form-group">
                        <label for="checkCashingOnUs">On-Us (Checks & Cash Withdrawals)</label>
                        <div class="currency-wrapper">
                            <span class="currency-symbol">$</span>
                            <input type="text" id="checkCashingOnUs" class="form-control" placeholder="">
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="checkCashingNotOnUs">Not On-Us (Checks)</label>
                        <div class="currency-wrapper">
                            <span class="currency-symbol">$</span>
                            <input type="text" id="checkCashingNotOnUs" class="form-control" placeholder="">
                        </div>
                    </div>
                </div>
                
                <!-- Other Fields Section -->
                <div class="subsection">
                    <div class="form-group">
                        <label for="remoteDeposit">
                            Remote Deposit 
                            <span class="info-icon" title="Remote Deposit – This authority provides the ability to approve external client Remote Deposit limits, utilizing the TS Daily Remote Deposit Capture Limit Approval Form.
If applicable: Enter the requested Remote Deposit Capture limit amount.">ⓘ</span>
                        </label>
                        <div class="currency-wrapper">
                            <span class="currency-symbol">$</span>
                            <input type="text" id="remoteDeposit" class="form-control" placeholder="">
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="treasurySolutions">
                            Treasury Solutions Company Wire Limits 
                            <span class="info-icon" title="Treasury Solutions Company Wire Limits – This authority provides the ability to approve external client wire limits, utilizing the TS Daily Wire Limit Approval Form. This external client limit applies to the Treasury Solution systems (i.e. BFS/Lynx, OBS).
If applicable: Enter the requested wire limit amount.">ⓘ</span>
                        </label>
                        <div class="currency-wrapper">
                            <span class="currency-symbol">$</span>
                            <input type="text" id="treasurySolutions" class="form-control" placeholder="">
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="fxWireLimits">
                            FX Wire Limits 
                            <span class="info-icon" title="FX Wire Limits – This authority provides the ability to approve external client wire limits, utilizing the BankUnitedFX Wire Limit Approval Form. This external client limit applies to the Treasury Solution system BankUnitedFX.
If applicable: Enter the requested wire limit amount.">ⓘ</span>
                        </label>
                        <div class="currency-wrapper">
                            <span class="currency-symbol">$</span>
                            <input type="text" id="fxWireLimits" class="form-control" placeholder="">
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="right-column">
            <div class="checkbox-group" id="creditGroup">
                <input type="checkbox" id="creditAuth" name="credit_authority_check">
                <label for="creditAuth">Credit Authority</label>
            </div>
            
            <div id="creditSection" class="section">
                <h3>Credit Authority Limits</h3>
                
                <!-- Overdraft Section -->
                <div class="form-group">
                    <label for="overdraft">
                        Overdraft 
                        <span class="info-icon" title="Overdraft – This authority provides approval limits for Overdraft transactions based on the requested and approved selections. Internal Accounts are defined as BankUnited owned and controlled accounts.
If applicable: Enter the requested approval amount. If the authority type should be restricted to internal accounts ONLY, select the appropriate option.">ⓘ</span>
                    </label>
                    <div class="currency-wrapper">
                        <span class="currency-symbol">$</span>
                        <input type="text" id="overdraft" class="form-control" placeholder="">
                    </div>
                    <div class="indented-checkbox">
                        <input type="checkbox" id="overdraftInternalOnly">
                        <label for="overdraftInternalOnly">Internal Accounts Only</label>
                    </div>
                </div>
                
                <!-- Unavailable Funds Section -->
                <div class="form-group">
                    <label for="unavailableFunds">
                        Unavailable Funds 
                        <span class="info-icon" title="Unavailable Funds – This authority provides approval limits for Unavailable Funds transactions based on the requested and approved selections. Internal Accounts are defined as BankUnited owned and controlled accounts.
If applicable: Enter the requested approval amount. If the authority type should be restricted to internal accounts ONLY, select the appropriate option.">ⓘ</span>
                    </label>
                    <div class="currency-wrapper">
                        <span class="currency-symbol">$</span>
                        <input type="text" id="unavailableFunds" class="form-control" placeholder="">
                    </div>
                    <div class="indented-checkbox">
                        <input type="checkbox" id="unavailableInternalOnly">
                        <label for="unavailableInternalOnly">Internal Accounts Only</label>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div id="justificationSection" class="justification-section">
        <h3>Justification</h3>
        <div class="info-message">
            Using the text box below, please provide a detailed justification for this request. For New Authority or Limit Change requests, include what the authority will be used for (i.e. The approval of Loan Fundings, Customer Transactions, Cash Management, etc.).
        </div>
        <div class="form-group">
            <label for="businessNeed">Overall Business Need <span class="required-asterisk">*</span></label>
            <textarea id="businessNeed" class="form-control textarea"></textarea>
        </div>
    </div>
</div>

<!-- ============================================ -->
<!-- CSS - SCSS -->
<!-- Place this in the "CSS - SCSS" field -->
<!-- ============================================ -->

.widget-container {
    max-width: 900px;
    margin: 0 auto;
    background: white;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    padding: 24px;
}

.widget-header {
    margin-bottom: 24px;
    padding-bottom: 16px;
    border-bottom: 2px solid #e8e8e8;
    
    h2 {
        color: #333;
        font-size: 20px;
        font-weight: 600;
        margin: 0;
    }
}

.main-content {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 30px;
    margin-bottom: 24px;
}

.left-column, .right-column {
    display: flex;
    flex-direction: column;
    gap: 20px;
}

.checkbox-group {
    display: flex;
    align-items: center;
    padding: 12px 16px;
    background: #f8f9fa;
    border: 1px solid #dee2e6;
    border-radius: 6px;
    cursor: pointer;
    transition: all 0.2s ease;
    
    &:hover {
        background: #e9ecef;
        border-color: #adb5bd;
    }
    
    &.active {
        background: #e7f5ff;
        border-color: #339af0;
    }
    
    input[type="checkbox"] {
        margin-right: 10px;
        width: 18px;
        height: 18px;
        cursor: pointer;
    }
    
    label {
        cursor: pointer;
        font-size: 15px;
        color: #333;
        font-weight: 500;
        user-select: none;
        margin: 0;
    }
}

.section {
    display: none;
    padding: 20px;
    background: #f8f9fa;
    border: 1px solid #dee2e6;
    border-radius: 6px;
    
    &.active {
        display: block;
    }
    
    h3 {
        color: #495057;
        font-size: 16px;
        font-weight: 600;
        margin: 0 0 16px 0;
        padding-bottom: 8px;
        border-bottom: 1px solid #dee2e6;
    }
}

.form-group {
    margin-bottom: 16px;
    
    &:last-child {
        margin-bottom: 0;
    }
    
    label {
        display: block;
        margin-bottom: 6px;
        color: #495057;
        font-size: 14px;
        font-weight: 500;
    }
}

.form-control {
    width: 100%;
    padding: 8px 12px;
    border: 1px solid #ced4da;
    border-radius: 4px;
    font-size: 14px;
    transition: border-color 0.15s ease-in-out;
    
    &:focus {
        outline: none;
        border-color: #339af0;
        box-shadow: 0 0 0 2px rgba(51, 154, 240, 0.1);
    }
    
    &.textarea {
        min-height: 120px;
        resize: vertical;
        font-family: inherit;
    }
}

.currency-wrapper {
    position: relative;
    
    .currency-symbol {
        position: absolute;
        left: 12px;
        top: 50%;
        transform: translateY(-50%);
        color: #6c757d;
        font-weight: 500;
        z-index: 1;
    }
    
    .form-control {
        padding-left: 28px;
    }
}

.justification-section {
    display: none;
    padding: 20px;
    background: #fff4e6;
    border: 1px solid #ffd93d;
    border-radius: 6px;
    
    &.active {
        display: block;
    }
    
    h3 {
        color: #495057;
        font-size: 16px;
        font-weight: 600;
        margin: 0 0 12px 0;
    }
}

.info-message {
    background: white;
    padding: 12px;
    border-radius: 4px;
    margin-bottom: 16px;
    font-size: 14px;
    color: #6c757d;
    line-height: 1.5;
    border-left: 3px solid #ffd93d;
}

@media (max-width: 768px) {
    .main-content {
        grid-template-columns: 1fr;
    }
}

.disbursement-options {
    margin-top: 15px;
    padding-left: 15px;
}

.checkbox-group-small {
    display: flex;
    align-items: center;
    margin-bottom: 10px;
    
    input[type="checkbox"] {
        margin-right: 8px;
        width: 16px;
        height: 16px;
    }
    
    label {
        font-size: 14px;
        color: #495057;
        margin: 0;
        cursor: pointer;
    }
}

.indented-checkbox {
    margin-left: 25px;
    margin-top: 8px;
    display: flex;
    align-items: center;
    
    input[type="checkbox"] {
        margin-right: 8px;
        width: 14px;
        height: 14px;
    }
    
    label {
        font-size: 13px;
        color: #6c757d;
        margin: 0;
        cursor: pointer;
    }
}

.subsection {
    margin-top: 25px;
    padding-top: 20px;
    border-top: 1px solid #dee2e6;
    
    h4 {
        color: #495057;
        font-size: 15px;
        font-weight: 600;
        margin: 0 0 15px 0;
    }
}

.required-asterisk {
    color: #d9534f;
    font-weight: bold;
    margin-left: 3px;
}

.validation-error {
    color: #d9534f;
    font-size: 12px;
    margin-top: 5px;
    font-style: italic;
}

.form-control.error {
    border-color: #d9534f;
    box-shadow: 0 0 0 2px rgba(217, 83, 79, 0.1);
}

.info-icon {
    display: inline-block;
    width: 16px;
    height: 16px;
    background-color: #17a2b8;
    color: white;
    border-radius: 50%;
    text-align: center;
    font-size: 12px;
    line-height: 16px;
    margin-left: 5px;
    cursor: help;
    font-weight: normal;
}

.spaced-indent {
    margin-top: 12px !important;
}


<!-- ============================================ -->
<!-- CLIENT CONTROLLER -->
<!-- Place this in the "Client Controller" field -->
<!-- ============================================ -->

api.controller = function($scope, $window) {
    var c = this;
    var g_form = $scope.page.g_form;

    // Tracks whether the user has attempted to submit yet
    var hasSubmitted = false;

    c.$onInit = function() {
        setTimeout(function() {
            initializeWidget();
        }, 500);
    };

    function initializeWidget() {
        // Get references to DOM elements
        const nonCreditCheckbox = document.getElementById('nonCreditAuth');
        const creditCheckbox = document.getElementById('creditAuth');
        const nonCreditGroup = document.getElementById('nonCreditGroup');
        const creditGroup = document.getElementById('creditGroup');
        const nonCreditSection = document.getElementById('nonCreditSection');
        const creditSection = document.getElementById('creditSection');
        const justificationSection = document.getElementById('justificationSection');

        const wireTransferCheck = document.getElementById('wireTransferCheck');
        const wireInternalOnlyContainer = document.getElementById('wireInternalOnlyContainer');
        const wireInternalOnly = document.getElementById('wireInternalOnly');
        const officialChecksCheck = document.getElementById('officialChecksCheck');
        const checksInternalOnlyContainer = document.getElementById('checksInternalOnlyContainer');
        const checksInternalOnly = document.getElementById('checksInternalOnly');

        // Widget data model
        c.authorityData = {
            non_credit_checked: false,
            credit_checked: false,
            disbursement: '',
            ach_checked: false,
            wire_transfer_checked: false,
            wire_internal_only: false,
            official_checks_checked: false,
            checks_internal_only: false,
            check_cashing_on_us: '',
            check_cashing_not_on_us: '',
            remote_deposit: '',
            treasury_solutions_company_wire_limits: '',
            fx_wire_limits: '',
            overdraft: '',
            overdraft_internal_only: false,
            unavailable_funds: '',
            unavailable_internal_only: false,
            overall_business_need: ''
        };

        // Error container (widget-level)
        var errorContainer = document.createElement('div');
        errorContainer.id = 'validationErrors';
        errorContainer.style.cssText = 'display: none; background: #f8d7da; color: #721c24; padding: 15px; border: 1px solid #f5c6cb; border-radius: 6px; margin-bottom: 20px; font-size: 14px;';
        var widgetContainer = document.querySelector('.widget-container');
        var widgetHeader = document.querySelector('.widget-header');
        widgetContainer.insertBefore(errorContainer, widgetHeader.nextSibling);

        // Helpers: currency format
        function formatCurrency(value) {
            if (!value) return '';
            let numStr = value.toString().replace(/[^\d.]/g, '');
            const parts = numStr.split('.');
            if (parts.length > 2) {
                numStr = parts[0] + '.' + parts.slice(1).join('');
            }
            const [integerPart, decimalPart] = numStr.split('.');
            const formattedInteger = integerPart.replace(/\B(?=(\d{3})+(?!\d))/g, ',');
            if (decimalPart !== undefined) {
                const limitedDecimal = decimalPart.substring(0, 2);
                return formattedInteger + '.' + limitedDecimal;
            }
            return formattedInteger;
        }

        function getCurrencyValue(formattedValue) {
            if (!formattedValue) return '';
            return formattedValue.replace(/[^\d.]/g, '');
        }

        // Render the widget error box
        function showValidationErrors(errors) {
            if (errors.length === 0) {
                errorContainer.style.display = 'none';
                return;
            }
            var errorHtml = '<strong>Please correct the following errors:</strong><ul>';
            errors.forEach(function(error) {
                errorHtml += '<li>' + error + '</li>';
            });
            errorHtml += '</ul>';
            errorContainer.innerHTML = errorHtml;
            errorContainer.style.display = 'block';
        }

        // Core validation (with "silent" option)
        function validateForm(silent) {
            var errors = [];

            // Must select at least one authority type
            if (!c.authorityData.non_credit_checked && !c.authorityData.credit_checked) {
                errors.push('You must select at least one authority type (Credit Authority or Non-Credit Authority)');
            }

            // Business justification required
            if (!c.authorityData.overall_business_need || c.authorityData.overall_business_need.trim() === '') {
                errors.push('Overall Business Need is required');
            }

            // Non-credit rules
            if (c.authorityData.non_credit_checked) {
                var hasNonCreditValue = c.authorityData.disbursement || c.authorityData.check_cashing_on_us ||
                                        c.authorityData.check_cashing_not_on_us || c.authorityData.remote_deposit ||
                                        c.authorityData.treasury_solutions_company_wire_limits || c.authorityData.fx_wire_limits;

                if (!hasNonCreditValue) {
                    errors.push('If Non-Credit Authority is selected, at least one currency field must have a value');
                }

                if (c.authorityData.disbursement &&
                    !c.authorityData.ach_checked &&
                    !c.authorityData.wire_transfer_checked &&
                    !c.authorityData.official_checks_checked) {
                    errors.push('If Disbursement amount is entered, you must select at least one option: ACH, Wire Transfer, or Official Checks');
                }
            }

            // Credit rules
            if (c.authorityData.credit_checked) {
                var hasCreditValue = c.authorityData.overdraft || c.authorityData.unavailable_funds;
                if (!hasCreditValue) {
                    errors.push('If Credit Authority is selected, at least one currency field must have a value');
                }
            }

            var isValid = errors.length === 0;

            // Always keep RP variables in sync so the server can block if needed
            g_form.setValue('form_validation_errors', errors.join('|'));
            g_form.setValue('form_is_valid', isValid ? 'true' : 'false');

            // Only show the widget error box after first submit attempt,
            // OR when hasSubmitted is true and we're validating due to live edits
            if (!silent) {
                showValidationErrors(errors);
            } else {
                // Ensure the box is hidden during silent validation
                errorContainer.style.display = 'none';
            }

            return isValid;
        }

        // Update RP variables and (silently) compute validity
        function updateRecordProducerVariables() {
            // Map user-entered data to RP variables
            g_form.setValue('overall_business_need', c.authorityData.overall_business_need);

            var authority_types = [];
            var authority_data = [];

            if (c.authorityData.non_credit_checked) {
                authority_types.push('non_credit');
                var nonCreditData = {
                    disbursement_ach: (c.authorityData.ach_checked && c.authorityData.disbursement) ? c.authorityData.disbursement : '',
                    disbursement_wire_transfer_external: (c.authorityData.wire_transfer_checked && !c.authorityData.wire_internal_only && c.authorityData.disbursement) ? c.authorityData.disbursement : '',
                    disbursement_wire_transfer_internal: (c.authorityData.wire_transfer_checked && c.authorityData.disbursement) ? c.authorityData.disbursement : '',
                    disbursement_official_checks_external: (c.authorityData.official_checks_checked && !c.authorityData.checks_internal_only && c.authorityData.disbursement) ? c.authorityData.disbursement : '',
                    disbursement_official_checks_internal: (c.authorityData.official_checks_checked && c.authorityData.disbursement) ? c.authorityData.disbursement : '',
                    check_cashing_on_us: c.authorityData.check_cashing_on_us,
                    check_cashing_not_on_us: c.authorityData.check_cashing_not_on_us,
                    remote_deposit: c.authorityData.remote_deposit,
                    treasury_solutions_company_wire_limits: c.authorityData.treasury_solutions_company_wire_limits,
                    fx_wire_limits: c.authorityData.fx_wire_limits
                };
                authority_data.push(JSON.stringify(nonCreditData));
            }

            if (c.authorityData.credit_checked) {
                authority_types.push('credit');
                var creditData = {
                    overdraft_internal_accounts: c.authorityData.overdraft || '',
                    overdraft_external_accounts: (c.authorityData.overdraft && !c.authorityData.overdraft_internal_only) ? c.authorityData.overdraft : '',
                    unavailable_funds_internal_accounts: c.authorityData.unavailable_funds || '',
                    unavailable_funds_external_accounts: (c.authorityData.unavailable_funds && !c.authorityData.unavailable_internal_only) ? c.authorityData.unavailable_funds : ''
                };
                authority_data.push(JSON.stringify(creditData));
            }

            g_form.setValue('authority_types', authority_types.join('|'));
            g_form.setValue('authority_data', authority_data.join('|'));

            // Before first submit -> silent (no UI); after first submit -> show/update UI live
            validateForm(!hasSubmitted);
        }

        // Keep local model + RP variables updated
        function updateWidgetData(fieldName, value) {
            c.authorityData[fieldName] = value;
            updateRecordProducerVariables();
        }

        // Authority selection toggles
        function handleAuthoritySelection() {
            const nonCreditChecked = nonCreditCheckbox.checked;
            const creditChecked = creditCheckbox.checked;

            nonCreditGroup.classList.toggle('active', nonCreditChecked);
            creditGroup.classList.toggle('active', creditChecked);
            nonCreditSection.classList.toggle('active', nonCreditChecked);
            creditSection.classList.toggle('active', creditChecked);
            justificationSection.classList.toggle('active', nonCreditChecked || creditChecked);

            updateWidgetData('non_credit_checked', nonCreditChecked);
            updateWidgetData('credit_checked', creditChecked);
        }

        function handleWireTransferChange() {
            const isChecked = wireTransferCheck.checked;
            wireInternalOnlyContainer.style.display = isChecked ? 'block' : 'none';
            if (!isChecked) {
                wireInternalOnly.checked = false;
                updateWidgetData('wire_internal_only', false);
            }
            updateWidgetData('wire_transfer_checked', isChecked);
        }

        function handleOfficialChecksChange() {
            const isChecked = officialChecksCheck.checked;
            checksInternalOnlyContainer.style.display = isChecked ? 'block' : 'none';
            if (!isChecked) {
                checksInternalOnly.checked = false;
                updateWidgetData('checks_internal_only', false);
            }
            updateWidgetData('official_checks_checked', isChecked);
        }

        // Setup currency field
        function setupCurrencyField(inputId, fieldName) {
            const input = document.getElementById(inputId);
            if (!input) return;
            let isUpdating = false;
            function handleCurrencyInput(event) {
                if (isUpdating) return;
                isUpdating = true;
                const cursorPosition = event.target.selectionStart;
                const oldValue = event.target.value;
                const oldLength = oldValue.length;
                const formattedValue = formatCurrency(oldValue);
                event.target.value = formattedValue;
                const newLength = formattedValue.length;
                const lengthDiff = newLength - oldLength;
                const newCursorPosition = Math.max(0, cursorPosition + lengthDiff);
                setTimeout(() => {
                    event.target.setSelectionRange(newCursorPosition, newCursorPosition);
                }, 0);
                const rawValue = getCurrencyValue(formattedValue);
                updateWidgetData(fieldName, rawValue);
                isUpdating = false;
            }
            input.addEventListener('input', handleCurrencyInput);
        }

        // Setup generic field listeners
        function setupCheckboxField(inputId, fieldName) {
            const input = document.getElementById(inputId);
            if (!input) return;
            input.addEventListener('change', function(event) {
                updateWidgetData(fieldName, event.target.checked);
            });
        }

        function setupTextAreaField(inputId, fieldName) {
            const input = document.getElementById(inputId);
            if (!input) return;
            input.addEventListener('input', function(event) {
                updateWidgetData(fieldName, event.target.value);
            });
        }

        // Bind events
        if (nonCreditCheckbox) nonCreditCheckbox.addEventListener('change', handleAuthoritySelection);
        if (creditCheckbox) creditCheckbox.addEventListener('change', handleAuthoritySelection);
        if (nonCreditGroup) {
            nonCreditGroup.addEventListener('click', function(e) {
                if (e.target.tagName !== 'INPUT') {
                    nonCreditCheckbox.checked = !nonCreditCheckbox.checked;
                    handleAuthoritySelection();
                }
            });
        }
        if (creditGroup) {
            creditGroup.addEventListener('click', function(e) {
                if (e.target.tagName !== 'INPUT') {
                    creditCheckbox.checked = !creditCheckbox.checked;
                    handleAuthoritySelection();
                }
            });
        }
        if (wireTransferCheck) wireTransferCheck.addEventListener('change', handleWireTransferChange);
        if (officialChecksCheck) officialChecksCheck.addEventListener('change', handleOfficialChecksChange);

        setupCurrencyField('disbursement', 'disbursement');
        setupCurrencyField('checkCashingOnUs', 'check_cashing_on_us');
        setupCurrencyField('checkCashingNotOnUs', 'check_cashing_not_on_us');
        setupCurrencyField('remoteDeposit', 'remote_deposit');
        setupCurrencyField('treasurySolutions', 'treasury_solutions_company_wire_limits');
        setupCurrencyField('fxWireLimits', 'fx_wire_limits');
        setupCurrencyField('overdraft', 'overdraft');
        setupCurrencyField('unavailableFunds', 'unavailable_funds');

        setupCheckboxField('achCheck', 'ach_checked');
        setupCheckboxField('wireInternalOnly', 'wire_internal_only');
        setupCheckboxField('checksInternalOnly', 'checks_internal_only');
        setupCheckboxField('overdraftInternalOnly', 'overdraft_internal_only');
        setupCheckboxField('unavailableInternalOnly', 'unavailable_internal_only');

        setupTextAreaField('businessNeed', 'overall_business_need');

        // 🔸 Initialize RP variables and default validation state (silent)
        updateRecordProducerVariables();   // sets types/data + silent validate (invalid by default)
    }

    // 🔑 Validate on submit: first time shows error box and blocks;
    // after that, live edits keep the box in sync via updateRecordProducerVariables()
    c.onSubmit = function() {
        hasSubmitted = true;
        var isValid = validateForm(false);  // show messages now
        if (!isValid) {
            var errorBox = document.getElementById('validationErrors');
            if (errorBox) {
                errorBox.style.display = 'block';
                errorBox.scrollIntoView({ behavior: 'smooth', block: 'nearest' });
            }
            return false; // block submission
        }
        return true; // allow submission
    };
};



<!-- ============================================ -->
<!-- SERVER SCRIPT -->
<!-- Place this in the "Server Script" field -->
<!-- ============================================ -->

(function() {
    data.user = gs.getUser().getName();
    data.userId = gs.getUserID();
})();



<!-- ============================================ -->
<!-- RP SCRIPT -->
<!-- ============================================ -->
// Authority Widget Record Producer Script
// Processes widget data and creates parent/child authority records

var parentId = current.getUniqueValue();

// Validate form data before processing
var formIsValid = producer.form_is_valid ? producer.form_is_valid.toString().trim() : 'false';
var validationPassed = (formIsValid === 'true' || formIsValid === true || producer.form_is_valid === true);

if (validationPassed) {
    // Set job code string fields on parent record for display purposes
    if (producer.job_code) {
        // Look up job code details from reference table
        var jobCodeGR = new GlideRecord('x_banun_rbac_job_code');
        if (jobCodeGR.get(producer.job_code)) {
            // Set string fields on parent record (no update() call needed - RP handles this)
            current.setValue('job_code_string', jobCodeGR.getValue('job_code'));
            current.setValue('job_function_description', jobCodeGR.getValue('job_function_description'));
        }
    }

    // Process authority data if provided by widget
    if (producer.authority_types && producer.authority_data) {
        var authority_types = producer.authority_types.toString().split('|');
        var authority_data_strings = producer.authority_data.toString().split('|');

        // Create child records for each authority type selected
        for (var i = 0; i < authority_types.length; i++) {
            var authorityType = authority_types[i];
            var authorityDataStr = authority_data_strings[i];

            try {
                var authorityData = JSON.parse(authorityDataStr);

                if (authorityType === 'non_credit') {
                    // Create non-credit authority limit record
                    var nonCreditGR = new GlideRecord('x_banun_bunow_si_0_non_credit_authority_limits');
                    nonCreditGR.initialize();

                    // Link to parent signature request
                    nonCreditGR.setValue('parent', parentId);

                    // Set job code reference for reporting
                    if (producer.job_code) {
                        nonCreditGR.setValue('job_code', producer.job_code);
                    }

                    // Set all non-credit fields with values
                    if (authorityData.disbursement_ach) nonCreditGR.setValue('disbursement_ach', authorityData.disbursement_ach);
                    if (authorityData.disbursement_wire_transfer_external) nonCreditGR.setValue('disbursement_wire_transfer_external', authorityData.disbursement_wire_transfer_external);
                    if (authorityData.disbursement_wire_transfer_internal) nonCreditGR.setValue('disbursement_wire_transfer_internal', authorityData.disbursement_wire_transfer_internal);
                    if (authorityData.disbursement_official_checks_external) nonCreditGR.setValue('disbursement_official_checks_external', authorityData.disbursement_official_checks_external);
                    if (authorityData.disbursement_official_checks_internal) nonCreditGR.setValue('disbursement_official_checks_internal', authorityData.disbursement_official_checks_internal);
                    if (authorityData.check_cashing_on_us) nonCreditGR.setValue('check_cashing_on_us', authorityData.check_cashing_on_us);
                    if (authorityData.check_cashing_not_on_us) nonCreditGR.setValue('check_cashing_not_on_us', authorityData.check_cashing_not_on_us);
                    if (authorityData.remote_deposit) nonCreditGR.setValue('remote_deposit', authorityData.remote_deposit);
                    if (authorityData.treasury_solutions_company_wire_limits) nonCreditGR.setValue('treasury_solutions_company_wire_limits', authorityData.treasury_solutions_company_wire_limits);
                    if (authorityData.fx_wire_limits) nonCreditGR.setValue('fx_wire_limits', authorityData.fx_wire_limits);

                    nonCreditGR.insert();
                }
                else if (authorityType === 'credit') {
                    // Create credit authority limit record
                    var creditGR = new GlideRecord('x_banun_bunow_si_0_credit_authority_limits');
                    creditGR.initialize();

                    // Link to parent signature request
                    creditGR.setValue('parent', parentId);

                    // Set job code reference for reporting
                    if (producer.job_code) {
                        creditGR.setValue('job_code', producer.job_code);
                    }

                    // Set all credit fields with values
                    if (authorityData.overdraft_internal_accounts) {
                        creditGR.setValue('overdraft_internal_accounts', authorityData.overdraft_internal_accounts);
                    }
                    if (authorityData.overdraft_external_accounts) {
                        creditGR.setValue('overdraft_external_accounts', authorityData.overdraft_external_accounts);
                    }
                    if (authorityData.unavailable_funds_internal_accounts) {
                        creditGR.setValue('unavailable_funds_internal_accounts', authorityData.unavailable_funds_internal_accounts);
                    }
                    if (authorityData.unavailable_funds_external_accounts) {
                        creditGR.setValue('unavailable_funds_external_accounts', authorityData.unavailable_funds_external_accounts);
                    }

                    creditGR.insert();
                }

            } catch (e) {
                // Handle JSON parsing errors gracefully
                gs.addErrorMessage('Error processing authority data: ' + e.message);
            }
        }
    }

} else {
    // Form validation failed - show errors and prevent submission
    var errors = producer.form_validation_errors ? producer.form_validation_errors.toString().split('|') : ['Form validation failed'];
    gs.addErrorMessage('Please correct the following errors: ' + errors.join('; '));
    current.setAbortAction(true);
}
