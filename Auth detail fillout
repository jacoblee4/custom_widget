<!-- ============================================ -->
<!-- HTML TEMPLATE -->
<!-- Place this in the "HTML Template" field -->
<!-- ============================================ -->

<div class="widget-container">
    <div class="widget-header">
        <h2>Authority Limit Details</h2>
    </div>
    
    <div class="main-content">
        <div class="left-column">
            <div class="checkbox-group" id="nonCreditGroup">
                <input type="checkbox" id="nonCreditAuth" name="non_credit_authority_check">
                <label for="nonCreditAuth">Non-Credit Authority</label>
            </div>
            
            <div id="nonCreditSection" class="section">
                <h3>Non-Credit Authority Limits</h3>
                <div class="form-group">
                    <label for="disbursement">Disbursement</label>
                    <div class="currency-wrapper">
                        <span class="currency-symbol">$</span>
                        <input type="text" 
                               id="disbursement" 
                               name="disbursement" 
                               class="form-control currency-input" 
                               placeholder="0.00">
                    </div>
                </div>
            </div>
        </div>

        <div class="right-column">
            <div class="checkbox-group" id="creditGroup">
                <input type="checkbox" id="creditAuth" name="credit_authority_check">
                <label for="creditAuth">Credit Authority</label>
            </div>
            
            <div id="creditSection" class="section">
                <h3>Credit Authority Limits</h3>
                <div class="form-group">
                    <label for="overdraft">Overdraft</label>
                    <div class="currency-wrapper">
                        <span class="currency-symbol">$</span>
                        <input type="text" 
                               id="overdraft" 
                               name="overdraft" 
                               class="form-control currency-input" 
                               placeholder="0.00">
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div id="justificationSection" class="justification-section">
        <h3>Justification</h3>
        <div class="info-message">
            Please complete the following fields to provide justification for this request. If you have attachments, please click attach to the record by going to the attachment section on the far right and look for the paper clip.
        </div>
        <div class="form-group">
            <label for="businessNeed">Overall Business Need</label>
            <textarea id="businessNeed" 
                      name="overall_business_need" 
                      class="form-control textarea"
                      placeholder="Please provide a detailed explanation of the business need for this authority request..."></textarea>
        </div>
    </div>
</div>

<!-- ============================================ -->
<!-- CSS - SCSS -->
<!-- Place this in the "CSS - SCSS" field -->
<!-- ============================================ -->

.widget-container {
    max-width: 900px;
    margin: 0 auto;
    background: white;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    padding: 24px;
}

.widget-header {
    margin-bottom: 24px;
    padding-bottom: 16px;
    border-bottom: 2px solid #e8e8e8;
    
    h2 {
        color: #333;
        font-size: 20px;
        font-weight: 600;
        margin: 0;
    }
}

.main-content {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 30px;
    margin-bottom: 24px;
}

.left-column, .right-column {
    display: flex;
    flex-direction: column;
    gap: 20px;
}

.checkbox-group {
    display: flex;
    align-items: center;
    padding: 12px 16px;
    background: #f8f9fa;
    border: 1px solid #dee2e6;
    border-radius: 6px;
    cursor: pointer;
    transition: all 0.2s ease;
    
    &:hover {
        background: #e9ecef;
        border-color: #adb5bd;
    }
    
    &.active {
        background: #e7f5ff;
        border-color: #339af0;
    }
    
    input[type="checkbox"] {
        margin-right: 10px;
        width: 18px;
        height: 18px;
        cursor: pointer;
    }
    
    label {
        cursor: pointer;
        font-size: 15px;
        color: #333;
        font-weight: 500;
        user-select: none;
        margin: 0;
    }
}

.section {
    display: none;
    padding: 20px;
    background: #f8f9fa;
    border: 1px solid #dee2e6;
    border-radius: 6px;
    
    &.active {
        display: block;
    }
    
    h3 {
        color: #495057;
        font-size: 16px;
        font-weight: 600;
        margin: 0 0 16px 0;
        padding-bottom: 8px;
        border-bottom: 1px solid #dee2e6;
    }
}

.form-group {
    margin-bottom: 16px;
    
    &:last-child {
        margin-bottom: 0;
    }
    
    label {
        display: block;
        margin-bottom: 6px;
        color: #495057;
        font-size: 14px;
        font-weight: 500;
    }
}

.form-control {
    width: 100%;
    padding: 8px 12px;
    border: 1px solid #ced4da;
    border-radius: 4px;
    font-size: 14px;
    transition: border-color 0.15s ease-in-out;
    
    &:focus {
        outline: none;
        border-color: #339af0;
        box-shadow: 0 0 0 2px rgba(51, 154, 240, 0.1);
    }
    
    &.textarea {
        min-height: 120px;
        resize: vertical;
        font-family: inherit;
    }
}

.currency-wrapper {
    position: relative;
    
    .currency-symbol {
        position: absolute;
        left: 12px;
        top: 50%;
        transform: translateY(-50%);
        color: #6c757d;
        font-weight: 500;
        z-index: 1;
    }
    
    .form-control {
        padding-left: 28px;
    }
}

.justification-section {
    display: none;
    padding: 20px;
    background: #fff4e6;
    border: 1px solid #ffd93d;
    border-radius: 6px;
    
    &.active {
        display: block;
    }
    
    h3 {
        color: #495057;
        font-size: 16px;
        font-weight: 600;
        margin: 0 0 12px 0;
    }
}

.info-message {
    background: white;
    padding: 12px;
    border-radius: 4px;
    margin-bottom: 16px;
    font-size: 14px;
    color: #6c757d;
    line-height: 1.5;
    border-left: 3px solid #ffd93d;
}

@media (max-width: 768px) {
    .main-content {
        grid-template-columns: 1fr;
    }
}

<!-- ============================================ -->
<!-- CLIENT CONTROLLER -->
<!-- Place this in the "Client Controller" field -->
<!-- ============================================ -->

api.controller = function($scope, $window) {
    var c = this;
    
    c.$onInit = function() {
        setTimeout(function() {
            initializeWidget();
        }, 500);
    };
    
    function initializeWidget() {
        console.log('=== Initializing Authority Limit Widget ===');
        
        // Get references to elements
        const nonCreditCheckbox = document.getElementById('nonCreditAuth');
        const creditCheckbox = document.getElementById('creditAuth');
        const nonCreditGroup = document.getElementById('nonCreditGroup');
        const creditGroup = document.getElementById('creditGroup');
        const nonCreditSection = document.getElementById('nonCreditSection');
        const creditSection = document.getElementById('creditSection');
        const justificationSection = document.getElementById('justificationSection');
        
        // Initialize widget data
        c.widgetData = {
            non_credit_checked: false,
            credit_checked: false,
            disbursement_ach: '',
            overdraft_external_accounts: '',
            overall_business_need: ''
        };
        
        // Currency formatting functions
        function formatCurrency(value) {
            if (!value) return '';
            
            let numStr = value.toString().replace(/[^\d.]/g, '');
            const parts = numStr.split('.');
            if (parts.length > 2) {
                numStr = parts[0] + '.' + parts.slice(1).join('');
            }
            
            const [integerPart, decimalPart] = numStr.split('.');
            const formattedInteger = integerPart.replace(/\B(?=(\d{3})+(?!\d))/g, ',');
            
            if (decimalPart !== undefined) {
                const limitedDecimal = decimalPart.substring(0, 2);
                return formattedInteger + '.' + limitedDecimal;
            }
            
            return formattedInteger;
        }
        
        function getCurrencyValue(formattedValue) {
            if (!formattedValue) return '';
            return formattedValue.replace(/[^\d.]/g, '');
        }
        
        // Update hidden fields in the record producer
        function updateRecordProducerFields() {
            console.log('Updating RP fields with widget data:', c.widgetData);
            
            // Update the business need field directly
            updateHiddenField('overall_business_need', c.widgetData.overall_business_need);
            
            // Store all widget data as JSON in the hidden field
            updateHiddenField('authority_widget_json', JSON.stringify(c.widgetData));
        }
        
        // Find and update hidden field
        function updateHiddenField(fieldName, value) {
            // Try multiple approaches to find the field
            const selectors = [
                `input[name="${fieldName}"]`,
                `textarea[name="${fieldName}"]`,
                `#${fieldName}`,
                `input[name="IO:${fieldName}"]`,
                `textarea[name="IO:${fieldName}"]`
            ];
            
            let field = null;
            const documents = [document];
            
            // Add parent documents
            try {
                if (window.parent && window.parent.document) {
                    documents.push(window.parent.document);
                }
                if (window.top && window.top.document) {
                    documents.push(window.top.document);
                }
            } catch(e) {}
            
            // Search for field
            for (let doc of documents) {
                for (let selector of selectors) {
                    try {
                        field = doc.querySelector(selector);
                        if (field) break;
                    } catch(e) {}
                }
                if (field) break;
            }
            
            if (field) {
                field.value = value;
                // Trigger events
                ['input', 'change'].forEach(eventType => {
                    const event = new Event(eventType, { bubbles: true });
                    field.dispatchEvent(event);
                });
                console.log('✓ Updated field:', fieldName, '=', value);
            } else {
                console.warn('Could not find field:', fieldName);
            }
        }
        
        // Update widget data
        function updateWidgetData(fieldName, value) {
            console.log('Widget data update:', fieldName, '=', value);
            c.widgetData[fieldName] = value;
            updateRecordProducerFields();
        }
        
        // Handle authority selection
        function handleAuthoritySelection() {
            const nonCreditChecked = nonCreditCheckbox.checked;
            const creditChecked = creditCheckbox.checked;
            
            console.log('Authority selection - Non-Credit:', nonCreditChecked, 'Credit:', creditChecked);
            
            // Update visual states
            nonCreditGroup.classList.toggle('active', nonCreditChecked);
            creditGroup.classList.toggle('active', creditChecked);
            
            // Show/hide sections
            nonCreditSection.classList.toggle('active', nonCreditChecked);
            creditSection.classList.toggle('active', creditChecked);
            justificationSection.classList.toggle('active', nonCreditChecked || creditChecked);
            
            // Update widget data
            updateWidgetData('non_credit_checked', nonCreditChecked);
            updateWidgetData('credit_checked', creditChecked);
        }
        
        // Setup currency field
        function setupCurrencyField(inputId, fieldName) {
            const input = document.getElementById(inputId);
            if (!input) return;
            
            let isUpdating = false;
            
            function handleCurrencyInput(event) {
                if (isUpdating) return;
                isUpdating = true;
                
                const cursorPosition = event.target.selectionStart;
                const oldValue = event.target.value;
                const oldLength = oldValue.length;
                
                const formattedValue = formatCurrency(oldValue);
                event.target.value = formattedValue;
                
                const newLength = formattedValue.length;
                const lengthDiff = newLength - oldLength;
                const newCursorPosition = Math.max(0, cursorPosition + lengthDiff);
                
                setTimeout(() => {
                    event.target.setSelectionRange(newCursorPosition, newCursorPosition);
                }, 0);
                
                const rawValue = getCurrencyValue(formattedValue);
                updateWidgetData(fieldName, rawValue);
                
                isUpdating = false;
            }
            
            input.addEventListener('input', handleCurrencyInput);
            input.addEventListener('paste', function(e) {
                setTimeout(() => handleCurrencyInput(e), 0);
            });
        }
        
        // Setup text area field
        function setupTextAreaField(inputId, fieldName) {
            const input = document.getElementById(inputId);
            if (!input) return;
            
            function handleTextChange(event) {
                updateWidgetData(fieldName, event.target.value);
            }
            
            input.addEventListener('input', handleTextChange);
        }
        
        // Add checkbox event listeners
        if (nonCreditCheckbox) {
            nonCreditCheckbox.addEventListener('change', handleAuthoritySelection);
        }
        
        if (creditCheckbox) {
            creditCheckbox.addEventListener('change', handleAuthoritySelection);
        }
        
        // Make checkbox groups clickable
        if (nonCreditGroup) {
            nonCreditGroup.addEventListener('click', function(e) {
                if (e.target.tagName !== 'INPUT') {
                    nonCreditCheckbox.checked = !nonCreditCheckbox.checked;
                    handleAuthoritySelection();
                }
            });
        }
        
        if (creditGroup) {
            creditGroup.addEventListener('click', function(e) {
                if (e.target.tagName !== 'INPUT') {
                    creditCheckbox.checked = !creditCheckbox.checked;
                    handleAuthoritySelection();
                }
            });
        }
        
        // Setup all fields
        setupCurrencyField('disbursement', 'disbursement_ach');
        setupCurrencyField('overdraft', 'overdraft_external_accounts');
        setupTextAreaField('businessNeed', 'overall_business_need');
        
        console.log('=== Widget initialization complete ===');
    }
};

<!-- ============================================ -->
<!-- SERVER SCRIPT -->
<!-- Place this in the "Server Script" field -->
<!-- ============================================ -->

(function() {
    data.user = gs.getUser().getName();
    data.userId = gs.getUserID();
})();



<!-- ============================================ -->
<!-- RP SCRIPT -->
<!-- ============================================ -->
// Record Producer Script - runs after parent record is created
try {
    gs.info('Authority RP Script - Processing record: ' + current.getUniqueValue());
    
    // Get the JSON data from the hidden field
    var widgetDataJson = producer.authority_widget_json;
    
    if (widgetDataJson) {
        gs.info('Widget data received: ' + widgetDataJson);
        
        // Parse the JSON
        var widgetData = JSON.parse(widgetDataJson);
        var parentId = current.getUniqueValue();
        
        // Create non-credit authority record if checked and has value
        if (widgetData.non_credit_checked === true && widgetData.disbursement_ach) {
            var nonCreditGR = new GlideRecord('x_banun_bunow_si_0_non_credit_authority_limits');
            nonCreditGR.initialize();
            nonCreditGR.setValue('signature_request', parentId);
            nonCreditGR.setValue('disbursement_ach', widgetData.disbursement_ach);
            
            var nonCreditId = nonCreditGR.insert();
            if (nonCreditId) {
                gs.info('Non-credit authority record created: ' + nonCreditId);
            } else {
                gs.info('Failed to create non-credit authority record');
            }
        }
        
        // Create credit authority record if checked and has value
        if (widgetData.credit_checked === true && widgetData.overdraft_external_accounts) {
            var creditGR = new GlideRecord('x_banun_bunow_si_0_credit_authority_limits');
            creditGR.initialize();
            creditGR.setValue('signature_request', parentId);
            creditGR.setValue('overdraft_external_accounts', widgetData.overdraft_external_accounts);
            
            var creditId = creditGR.insert();
            if (creditId) {
                gs.info('Credit authority record created: ' + creditId);
            } else {
                gs.info('Failed to create credit authority record');
            }
        }
        
    } else {
        gs.info('No widget data found in authority_widget_json field');
    }
    
} catch (e) {
    gs.info('Error in Authority RP Script: ' + e.message);
}
