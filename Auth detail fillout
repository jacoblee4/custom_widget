<!-- ============================================ -->
<!-- HTML TEMPLATE -->
<!-- Place this in the "HTML Template" field -->
<!-- ============================================ -->

<div class="widget-container">
    <div class="widget-header">
        <h2>Authority Limit Details</h2>
    </div>
    
    <div class="main-content">
        <div class="left-column">
            <div class="checkbox-group" id="nonCreditGroup">
                <input type="checkbox" id="nonCreditAuth" name="non_credit_authority_check">
                <label for="nonCreditAuth">Non-Credit Authority</label>
            </div>
            
            <div id="nonCreditSection" class="section">
                <h3>Non-Credit Authority Limits</h3>
                <div class="form-group">
                    <label for="disbursement">Disbursement</label>
                    <div class="currency-wrapper">
                        <span class="currency-symbol">$</span>
                        <input type="text" 
                               id="disbursement" 
                               name="disbursement" 
                               class="form-control" 
                               placeholder="0.00">
                    </div>
                </div>
            </div>
        </div>

        <div class="right-column">
            <div class="checkbox-group" id="creditGroup">
                <input type="checkbox" id="creditAuth" name="credit_authority_check">
                <label for="creditAuth">Credit Authority</label>
            </div>
            
            <div id="creditSection" class="section">
                <h3>Credit Authority Limits</h3>
                <div class="form-group">
                    <label for="overdraft">Overdraft</label>
                    <div class="currency-wrapper">
                        <span class="currency-symbol">$</span>
                        <input type="text" 
                               id="overdraft" 
                               name="overdraft" 
                               class="form-control" 
                               placeholder="0.00">
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div id="justificationSection" class="justification-section">
        <h3>Justification</h3>
        <div class="info-message">
            Please complete the following fields to provide justification for this request. If you have attachments, please click attach to the record by going to the attachment section on the far right and look for the paper clip.
        </div>
        <div class="form-group">
            <label for="businessNeed">Overall Business Need</label>
            <textarea id="businessNeed" 
                      name="overall_business_need" 
                      class="form-control textarea"
                      placeholder="Please provide a detailed explanation of the business need for this authority request..."></textarea>
        </div>
    </div>
</div>

<!-- ============================================ -->
<!-- CSS - SCSS -->
<!-- Place this in the "CSS - SCSS" field -->
<!-- ============================================ -->

.widget-container {
    max-width: 900px;
    margin: 0 auto;
    background: white;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    padding: 24px;
}

.widget-header {
    margin-bottom: 24px;
    padding-bottom: 16px;
    border-bottom: 2px solid #e8e8e8;
    
    h2 {
        color: #333;
        font-size: 20px;
        font-weight: 600;
        margin: 0;
    }
}

.main-content {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 30px;
    margin-bottom: 24px;
}

.left-column, .right-column {
    display: flex;
    flex-direction: column;
    gap: 20px;
}

.checkbox-group {
    display: flex;
    align-items: center;
    padding: 12px 16px;
    background: #f8f9fa;
    border: 1px solid #dee2e6;
    border-radius: 6px;
    cursor: pointer;
    transition: all 0.2s ease;
    
    &:hover {
        background: #e9ecef;
        border-color: #adb5bd;
    }
    
    &.active {
        background: #e7f5ff;
        border-color: #339af0;
    }
    
    input[type="checkbox"] {
        margin-right: 10px;
        width: 18px;
        height: 18px;
        cursor: pointer;
    }
    
    label {
        cursor: pointer;
        font-size: 15px;
        color: #333;
        font-weight: 500;
        user-select: none;
        margin: 0;
    }
}

.section {
    display: none;
    padding: 20px;
    background: #f8f9fa;
    border: 1px solid #dee2e6;
    border-radius: 6px;
    
    &.active {
        display: block;
    }
    
    h3 {
        color: #495057;
        font-size: 16px;
        font-weight: 600;
        margin: 0 0 16px 0;
        padding-bottom: 8px;
        border-bottom: 1px solid #dee2e6;
    }
}

.form-group {
    margin-bottom: 16px;
    
    &:last-child {
        margin-bottom: 0;
    }
    
    label {
        display: block;
        margin-bottom: 6px;
        color: #495057;
        font-size: 14px;
        font-weight: 500;
    }
}

.form-control {
    width: 100%;
    padding: 8px 12px;
    border: 1px solid #ced4da;
    border-radius: 4px;
    font-size: 14px;
    transition: border-color 0.15s ease-in-out;
    
    &:focus {
        outline: none;
        border-color: #339af0;
        box-shadow: 0 0 0 2px rgba(51, 154, 240, 0.1);
    }
    
    &.textarea {
        min-height: 120px;
        resize: vertical;
        font-family: inherit;
    }
}

.currency-wrapper {
    position: relative;
    
    .currency-symbol {
        position: absolute;
        left: 12px;
        top: 50%;
        transform: translateY(-50%);
        color: #6c757d;
        font-weight: 500;
    }
    
    .form-control {
        padding-left: 28px;
    }
}

.justification-section {
    display: none;
    padding: 20px;
    background: #fff4e6;
    border: 1px solid #ffd93d;
    border-radius: 6px;
    
    &.active {
        display: block;
    }
    
    h3 {
        color: #495057;
        font-size: 16px;
        font-weight: 600;
        margin: 0 0 12px 0;
    }
}

.info-message {
    background: white;
    padding: 12px;
    border-radius: 4px;
    margin-bottom: 16px;
    font-size: 14px;
    color: #6c757d;
    line-height: 1.5;
    border-left: 3px solid #ffd93d;
}

@media (max-width: 768px) {
    .main-content {
        grid-template-columns: 1fr;
    }
}

<!-- ============================================ -->
<!-- CLIENT CONTROLLER -->
<!-- Place this in the "Client Controller" field -->
<!-- ============================================ -->

function($scope, $window) {
    var c = this;
    
    // Initialize after DOM is ready
    c.$onInit = function() {
        setTimeout(function() {
            initializeWidget();
        }, 500);
    };
    
    function initializeWidget() {
        console.log('=== Initializing Authority Limit Widget ===');
        
        // Get references to elements
        const nonCreditCheckbox = document.getElementById('nonCreditAuth');
        const creditCheckbox = document.getElementById('creditAuth');
        const nonCreditGroup = document.getElementById('nonCreditGroup');
        const creditGroup = document.getElementById('creditGroup');
        const nonCreditSection = document.getElementById('nonCreditSection');
        const creditSection = document.getElementById('creditSection');
        const justificationSection = document.getElementById('justificationSection');
        
        // Format number with commas
        function addCommas(value) {
            // Remove existing commas and non-numeric chars except decimal
            value = value.toString().replace(/[^0-9.]/g, '');
            
            // Split into integer and decimal parts
            const parts = value.split('.');
            
            // Add commas to integer part
            parts[0] = parts[0].replace(/\B(?=(\d{3})+(?!\d))/g, ',');
            
            // Limit decimal to 2 places
            if (parts[1]) {
                parts[1] = parts[1].substring(0, 2);
            }
            
            return parts.join('.');
        }
        
        // Get value without commas
        function removeCommas(value) {
            return value.toString().replace(/,/g, '');
        }
        
        // Setup currency field
        function setupCurrencyField(fieldId, targetFieldName) {
            const field = document.getElementById(fieldId);
            if (!field) {
                console.log('Field not found:', fieldId);
                return;
            }
            
            console.log('Setting up currency field:', fieldId, 'â†’', targetFieldName);
            
            // Format on input
            field.addEventListener('input', function(e) {
                const cursorPos = e.target.selectionStart;
                const oldLength = e.target.value.length;
                
                // Format with commas
                const formatted = addCommas(e.target.value);
                e.target.value = formatted;
                
                // Adjust cursor position
                const newLength = formatted.length;
                const diff = newLength - oldLength;
                e.target.setSelectionRange(cursorPos + diff, cursorPos + diff);
                
                // Get raw value without commas
                const rawValue = removeCommas(formatted);
                
                console.log(fieldId + ' - Formatted:', formatted, 'Raw:', rawValue);
                
                // Update the record producer field
                updateRecordProducerField(targetFieldName, rawValue);
            });
            
            // Also update on blur
            field.addEventListener('blur', function(e) {
                const rawValue = removeCommas(e.target.value);
                updateRecordProducerField(targetFieldName, rawValue);
            });
        }
        
        // Setup text area field
        function setupTextAreaField(fieldId, targetFieldName) {
            const field = document.getElementById(fieldId);
            if (!field) {
                console.log('Field not found:', fieldId);
                return;
            }
            
            console.log('Setting up text area field:', fieldId, 'â†’', targetFieldName);
            
            field.addEventListener('input', function(e) {
                console.log(fieldId + ' updated:', e.target.value);
                updateRecordProducerField(targetFieldName, e.target.value);
            });
            
            field.addEventListener('blur', function(e) {
                updateRecordProducerField(targetFieldName, e.target.value);
            });
        }
        
        // Setup the currency fields
        setupCurrencyField('disbursement', 'disbursement');
        setupCurrencyField('overdraft', 'overdraft');
        setupTextAreaField('businessNeed', 'overall_business_need');
        
        // Handle checkbox changes
        function handleAuthoritySelection() {
            const nonCreditChecked = nonCreditCheckbox.checked;
            const creditChecked = creditCheckbox.checked;
            
            console.log('Checkbox state - Non-Credit:', nonCreditChecked, 'Credit:', creditChecked);
            
            // Update visual states
            nonCreditGroup.classList.toggle('active', nonCreditChecked);
            creditGroup.classList.toggle('active', creditChecked);
            
            // Update record producer checkbox fields
            updateRecordProducerField('non_credit_authority_check', nonCreditChecked);
            updateRecordProducerField('credit_authority_check', creditChecked);
            
            // Show/hide sections
            nonCreditSection.classList.toggle('active', nonCreditChecked);
            creditSection.classList.toggle('active', creditChecked);
            
            // Show justification if either is checked
            justificationSection.classList.toggle('active', nonCreditChecked || creditChecked);
        }
        
        // Add checkbox event listeners
        if (nonCreditCheckbox) {
            nonCreditCheckbox.addEventListener('change', handleAuthoritySelection);
        }
        
        if (creditCheckbox) {
            creditCheckbox.addEventListener('change', handleAuthoritySelection);
        }
        
        // Make entire checkbox group clickable
        if (nonCreditGroup) {
            nonCreditGroup.addEventListener('click', function(e) {
                if (e.target.tagName !== 'INPUT') {
                    nonCreditCheckbox.checked = !nonCreditCheckbox.checked;
                    handleAuthoritySelection();
                }
            });
        }
        
        if (creditGroup) {
            creditGroup.addEventListener('click', function(e) {
                if (e.target.tagName !== 'INPUT') {
                    creditCheckbox.checked = !creditCheckbox.checked;
                    handleAuthoritySelection();
                }
            });
        }
        
        // Function to update ServiceNow record producer fields
        function updateRecordProducerField(fieldName, value) {
            console.log('>>> Updating field:', fieldName, 'with value:', value);
            
            try {
                // Method 1: Direct g_form access
                if ($window.g_form) {
                    $window.g_form.setValue(fieldName, value);
                    console.log('âœ“ Updated via $window.g_form');
                    return;
                }
                
                // Method 2: Parent window g_form
                if ($window.parent && $window.parent.g_form) {
                    $window.parent.g_form.setValue(fieldName, value);
                    console.log('âœ“ Updated via parent.g_form');
                    return;
                }
                
                // Method 3: Top window g_form
                if ($window.top && $window.top.g_form) {
                    $window.top.g_form.setValue(fieldName, value);
                    console.log('âœ“ Updated via top.g_form');
                    return;
                }
                
                // Method 4: Search for the field in the DOM
                let field = null;
                
                // Search in current document
                field = document.querySelector('input[name="' + fieldName + '"], textarea[name="' + fieldName + '"]');
                
                // Search in parent document
                if (!field && $window.parent) {
                    try {
                        field = $window.parent.document.querySelector('input[name="' + fieldName + '"], textarea[name="' + fieldName + '"]');
                    } catch(e) {}
                }
                
                // Search in top document
                if (!field && $window.top) {
                    try {
                        field = $window.top.document.querySelector('input[name="' + fieldName + '"], textarea[name="' + fieldName + '"]');
                    } catch(e) {}
                }
                
                // Search for field with id
                if (!field) {
                    field = document.getElementById(fieldName);
                    if (!field && $window.parent) {
                        try {
                            field = $window.parent.document.getElementById(fieldName);
                        } catch(e) {}
                    }
                    if (!field && $window.top) {
                        try {
                            field = $window.top.document.getElementById(fieldName);
                        } catch(e) {}
                    }
                }
                
                if (field) {
                    if (field.type === 'checkbox') {
                        field.checked = (value === true || value === 'true');
                    } else {
                        field.value = value;
                    }
                    
                    // Fire events to notify ServiceNow
                    const inputEvent = new Event('input', { bubbles: true });
                    const changeEvent = new Event('change', { bubbles: true });
                    field.dispatchEvent(inputEvent);
                    field.dispatchEvent(changeEvent);
                    
                    // Also try Angular digest if available
                    if ($window.angular) {
                        try {
                            const scope = $window.angular.element(field).scope();
                            if (scope) {
                                scope.$apply();
                            }
                        } catch(e) {}
                    }
                    
                    console.log('âœ“ Updated via DOM manipulation');
                    return;
                }
                
                console.log('âœ— Could not find field or g_form. Field name:', fieldName);
                
            } catch(error) {
                console.error('Error updating field:', error);
            }
        }
        
        // Try to get initial values if available
        try {
            let gformRef = $window.g_form || ($window.parent && $window.parent.g_form) || ($window.top && $window.top.g_form);
            
            if (gformRef) {
                console.log('Found g_form, loading initial values...');
                
                // Get existing values from record producer
                const nonCreditValue = gformRef.getValue('non_credit_authority_check');
                const creditValue = gformRef.getValue('credit_authority_check');
                const disbursementValue = gformRef.getValue('disbursement');
                const overdraftValue = gformRef.getValue('overdraft');
                const businessNeedValue = gformRef.getValue('overall_business_need');
                
                // Set checkbox states
                if (nonCreditValue === 'true' || nonCreditValue === true) {
                    nonCreditCheckbox.checked = true;
                }
                if (creditValue === 'true' || creditValue === true) {
                    creditCheckbox.checked = true;
                }
                
                // Set field values with formatting
                if (disbursementValue) {
                    document.getElementById('disbursement').value = addCommas(disbursementValue);
                }
                if (overdraftValue) {
                    document.getElementById('overdraft').value = addCommas(overdraftValue);
                }
                if (businessNeedValue) {
                    document.getElementById('businessNeed').value = businessNeedValue;
                }
                
                // Update display
                handleAuthoritySelection();
            }
        } catch(e) {
            console.log('Could not load initial values:', e);
        }
        
        console.log('=== Widget initialization complete ===');
    }
}

<!-- ============================================ -->
<!-- SERVER SCRIPT -->
<!-- Place this in the "Server Script" field -->
<!-- ============================================ -->

(function() {
    // Initialize widget data
    data.user = gs.getUser().getName();
    data.userId = gs.getUserID();
    
    // You can add any server-side data fetching or validation here
    // For example, getting user's department or role-based defaults
    
    // Optional: Get any default values from system properties
    // data.defaultDisbursementLimit = gs.getProperty('authority.default.disbursement', '');
    // data.defaultOverdraftLimit = gs.getProperty('authority.default.overdraft', '');
})();
