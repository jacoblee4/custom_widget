<!-- ============================================ -->
<!-- HTML TEMPLATE -->
<!-- Place this in the "HTML Template" field -->
<!-- ============================================ -->

<div class="widget-container">
    <div class="widget-header">
        <h2>Authority Limit Details</h2>
    </div>
    
    <div class="main-content">
        <div class="left-column">
            <div class="checkbox-group" id="nonCreditGroup">
                <input type="checkbox" id="nonCreditAuth" name="non_credit_authority_check">
                <label for="nonCreditAuth">Non-Credit Authority</label>
            </div>
            
            <div id="nonCreditSection" class="section">
                <h3>Non-Credit Authority Limits</h3>
                <div class="form-group">
                    <label for="disbursement">Disbursement</label>
                    <div class="currency-wrapper">
                        <span class="currency-symbol">$</span>
                        <input type="text" 
                               id="disbursement" 
                               name="disbursement" 
                               class="form-control currency-input" 
                               placeholder="0.00">
                    </div>
                </div>
            </div>
        </div>

        <div class="right-column">
            <div class="checkbox-group" id="creditGroup">
                <input type="checkbox" id="creditAuth" name="credit_authority_check">
                <label for="creditAuth">Credit Authority</label>
            </div>
            
            <div id="creditSection" class="section">
                <h3>Credit Authority Limits</h3>
                <div class="form-group">
                    <label for="overdraft">Overdraft</label>
                    <div class="currency-wrapper">
                        <span class="currency-symbol">$</span>
                        <input type="text" 
                               id="overdraft" 
                               name="overdraft" 
                               class="form-control currency-input" 
                               placeholder="0.00">
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div id="justificationSection" class="justification-section">
        <h3>Justification</h3>
        <div class="info-message">
            Please complete the following fields to provide justification for this request. If you have attachments, please click attach to the record by going to the attachment section on the far right and look for the paper clip.
        </div>
        <div class="form-group">
            <label for="businessNeed">Overall Business Need</label>
            <textarea id="businessNeed" 
                      name="overall_business_need" 
                      class="form-control textarea"
                      placeholder="Please provide a detailed explanation of the business need for this authority request..."></textarea>
        </div>
    </div>
</div>

<!-- ============================================ -->
<!-- CSS - SCSS -->
<!-- Place this in the "CSS - SCSS" field -->
<!-- ============================================ -->

.widget-container {
    max-width: 900px;
    margin: 0 auto;
    background: white;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    padding: 24px;
}

.widget-header {
    margin-bottom: 24px;
    padding-bottom: 16px;
    border-bottom: 2px solid #e8e8e8;
    
    h2 {
        color: #333;
        font-size: 20px;
        font-weight: 600;
        margin: 0;
    }
}

.main-content {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 30px;
    margin-bottom: 24px;
}

.left-column, .right-column {
    display: flex;
    flex-direction: column;
    gap: 20px;
}

.checkbox-group {
    display: flex;
    align-items: center;
    padding: 12px 16px;
    background: #f8f9fa;
    border: 1px solid #dee2e6;
    border-radius: 6px;
    cursor: pointer;
    transition: all 0.2s ease;
    
    &:hover {
        background: #e9ecef;
        border-color: #adb5bd;
    }
    
    &.active {
        background: #e7f5ff;
        border-color: #339af0;
    }
    
    input[type="checkbox"] {
        margin-right: 10px;
        width: 18px;
        height: 18px;
        cursor: pointer;
    }
    
    label {
        cursor: pointer;
        font-size: 15px;
        color: #333;
        font-weight: 500;
        user-select: none;
        margin: 0;
    }
}

.section {
    display: none;
    padding: 20px;
    background: #f8f9fa;
    border: 1px solid #dee2e6;
    border-radius: 6px;
    
    &.active {
        display: block;
    }
    
    h3 {
        color: #495057;
        font-size: 16px;
        font-weight: 600;
        margin: 0 0 16px 0;
        padding-bottom: 8px;
        border-bottom: 1px solid #dee2e6;
    }
}

.form-group {
    margin-bottom: 16px;
    
    &:last-child {
        margin-bottom: 0;
    }
    
    label {
        display: block;
        margin-bottom: 6px;
        color: #495057;
        font-size: 14px;
        font-weight: 500;
    }
}

.form-control {
    width: 100%;
    padding: 8px 12px;
    border: 1px solid #ced4da;
    border-radius: 4px;
    font-size: 14px;
    transition: border-color 0.15s ease-in-out;
    
    &:focus {
        outline: none;
        border-color: #339af0;
        box-shadow: 0 0 0 2px rgba(51, 154, 240, 0.1);
    }
    
    &.textarea {
        min-height: 120px;
        resize: vertical;
        font-family: inherit;
    }
}

.currency-wrapper {
    position: relative;
    
    .currency-symbol {
        position: absolute;
        left: 12px;
        top: 50%;
        transform: translateY(-50%);
        color: #6c757d;
        font-weight: 500;
        z-index: 1;
    }
    
    .form-control {
        padding-left: 28px;
    }
}

.justification-section {
    display: none;
    padding: 20px;
    background: #fff4e6;
    border: 1px solid #ffd93d;
    border-radius: 6px;
    
    &.active {
        display: block;
    }
    
    h3 {
        color: #495057;
        font-size: 16px;
        font-weight: 600;
        margin: 0 0 12px 0;
    }
}

.info-message {
    background: white;
    padding: 12px;
    border-radius: 4px;
    margin-bottom: 16px;
    font-size: 14px;
    color: #6c757d;
    line-height: 1.5;
    border-left: 3px solid #ffd93d;
}

@media (max-width: 768px) {
    .main-content {
        grid-template-columns: 1fr;
    }
}

<!-- ============================================ -->
<!-- CLIENT CONTROLLER -->
<!-- Place this in the "Client Controller" field -->
<!-- ============================================ -->

api.controller = function($scope, $window) {
    var c = this;
    
    c.$onInit = function() {
        setTimeout(function() {
            initializeWidget();
        }, 1000); // Increased timeout to ensure form is fully loaded
    };
    
    function initializeWidget() {
        console.log('=== Initializing Authority Limit Widget ===');
        
        // Get references to elements
        const nonCreditCheckbox = document.getElementById('nonCreditAuth');
        const creditCheckbox = document.getElementById('creditAuth');
        const nonCreditGroup = document.getElementById('nonCreditGroup');
        const creditGroup = document.getElementById('creditGroup');
        const nonCreditSection = document.getElementById('nonCreditSection');
        const creditSection = document.getElementById('creditSection');
        const justificationSection = document.getElementById('justificationSection');
        
        // Currency formatting functions
        function formatCurrency(value) {
            if (!value) return '';
            
            // Remove all non-numeric characters except decimal point
            let numStr = value.toString().replace(/[^\d.]/g, '');
            
            // Handle multiple decimal points - keep only the first one
            const parts = numStr.split('.');
            if (parts.length > 2) {
                numStr = parts[0] + '.' + parts.slice(1).join('');
            }
            
            // Split into integer and decimal parts
            const [integerPart, decimalPart] = numStr.split('.');
            
            // Add commas to integer part
            const formattedInteger = integerPart.replace(/\B(?=(\d{3})+(?!\d))/g, ',');
            
            // Combine with decimal part (limit to 2 decimal places)
            if (decimalPart !== undefined) {
                const limitedDecimal = decimalPart.substring(0, 2);
                return formattedInteger + '.' + limitedDecimal;
            }
            
            return formattedInteger;
        }
        
        function getCurrencyValue(formattedValue) {
            if (!formattedValue) return '';
            return formattedValue.replace(/[^\d.]/g, '');
        }
        
        // Main function to update ServiceNow fields
        function updateServiceNowField(fieldName, value) {
            console.log('Attempting to update field:', fieldName, 'with value:', value);
            
            // Try multiple approaches to find and update the field
            let updated = false;
            
            // Approach 1: Use g_form if available
            const gform = getGForm();
            if (gform) {
                try {
                    gform.setValue(fieldName, value);
                    console.log('âœ“ Updated', fieldName, 'via g_form');
                    updated = true;
                } catch (e) {
                    console.log('Failed to update via g_form:', e);
                }
            }
            
            // Approach 2: Direct DOM manipulation as backup
            if (!updated) {
                const field = findFieldInDOM(fieldName);
                if (field) {
                    try {
                        if (field.type === 'checkbox') {
                            field.checked = (value === true || value === 'true' || value === '1');
                        } else {
                            field.value = value;
                        }
                        
                        // Trigger events
                        ['input', 'change', 'blur'].forEach(eventType => {
                            const event = new Event(eventType, { bubbles: true, cancelable: true });
                            field.dispatchEvent(event);
                        });
                        
                        console.log('âœ“ Updated', fieldName, 'via DOM');
                        updated = true;
                    } catch (e) {
                        console.log('Failed DOM update:', e);
                    }
                }
            }
            
            if (!updated) {
                console.warn('Could not update field:', fieldName);
            }
            
            return updated;
        }
        
        // Helper function to get g_form from various contexts
        function getGForm() {
            // Try current window first
            if (typeof g_form !== 'undefined') {
                return g_form;
            }
            
            // Try parent window
            try {
                if ($window.parent && $window.parent.g_form) {
                    return $window.parent.g_form;
                }
            } catch (e) {}
            
            // Try top window
            try {
                if ($window.top && $window.top.g_form) {
                    return $window.top.g_form;
                }
            } catch (e) {}
            
            return null;
        }
        
        // Helper function to find field in DOM
        function findFieldInDOM(fieldName) {
            // Common selectors for ServiceNow fields
            const selectors = [
                `[name="${fieldName}"]`,
                `#${fieldName}`,
                `[id$="${fieldName}"]`,
                `[data-name="${fieldName}"]`,
                `.form-field[data-name="${fieldName}"] input`,
                `.form-field[data-name="${fieldName}"] textarea`
            ];
            
            // Search in current document
            for (let selector of selectors) {
                const field = document.querySelector(selector);
                if (field) return field;
            }
            
            // Search in parent document
            try {
                if ($window.parent && $window.parent.document) {
                    for (let selector of selectors) {
                        const field = $window.parent.document.querySelector(selector);
                        if (field) return field;
                    }
                }
            } catch (e) {}
            
            // Search in top document
            try {
                if ($window.top && $window.top.document) {
                    for (let selector of selectors) {
                        const field = $window.top.document.querySelector(selector);
                        if (field) return field;
                    }
                }
            } catch (e) {}
            
            return null;
        }
        
        // Setup currency input field
        function setupCurrencyField(inputId, fieldName) {
            const input = document.getElementById(inputId);
            if (!input) {
                console.warn('Currency input not found:', inputId);
                return;
            }
            
            let isUpdating = false;
            
            function handleCurrencyInput(event) {
                if (isUpdating) return;
                isUpdating = true;
                
                const cursorPosition = event.target.selectionStart;
                const oldValue = event.target.value;
                const oldLength = oldValue.length;
                
                // Format the value
                const formattedValue = formatCurrency(oldValue);
                event.target.value = formattedValue;
                
                // Adjust cursor position
                const newLength = formattedValue.length;
                const lengthDiff = newLength - oldLength;
                const newCursorPosition = Math.max(0, cursorPosition + lengthDiff);
                
                setTimeout(() => {
                    event.target.setSelectionRange(newCursorPosition, newCursorPosition);
                }, 0);
                
                // Update ServiceNow field with raw numeric value
                const rawValue = getCurrencyValue(formattedValue);
                updateServiceNowField(fieldName, rawValue);
                
                isUpdating = false;
            }
            
            input.addEventListener('input', handleCurrencyInput);
            input.addEventListener('paste', function(e) {
                setTimeout(() => handleCurrencyInput(e), 0);
            });
        }
        
        // Setup text area field
        function setupTextAreaField(inputId, fieldName) {
            const input = document.getElementById(inputId);
            if (!input) {
                console.warn('Text area not found:', inputId);
                return;
            }
            
            function handleTextChange(event) {
                updateServiceNowField(fieldName, event.target.value);
            }
            
            input.addEventListener('input', handleTextChange);
            input.addEventListener('change', handleTextChange);
        }
        
        // Setup checkbox field
        function setupCheckboxField(inputId, fieldName) {
            const input = document.getElementById(inputId);
            if (!input) {
                console.warn('Checkbox not found:', inputId);
                return;
            }
            
            function handleCheckboxChange(event) {
                updateServiceNowField(fieldName, event.target.checked);
            }
            
            input.addEventListener('change', handleCheckboxChange);
        }
        
        // Handle authority selection
        function handleAuthoritySelection() {
            const nonCreditChecked = nonCreditCheckbox.checked;
            const creditChecked = creditCheckbox.checked;
            
            console.log('Authority selection - Non-Credit:', nonCreditChecked, 'Credit:', creditChecked);
            
            // Update visual states
            nonCreditGroup.classList.toggle('active', nonCreditChecked);
            creditGroup.classList.toggle('active', creditChecked);
            
            // Show/hide sections
            nonCreditSection.classList.toggle('active', nonCreditChecked);
            creditSection.classList.toggle('active', creditChecked);
            justificationSection.classList.toggle('active', nonCreditChecked || creditChecked);
            
            // Update ServiceNow fields
            updateServiceNowField('non_credit_authority_check', nonCreditChecked);
            updateServiceNowField('credit_authority_check', creditChecked);
        }
        
        // Setup all event listeners
        if (nonCreditCheckbox) {
            nonCreditCheckbox.addEventListener('change', handleAuthoritySelection);
            setupCheckboxField('nonCreditAuth', 'non_credit_authority_check');
        }
        
        if (creditCheckbox) {
            creditCheckbox.addEventListener('change', handleAuthoritySelection);
            setupCheckboxField('creditAuth', 'credit_authority_check');
        }
        
        // Make checkbox groups clickable
        if (nonCreditGroup) {
            nonCreditGroup.addEventListener('click', function(e) {
                if (e.target.tagName !== 'INPUT') {
                    nonCreditCheckbox.checked = !nonCreditCheckbox.checked;
                    handleAuthoritySelection();
                }
            });
        }
        
        if (creditGroup) {
            creditGroup.addEventListener('click', function(e) {
                if (e.target.tagName !== 'INPUT') {
                    creditCheckbox.checked = !creditCheckbox.checked;
                    handleAuthoritySelection();
                }
            });
        }
        
        // Setup currency and text fields
        setupCurrencyField('disbursement', 'disbursement');
        setupCurrencyField('overdraft', 'overdraft');
        setupTextAreaField('businessNeed', 'overall_business_need');
        
        // Load initial values from ServiceNow
        setTimeout(function() {
            const gform = getGForm();
            if (gform) {
                try {
                    // Load checkbox values
                    const nonCreditValue = gform.getValue('non_credit_authority_check');
                    const creditValue = gform.getValue('credit_authority_check');
                    
                    if (nonCreditValue === 'true' || nonCreditValue === true || nonCreditValue === '1') {
                        nonCreditCheckbox.checked = true;
                    }
                    if (creditValue === 'true' || creditValue === true || creditValue === '1') {
                        creditCheckbox.checked = true;
                    }
                    
                    // Load currency values
                    const disbursementValue = gform.getValue('disbursement');
                    const overdraftValue = gform.getValue('overdraft');
                    const businessNeedValue = gform.getValue('overall_business_need');
                    
                    if (disbursementValue) {
                        document.getElementById('disbursement').value = formatCurrency(disbursementValue);
                    }
                    if (overdraftValue) {
                        document.getElementById('overdraft').value = formatCurrency(overdraftValue);
                    }
                    if (businessNeedValue) {
                        document.getElementById('businessNeed').value = businessNeedValue;
                    }
                    
                    // Update display
                    handleAuthoritySelection();
                    
                    console.log('Initial values loaded successfully');
                } catch (e) {
                    console.log('Could not load initial values:', e);
                }
            }
        }, 500);
        
        console.log('=== Widget initialization complete ===');
    }
}

<!-- ============================================ -->
<!-- SERVER SCRIPT -->
<!-- Place this in the "Server Script" field -->
<!-- ============================================ -->

(function() {
    // Initialize widget data
    data.user = gs.getUser().getName();
    data.userId = gs.getUserID();
    
    // Add any additional server-side initialization here
    // For example:
    // data.defaultDisbursementLimit = gs.getProperty('authority.default.disbursement', '0');
    // data.defaultOverdraftLimit = gs.getProperty('authority.default.overdraft', '0');
})();
