<!-- ============================================ -->
<!-- HTML TEMPLATE -->
<!-- Place this in the "HTML Template" field -->
<!-- ============================================ -->

<div class="widget-container">
    <div class="widget-header">
        <h2>Authority Limit Details</h2>
    </div>
    
    <div class="main-content">
        <div class="left-column">
            <div class="checkbox-group" id="nonCreditGroup">
                <input type="checkbox" id="nonCreditAuth" name="non_credit_authority_check">
                <label for="nonCreditAuth">Non-Credit Authority</label>
            </div>
            
            <div id="nonCreditSection" class="section">
                <h3>Non-Credit Authority Limits</h3>
                <div class="form-group">
                    <label for="disbursement">Disbursement</label>
                    <div class="currency-wrapper">
                        <span class="currency-symbol">$</span>
                        <input type="text" 
                               id="disbursement" 
                               name="disbursement" 
                               class="form-control currency-input" 
                               placeholder="0.00">
                    </div>
                </div>
            </div>
        </div>

        <div class="right-column">
            <div class="checkbox-group" id="creditGroup">
                <input type="checkbox" id="creditAuth" name="credit_authority_check">
                <label for="creditAuth">Credit Authority</label>
            </div>
            
            <div id="creditSection" class="section">
                <h3>Credit Authority Limits</h3>
                <div class="form-group">
                    <label for="overdraft">Overdraft</label>
                    <div class="currency-wrapper">
                        <span class="currency-symbol">$</span>
                        <input type="text" 
                               id="overdraft" 
                               name="overdraft" 
                               class="form-control currency-input" 
                               placeholder="0.00">
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div id="justificationSection" class="justification-section">
        <h3>Justification</h3>
        <div class="info-message">
            Please complete the following fields to provide justification for this request. If you have attachments, please click attach to the record by going to the attachment section on the far right and look for the paper clip.
        </div>
        <div class="form-group">
            <label for="businessNeed">Overall Business Need</label>
            <textarea id="businessNeed" 
                      name="overall_business_need" 
                      class="form-control textarea"
                      placeholder="Please provide a detailed explanation of the business need for this authority request..."></textarea>
        </div>
    </div>
</div>

<!-- ============================================ -->
<!-- CSS - SCSS -->
<!-- Place this in the "CSS - SCSS" field -->
<!-- ============================================ -->

.widget-container {
    max-width: 900px;
    margin: 0 auto;
    background: white;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    padding: 24px;
}

.widget-header {
    margin-bottom: 24px;
    padding-bottom: 16px;
    border-bottom: 2px solid #e8e8e8;
    
    h2 {
        color: #333;
        font-size: 20px;
        font-weight: 600;
        margin: 0;
    }
}

.main-content {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 30px;
    margin-bottom: 24px;
}

.left-column, .right-column {
    display: flex;
    flex-direction: column;
    gap: 20px;
}

.checkbox-group {
    display: flex;
    align-items: center;
    padding: 12px 16px;
    background: #f8f9fa;
    border: 1px solid #dee2e6;
    border-radius: 6px;
    cursor: pointer;
    transition: all 0.2s ease;
    
    &:hover {
        background: #e9ecef;
        border-color: #adb5bd;
    }
    
    &.active {
        background: #e7f5ff;
        border-color: #339af0;
    }
    
    input[type="checkbox"] {
        margin-right: 10px;
        width: 18px;
        height: 18px;
        cursor: pointer;
    }
    
    label {
        cursor: pointer;
        font-size: 15px;
        color: #333;
        font-weight: 500;
        user-select: none;
        margin: 0;
    }
}

.section {
    display: none;
    padding: 20px;
    background: #f8f9fa;
    border: 1px solid #dee2e6;
    border-radius: 6px;
    
    &.active {
        display: block;
    }
    
    h3 {
        color: #495057;
        font-size: 16px;
        font-weight: 600;
        margin: 0 0 16px 0;
        padding-bottom: 8px;
        border-bottom: 1px solid #dee2e6;
    }
}

.form-group {
    margin-bottom: 16px;
    
    &:last-child {
        margin-bottom: 0;
    }
    
    label {
        display: block;
        margin-bottom: 6px;
        color: #495057;
        font-size: 14px;
        font-weight: 500;
    }
}

.form-control {
    width: 100%;
    padding: 8px 12px;
    border: 1px solid #ced4da;
    border-radius: 4px;
    font-size: 14px;
    transition: border-color 0.15s ease-in-out;
    
    &:focus {
        outline: none;
        border-color: #339af0;
        box-shadow: 0 0 0 2px rgba(51, 154, 240, 0.1);
    }
    
    &.textarea {
        min-height: 120px;
        resize: vertical;
        font-family: inherit;
    }
}

.currency-wrapper {
    position: relative;
    
    .currency-symbol {
        position: absolute;
        left: 12px;
        top: 50%;
        transform: translateY(-50%);
        color: #6c757d;
        font-weight: 500;
        z-index: 1;
    }
    
    .form-control {
        padding-left: 28px;
    }
}

.justification-section {
    display: none;
    padding: 20px;
    background: #fff4e6;
    border: 1px solid #ffd93d;
    border-radius: 6px;
    
    &.active {
        display: block;
    }
    
    h3 {
        color: #495057;
        font-size: 16px;
        font-weight: 600;
        margin: 0 0 12px 0;
    }
}

.info-message {
    background: white;
    padding: 12px;
    border-radius: 4px;
    margin-bottom: 16px;
    font-size: 14px;
    color: #6c757d;
    line-height: 1.5;
    border-left: 3px solid #ffd93d;
}

@media (max-width: 768px) {
    .main-content {
        grid-template-columns: 1fr;
    }
}

<!-- ============================================ -->
<!-- CLIENT CONTROLLER -->
<!-- Place this in the "Client Controller" field -->
<!-- ============================================ -->

api.controller = function($scope, $window) {
    var c = this;
    
    c.$onInit = function() {
        setTimeout(function() {
            initializeWidget();
        }, 1000);
    };
    
    function initializeWidget() {
        console.log('=== Initializing Authority Limit Widget ===');
        
        // Get references to elements
        const nonCreditCheckbox = document.getElementById('nonCreditAuth');
        const creditCheckbox = document.getElementById('creditAuth');
        const nonCreditGroup = document.getElementById('nonCreditGroup');
        const creditGroup = document.getElementById('creditGroup');
        const nonCreditSection = document.getElementById('nonCreditSection');
        const creditSection = document.getElementById('creditSection');
        const justificationSection = document.getElementById('justificationSection');
        
        // Initialize scope data if not exists
        if (!$scope.data) {
            $scope.data = {};
        }
        
        // Currency formatting functions
        function formatCurrency(value) {
            if (!value) return '';
            
            let numStr = value.toString().replace(/[^\d.]/g, '');
            const parts = numStr.split('.');
            if (parts.length > 2) {
                numStr = parts[0] + '.' + parts.slice(1).join('');
            }
            
            const [integerPart, decimalPart] = numStr.split('.');
            const formattedInteger = integerPart.replace(/\B(?=(\d{3})+(?!\d))/g, ',');
            
            if (decimalPart !== undefined) {
                const limitedDecimal = decimalPart.substring(0, 2);
                return formattedInteger + '.' + limitedDecimal;
            }
            
            return formattedInteger;
        }
        
        function getCurrencyValue(formattedValue) {
            if (!formattedValue) return '';
            return formattedValue.replace(/[^\d.]/g, '');
        }
        
        // Service Portal field update function
        function updateServiceNowField(fieldName, value) {
            console.log('Updating ServiceNow field:', fieldName, '=', value);
            
            try {
                // Update the scope data
                $scope.data[fieldName] = value;
                
                // Force Angular to detect the change
                if (!$scope.$$phase) {
                    $scope.$apply();
                }
                
                console.log('✓ Updated field via $scope.data:', fieldName, '=', value);
                
                // Also trigger server update for immediate persistence
                if ($scope.server && $scope.server.update) {
                    $scope.server.update();
                    console.log('✓ Triggered server update');
                }
                
            } catch(e) {
                console.error('Failed to update field:', fieldName, e);
            }
        }
        
        // Handle authority selection
        function handleAuthoritySelection() {
            const nonCreditChecked = nonCreditCheckbox.checked;
            const creditChecked = creditCheckbox.checked;
            
            console.log('Authority selection - Non-Credit:', nonCreditChecked, 'Credit:', creditChecked);
            
            // Update visual states
            nonCreditGroup.classList.toggle('active', nonCreditChecked);
            creditGroup.classList.toggle('active', creditChecked);
            
            // Show/hide sections
            nonCreditSection.classList.toggle('active', nonCreditChecked);
            creditSection.classList.toggle('active', creditChecked);
            justificationSection.classList.toggle('active', nonCreditChecked || creditChecked);
            
            // Update ServiceNow fields
            updateServiceNowField('non_credit_authority_check', nonCreditChecked);
            updateServiceNowField('credit_authority_check', creditChecked);
        }
        
        // Setup currency field
        function setupCurrencyField(inputId, fieldName) {
            const input = document.getElementById(inputId);
            if (!input) return;
            
            let isUpdating = false;
            
            function handleCurrencyInput(event) {
                if (isUpdating) return;
                isUpdating = true;
                
                const cursorPosition = event.target.selectionStart;
                const oldValue = event.target.value;
                const oldLength = oldValue.length;
                
                const formattedValue = formatCurrency(oldValue);
                event.target.value = formattedValue;
                
                const newLength = formattedValue.length;
                const lengthDiff = newLength - oldLength;
                const newCursorPosition = Math.max(0, cursorPosition + lengthDiff);
                
                setTimeout(() => {
                    event.target.setSelectionRange(newCursorPosition, newCursorPosition);
                }, 0);
                
                const rawValue = getCurrencyValue(formattedValue);
                updateServiceNowField(fieldName, rawValue);
                
                isUpdating = false;
            }
            
            input.addEventListener('input', handleCurrencyInput);
            input.addEventListener('paste', function(e) {
                setTimeout(() => handleCurrencyInput(e), 0);
            });
        }
        
        // Setup text area field
        function setupTextAreaField(inputId, fieldName) {
            const input = document.getElementById(inputId);
            if (!input) return;
            
            function handleTextChange(event) {
                updateServiceNowField(fieldName, event.target.value);
            }
            
            input.addEventListener('input', handleTextChange);
        }
        
        // Add checkbox event listeners
        if (nonCreditCheckbox) {
            nonCreditCheckbox.addEventListener('change', handleAuthoritySelection);
        }
        
        if (creditCheckbox) {
            creditCheckbox.addEventListener('change', handleAuthoritySelection);
        }
        
        // Make checkbox groups clickable
        if (nonCreditGroup) {
            nonCreditGroup.addEventListener('click', function(e) {
                if (e.target.tagName !== 'INPUT') {
                    nonCreditCheckbox.checked = !nonCreditCheckbox.checked;
                    handleAuthoritySelection();
                }
            });
        }
        
        if (creditGroup) {
            creditGroup.addEventListener('click', function(e) {
                if (e.target.tagName !== 'INPUT') {
                    creditCheckbox.checked = !creditCheckbox.checked;
                    handleAuthoritySelection();
                }
            });
        }
        
        // Setup all fields
        setupCurrencyField('disbursement', 'disbursement');
        setupCurrencyField('overdraft', 'overdraft');
        setupTextAreaField('businessNeed', 'overall_business_need');
        
        // Load initial values from scope data
        setTimeout(function() {
            try {
                if ($scope.data.non_credit_authority_check === 'true' || $scope.data.non_credit_authority_check === true) {
                    nonCreditCheckbox.checked = true;
                }
                if ($scope.data.credit_authority_check === 'true' || $scope.data.credit_authority_check === true) {
                    creditCheckbox.checked = true;
                }
                
                if ($scope.data.disbursement) {
                    document.getElementById('disbursement').value = formatCurrency($scope.data.disbursement);
                }
                if ($scope.data.overdraft) {
                    document.getElementById('overdraft').value = formatCurrency($scope.data.overdraft);
                }
                if ($scope.data.overall_business_need) {
                    document.getElementById('businessNeed').value = $scope.data.overall_business_need;
                }
                
                handleAuthoritySelection();
                console.log('✓ Initial values loaded from $scope.data');
            } catch(e) {
                console.log('Could not load initial values:', e);
            }
        }, 500);
        
        console.log('=== Widget initialization complete ===');
        console.log('$scope.data:', $scope.data);
    }
}

<!-- ============================================ -->
<!-- SERVER SCRIPT -->
<!-- Place this in the "Server Script" field -->
<!-- ============================================ -->

(function() {
    // Initialize widget data
    data.user = gs.getUser().getName();
    data.userId = gs.getUserID();
    
    // Add any additional server-side initialization here
    // For example:
    // data.defaultDisbursementLimit = gs.getProperty('authority.default.disbursement', '0');
    // data.defaultOverdraftLimit = gs.getProperty('authority.default.overdraft', '0');
})();
