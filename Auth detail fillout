<!-- ============================================ -->
<!-- HTML TEMPLATE -->
<!-- Place this in the "HTML Template" field -->
<!-- ============================================ -->

<div class="widget-container">
    <div class="widget-header">
        <h2>Authority Limit Details</h2>
    </div>
    
    <div class="main-content">
        <div class="left-column">
            <div class="checkbox-group" id="nonCreditGroup">
                <input type="checkbox" id="nonCreditAuth" name="non_credit_authority_check">
                <label for="nonCreditAuth">Non-Credit Authority</label>
            </div>
            
            <div id="nonCreditSection" class="section">
                <h3>Non-Credit Authority Limits</h3>
                <div class="form-group">
                    <label for="disbursement">Disbursement</label>
                    <div class="currency-wrapper">
                        <span class="currency-symbol">$</span>
                        <input type="text" 
                               id="disbursement" 
                               name="disbursement" 
                               class="form-control" 
                               placeholder="0.00">
                    </div>
                </div>
            </div>
        </div>

        <div class="right-column">
            <div class="checkbox-group" id="creditGroup">
                <input type="checkbox" id="creditAuth" name="credit_authority_check">
                <label for="creditAuth">Credit Authority</label>
            </div>
            
            <div id="creditSection" class="section">
                <h3>Credit Authority Limits</h3>
                <div class="form-group">
                    <label for="overdraft">Overdraft</label>
                    <div class="currency-wrapper">
                        <span class="currency-symbol">$</span>
                        <input type="text" 
                               id="overdraft" 
                               name="overdraft" 
                               class="form-control" 
                               placeholder="0.00">
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div id="justificationSection" class="justification-section">
        <h3>Justification</h3>
        <div class="info-message">
            Please complete the following fields to provide justification for this request. If you have attachments, please click attach to the record by going to the attachment section on the far right and look for the paper clip.
        </div>
        <div class="form-group">
            <label for="businessNeed">Overall Business Need</label>
            <textarea id="businessNeed" 
                      name="overall_business_need" 
                      class="form-control textarea"
                      placeholder="Please provide a detailed explanation of the business need for this authority request..."></textarea>
        </div>
    </div>
</div>

<!-- ============================================ -->
<!-- CSS - SCSS -->
<!-- Place this in the "CSS - SCSS" field -->
<!-- ============================================ -->

.widget-container {
    max-width: 900px;
    margin: 0 auto;
    background: white;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    padding: 24px;
}

.widget-header {
    margin-bottom: 24px;
    padding-bottom: 16px;
    border-bottom: 2px solid #e8e8e8;
    
    h2 {
        color: #333;
        font-size: 20px;
        font-weight: 600;
        margin: 0;
    }
}

.main-content {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 30px;
    margin-bottom: 24px;
}

.left-column, .right-column {
    display: flex;
    flex-direction: column;
    gap: 20px;
}

.checkbox-group {
    display: flex;
    align-items: center;
    padding: 12px 16px;
    background: #f8f9fa;
    border: 1px solid #dee2e6;
    border-radius: 6px;
    cursor: pointer;
    transition: all 0.2s ease;
    
    &:hover {
        background: #e9ecef;
        border-color: #adb5bd;
    }
    
    &.active {
        background: #e7f5ff;
        border-color: #339af0;
    }
    
    input[type="checkbox"] {
        margin-right: 10px;
        width: 18px;
        height: 18px;
        cursor: pointer;
    }
    
    label {
        cursor: pointer;
        font-size: 15px;
        color: #333;
        font-weight: 500;
        user-select: none;
        margin: 0;
    }
}

.section {
    display: none;
    padding: 20px;
    background: #f8f9fa;
    border: 1px solid #dee2e6;
    border-radius: 6px;
    
    &.active {
        display: block;
    }
    
    h3 {
        color: #495057;
        font-size: 16px;
        font-weight: 600;
        margin: 0 0 16px 0;
        padding-bottom: 8px;
        border-bottom: 1px solid #dee2e6;
    }
}

.form-group {
    margin-bottom: 16px;
    
    &:last-child {
        margin-bottom: 0;
    }
    
    label {
        display: block;
        margin-bottom: 6px;
        color: #495057;
        font-size: 14px;
        font-weight: 500;
    }
}

.form-control {
    width: 100%;
    padding: 8px 12px;
    border: 1px solid #ced4da;
    border-radius: 4px;
    font-size: 14px;
    transition: border-color 0.15s ease-in-out;
    
    &:focus {
        outline: none;
        border-color: #339af0;
        box-shadow: 0 0 0 2px rgba(51, 154, 240, 0.1);
    }
    
    &.textarea {
        min-height: 120px;
        resize: vertical;
        font-family: inherit;
    }
}

.currency-wrapper {
    position: relative;
    
    .currency-symbol {
        position: absolute;
        left: 12px;
        top: 50%;
        transform: translateY(-50%);
        color: #6c757d;
        font-weight: 500;
    }
    
    .form-control {
        padding-left: 28px;
    }
}

.justification-section {
    display: none;
    padding: 20px;
    background: #fff4e6;
    border: 1px solid #ffd93d;
    border-radius: 6px;
    
    &.active {
        display: block;
    }
    
    h3 {
        color: #495057;
        font-size: 16px;
        font-weight: 600;
        margin: 0 0 12px 0;
    }
}

.info-message {
    background: white;
    padding: 12px;
    border-radius: 4px;
    margin-bottom: 16px;
    font-size: 14px;
    color: #6c757d;
    line-height: 1.5;
    border-left: 3px solid #ffd93d;
}

@media (max-width: 768px) {
    .main-content {
        grid-template-columns: 1fr;
    }
}

<!-- ============================================ -->
<!-- CLIENT CONTROLLER -->
<!-- Place this in the "Client Controller" field -->
<!-- ============================================ -->

api.controller = function($scope, $window) {
    var c = this;

    c.$onInit = function() {
        setTimeout(initWidget, 500);
    };

    function initWidget() {
        console.log("=== Authority Limit Widget Init ===");

        // Elements
        const disbursement = document.getElementById("disbursement");
        const overdraft = document.getElementById("overdraft");
        const businessNeed = document.getElementById("businessNeed");
        const nonCreditCheckbox = document.getElementById("nonCreditAuth");
        const creditCheckbox = document.getElementById("creditAuth");
        const nonCreditGroup = document.getElementById("nonCreditGroup");
        const creditGroup = document.getElementById("creditGroup");
        const nonCreditSection = document.getElementById("nonCreditSection");
        const creditSection = document.getElementById("creditSection");
        const justificationSection = document.getElementById("justificationSection");

        // === Currency Formatting ===
        function formatCurrencyInput(field, targetName) {
            if (!field) return;

            field.addEventListener("input", function(e) {
                let raw = e.target.value.replace(/,/g, "");
                updateRecordProducerField(targetName, raw);
            });

            field.addEventListener("blur", function(e) {
                let raw = e.target.value.replace(/,/g, "");
                if (raw && !isNaN(raw)) {
                    e.target.value = Number(raw).toLocaleString();
                    updateRecordProducerField(targetName, raw);
                }
            });
        }

        // === Textarea sync ===
        function setupTextArea(field, targetName) {
            if (!field) return;
            field.addEventListener("input", function(e) {
                updateRecordProducerField(targetName, e.target.value);
            });
        }

        // === Checkboxes sync + section toggle ===
        function handleAuthoritySelection() {
            const nonCreditChecked = nonCreditCheckbox.checked;
            const creditChecked = creditCheckbox.checked;

            nonCreditGroup.classList.toggle("active", nonCreditChecked);
            creditGroup.classList.toggle("active", creditChecked);

            nonCreditSection.classList.toggle("active", nonCreditChecked);
            creditSection.classList.toggle("active", creditChecked);
            justificationSection.classList.toggle("active", nonCreditChecked || creditChecked);

            updateRecordProducerField("non_credit_authority_check", nonCreditChecked);
            updateRecordProducerField("credit_authority_check", creditChecked);
        }

        if (nonCreditCheckbox) nonCreditCheckbox.addEventListener("change", handleAuthoritySelection);
        if (creditCheckbox) creditCheckbox.addEventListener("change", handleAuthoritySelection);

        if (nonCreditGroup) nonCreditGroup.addEventListener("click", e => {
            if (e.target.tagName !== "INPUT") {
                nonCreditCheckbox.checked = !nonCreditCheckbox.checked;
                handleAuthoritySelection();
            }
        });
        if (creditGroup) creditGroup.addEventListener("click", e => {
            if (e.target.tagName !== "INPUT") {
                creditCheckbox.checked = !creditCheckbox.checked;
                handleAuthoritySelection();
            }
        });

        // Hook up fields
        formatCurrencyInput(disbursement, "disbursement");
        formatCurrencyInput(overdraft, "overdraft");
        setupTextArea(businessNeed, "overall_business_need");

        // === Util: push into hidden RP variable ===
        function updateRecordProducerField(fieldName, value) {
            console.log(">>> Updating RP field:", fieldName, value);

            try {
                let gformRef =
                    $window.g_form ||
                    ($window.parent && $window.parent.g_form) ||
                    ($window.top && $window.top.g_form);

                // 1. Try updating via g_form
                if (gformRef && typeof gformRef.setValue === "function") {
                    try {
                        gformRef.setValue(fieldName, value);
                    } catch (e) {
                        console.warn("g_form.setValue failed for " + fieldName, e);
                    }
                }

                // 2. Always update DOM field too
                let field = document.querySelector(
                    `input[name="${fieldName}"], textarea[name="${fieldName}"]`
                );
                if (field) {
                    field.value = value;
                    field.dispatchEvent(new Event("input", { bubbles: true }));
                    field.dispatchEvent(new Event("change", { bubbles: true }));
                } else {
                    console.warn("No input found for " + fieldName);
                }
            } catch (err) {
                console.error("updateRecordProducerField failed:", err);
            }
        }

        // === Preload existing RP values ===
        try {
            let gformRef =
                $window.g_form ||
                ($window.parent && $window.parent.g_form) ||
                ($window.top && $window.top.g_form);

            if (gformRef) {
                let d = gformRef.getValue("disbursement");
                if (d) disbursement.value = Number(d).toLocaleString();
                let o = gformRef.getValue("overdraft");
                if (o) overdraft.value = Number(o).toLocaleString();

                businessNeed.value = gformRef.getValue("overall_business_need") || "";

                if (gformRef.getValue("non_credit_authority_check") === "true")
                    nonCreditCheckbox.checked = true;
                if (gformRef.getValue("credit_authority_check") === "true")
                    creditCheckbox.checked = true;

                handleAuthoritySelection();
            }
        } catch (e) {
            console.warn("Could not preload RP values:", e);
        }
    }
};





<!-- ============================================ -->
<!-- SERVER SCRIPT -->
<!-- Place this in the "Server Script" field -->
<!-- ============================================ -->

(function() {
    // Initialize widget data
    data.user = gs.getUser().getName();
    data.userId = gs.getUserID();
    
    // You can add any server-side data fetching or validation here
    // For example, getting user's department or role-based defaults
    
    // Optional: Get any default values from system properties
    // data.defaultDisbursementLimit = gs.getProperty('authority.default.disbursement', '');
    // data.defaultOverdraftLimit = gs.getProperty('authority.default.overdraft', '');
})();
