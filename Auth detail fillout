<!-- ============================================ -->
<!-- HTML TEMPLATE -->
<!-- Place this in the "HTML Template" field -->
<!-- ============================================ -->

<div class="widget-container">
    <div class="widget-header">
        <h2>Authority Limit Details</h2>
    </div>
    
    <div class="main-content">
        <div class="left-column">
            <div class="checkbox-group" id="nonCreditGroup">
                <input type="checkbox" id="nonCreditAuth" name="non_credit_authority_check">
                <label for="nonCreditAuth">Non-Credit Authority</label>
            </div>
            
            <div id="nonCreditSection" class="section">
                <h3>Non-Credit Authority Limits</h3>
                <div class="form-group">
                    <label for="disbursement">Disbursement</label>
                    <div class="currency-wrapper">
                        <span class="currency-symbol">$</span>
                        <input type="text" 
                               id="disbursement" 
                               name="disbursement" 
                               class="form-control currency-input" 
                               placeholder="0.00">
                    </div>
                </div>
            </div>
        </div>

        <div class="right-column">
            <div class="checkbox-group" id="creditGroup">
                <input type="checkbox" id="creditAuth" name="credit_authority_check">
                <label for="creditAuth">Credit Authority</label>
            </div>
            
            <div id="creditSection" class="section">
                <h3>Credit Authority Limits</h3>
                <div class="form-group">
                    <label for="overdraft">Overdraft</label>
                    <div class="currency-wrapper">
                        <span class="currency-symbol">$</span>
                        <input type="text" 
                               id="overdraft" 
                               name="overdraft" 
                               class="form-control currency-input" 
                               placeholder="0.00">
                    </div>
                </div>
            </div>
        </div>
    </div>

    <div id="justificationSection" class="justification-section">
        <h3>Justification</h3>
        <div class="info-message">
            Please complete the following fields to provide justification for this request. If you have attachments, please click attach to the record by going to the attachment section on the far right and look for the paper clip.
        </div>
        <div class="form-group">
            <label for="businessNeed">Overall Business Need</label>
            <textarea id="businessNeed" 
                      name="overall_business_need" 
                      class="form-control textarea"
                      placeholder="Please provide a detailed explanation of the business need for this authority request..."></textarea>
        </div>
    </div>
</div>

<!-- ============================================ -->
<!-- CSS - SCSS -->
<!-- Place this in the "CSS - SCSS" field -->
<!-- ============================================ -->

.widget-container {
    max-width: 900px;
    margin: 0 auto;
    background: white;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    padding: 24px;
}

.widget-header {
    margin-bottom: 24px;
    padding-bottom: 16px;
    border-bottom: 2px solid #e8e8e8;
    
    h2 {
        color: #333;
        font-size: 20px;
        font-weight: 600;
        margin: 0;
    }
}

.main-content {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 30px;
    margin-bottom: 24px;
}

.left-column, .right-column {
    display: flex;
    flex-direction: column;
    gap: 20px;
}

.checkbox-group {
    display: flex;
    align-items: center;
    padding: 12px 16px;
    background: #f8f9fa;
    border: 1px solid #dee2e6;
    border-radius: 6px;
    cursor: pointer;
    transition: all 0.2s ease;
    
    &:hover {
        background: #e9ecef;
        border-color: #adb5bd;
    }
    
    &.active {
        background: #e7f5ff;
        border-color: #339af0;
    }
    
    input[type="checkbox"] {
        margin-right: 10px;
        width: 18px;
        height: 18px;
        cursor: pointer;
    }
    
    label {
        cursor: pointer;
        font-size: 15px;
        color: #333;
        font-weight: 500;
        user-select: none;
        margin: 0;
    }
}

.section {
    display: none;
    padding: 20px;
    background: #f8f9fa;
    border: 1px solid #dee2e6;
    border-radius: 6px;
    
    &.active {
        display: block;
    }
    
    h3 {
        color: #495057;
        font-size: 16px;
        font-weight: 600;
        margin: 0 0 16px 0;
        padding-bottom: 8px;
        border-bottom: 1px solid #dee2e6;
    }
}

.form-group {
    margin-bottom: 16px;
    
    &:last-child {
        margin-bottom: 0;
    }
    
    label {
        display: block;
        margin-bottom: 6px;
        color: #495057;
        font-size: 14px;
        font-weight: 500;
    }
}

.form-control {
    width: 100%;
    padding: 8px 12px;
    border: 1px solid #ced4da;
    border-radius: 4px;
    font-size: 14px;
    transition: border-color 0.15s ease-in-out;
    
    &:focus {
        outline: none;
        border-color: #339af0;
        box-shadow: 0 0 0 2px rgba(51, 154, 240, 0.1);
    }
    
    &.textarea {
        min-height: 120px;
        resize: vertical;
        font-family: inherit;
    }
}

.currency-wrapper {
    position: relative;
    
    .currency-symbol {
        position: absolute;
        left: 12px;
        top: 50%;
        transform: translateY(-50%);
        color: #6c757d;
        font-weight: 500;
        z-index: 1;
    }
    
    .form-control {
        padding-left: 28px;
    }
}

.justification-section {
    display: none;
    padding: 20px;
    background: #fff4e6;
    border: 1px solid #ffd93d;
    border-radius: 6px;
    
    &.active {
        display: block;
    }
    
    h3 {
        color: #495057;
        font-size: 16px;
        font-weight: 600;
        margin: 0 0 12px 0;
    }
}

.info-message {
    background: white;
    padding: 12px;
    border-radius: 4px;
    margin-bottom: 16px;
    font-size: 14px;
    color: #6c757d;
    line-height: 1.5;
    border-left: 3px solid #ffd93d;
}

@media (max-width: 768px) {
    .main-content {
        grid-template-columns: 1fr;
    }
}

<!-- ============================================ -->
<!-- CLIENT CONTROLLER -->
<!-- Place this in the "Client Controller" field -->
<!-- ============================================ -->

api.controller = function($scope, $window) {
    var c = this;
    
    c.$onInit = function() {
        setTimeout(function() {
            initializeWidget();
        }, 500);
    };
    
    function initializeWidget() {
        console.log('=== Initializing Authority Limit Widget ===');
        
        // Get references to elements
        const nonCreditCheckbox = document.getElementById('nonCreditAuth');
        const creditCheckbox = document.getElementById('creditAuth');
        const nonCreditGroup = document.getElementById('nonCreditGroup');
        const creditGroup = document.getElementById('creditGroup');
        const nonCreditSection = document.getElementById('nonCreditSection');
        const creditSection = document.getElementById('creditSection');
        const justificationSection = document.getElementById('justificationSection');
        
        // Initialize data structure
        if (!$scope.data.authority_widget_data) {
            $scope.data.authority_widget_data = {
                non_credit_checked: false,
                credit_checked: false,
                disbursement_ach: '',
                overdraft_external_accounts: '',
                overall_business_need: ''
            };
        }
        
        // Currency formatting functions
        function formatCurrency(value) {
            if (!value) return '';
            
            let numStr = value.toString().replace(/[^\d.]/g, '');
            const parts = numStr.split('.');
            if (parts.length > 2) {
                numStr = parts[0] + '.' + parts.slice(1).join('');
            }
            
            const [integerPart, decimalPart] = numStr.split('.');
            const formattedInteger = integerPart.replace(/\B(?=(\d{3})+(?!\d))/g, ',');
            
            if (decimalPart !== undefined) {
                const limitedDecimal = decimalPart.substring(0, 2);
                return formattedInteger + '.' + limitedDecimal;
            }
            
            return formattedInteger;
        }
        
        function getCurrencyValue(formattedValue) {
            if (!formattedValue) return '';
            return formattedValue.replace(/[^\d.]/g, '');
        }
        
        // Update widget data and trigger server call
        function updateWidgetData(fieldName, value) {
            console.log('Updating widget data:', fieldName, '=', value);
            
            $scope.data.authority_widget_data[fieldName] = value;
            
            // Trigger server update to process the data
            $scope.server.update().then(function() {
                console.log('âœ“ Server update completed for:', fieldName);
            }).catch(function(error) {
                console.error('Server update failed:', error);
            });
        }
        
        // Handle authority selection
        function handleAuthoritySelection() {
            const nonCreditChecked = nonCreditCheckbox.checked;
            const creditChecked = creditCheckbox.checked;
            
            console.log('Authority selection - Non-Credit:', nonCreditChecked, 'Credit:', creditChecked);
            
            // Update visual states
            nonCreditGroup.classList.toggle('active', nonCreditChecked);
            creditGroup.classList.toggle('active', creditChecked);
            
            // Show/hide sections
            nonCreditSection.classList.toggle('active', nonCreditChecked);
            creditSection.classList.toggle('active', creditChecked);
            justificationSection.classList.toggle('active', nonCreditChecked || creditChecked);
            
            // Update widget data
            updateWidgetData('non_credit_checked', nonCreditChecked);
            updateWidgetData('credit_checked', creditChecked);
        }
        
        // Setup currency field
        function setupCurrencyField(inputId, fieldName) {
            const input = document.getElementById(inputId);
            if (!input) return;
            
            let isUpdating = false;
            
            function handleCurrencyInput(event) {
                if (isUpdating) return;
                isUpdating = true;
                
                const cursorPosition = event.target.selectionStart;
                const oldValue = event.target.value;
                const oldLength = oldValue.length;
                
                const formattedValue = formatCurrency(oldValue);
                event.target.value = formattedValue;
                
                const newLength = formattedValue.length;
                const lengthDiff = newLength - oldLength;
                const newCursorPosition = Math.max(0, cursorPosition + lengthDiff);
                
                setTimeout(() => {
                    event.target.setSelectionRange(newCursorPosition, newCursorPosition);
                }, 0);
                
                const rawValue = getCurrencyValue(formattedValue);
                updateWidgetData(fieldName, rawValue);
                
                isUpdating = false;
            }
            
            input.addEventListener('input', handleCurrencyInput);
            input.addEventListener('paste', function(e) {
                setTimeout(() => handleCurrencyInput(e), 0);
            });
        }
        
        // Setup text area field
        function setupTextAreaField(inputId, fieldName) {
            const input = document.getElementById(inputId);
            if (!input) return;
            
            function handleTextChange(event) {
                updateWidgetData(fieldName, event.target.value);
            }
            
            input.addEventListener('input', handleTextChange);
        }
        
        // Add checkbox event listeners
        if (nonCreditCheckbox) {
            nonCreditCheckbox.addEventListener('change', handleAuthoritySelection);
        }
        
        if (creditCheckbox) {
            creditCheckbox.addEventListener('change', handleAuthoritySelection);
        }
        
        // Make checkbox groups clickable
        if (nonCreditGroup) {
            nonCreditGroup.addEventListener('click', function(e) {
                if (e.target.tagName !== 'INPUT') {
                    nonCreditCheckbox.checked = !nonCreditCheckbox.checked;
                    handleAuthoritySelection();
                }
            });
        }
        
        if (creditGroup) {
            creditGroup.addEventListener('click', function(e) {
                if (e.target.tagName !== 'INPUT') {
                    creditCheckbox.checked = !creditCheckbox.checked;
                    handleAuthoritySelection();
                }
            });
        }
        
        // Setup all fields
        setupCurrencyField('disbursement', 'disbursement_ach');
        setupCurrencyField('overdraft', 'overdraft_external_accounts');
        setupTextAreaField('businessNeed', 'overall_business_need');
        
        console.log('=== Widget initialization complete ===');
    }
};

<!-- ============================================ -->
<!-- SERVER SCRIPT -->
<!-- Place this in the "Server Script" field -->
<!-- ============================================ -->

(function() {
    // Initialize widget data
    data.user = gs.getUser().getName();
    data.userId = gs.getUserID();
    
    // Log when server script runs
    gs.log('Authority Widget Server Script - Input received: ' + JSON.stringify(input));
    
    // Check if we have authority widget data to process
    if (input && input.authority_widget_data) {
        var widgetData = input.authority_widget_data;
        
        gs.log('Processing authority widget data: ' + JSON.stringify(widgetData));
        
        // Set the overall_business_need on the parent record (this will be handled by the RP)
        if (widgetData.overall_business_need) {
            // The RP will handle creating the parent record, but we need to ensure this field gets set
            data.overall_business_need = widgetData.overall_business_need;
        }
        
        // Store the widget data for use in the record producer's completion script
        data.authority_widget_data = widgetData;
    }
    
    // This function will be called by the record producer after it creates the parent record
    if (typeof processAuthorityWidgetData === 'undefined') {
        global.processAuthorityWidgetData = function(parentRecordId, widgetData) {
            gs.log('Processing authority widget data for parent record: ' + parentRecordId);
            
            try {
                // Create non-credit authority record if checked and has value
                if (widgetData.non_credit_checked === true && widgetData.disbursement_ach) {
                    var nonCreditGR = new GlideRecord('x_banun_bunow_si_0_non_credit_authority_limits');
                    nonCreditGR.initialize();
                    nonCreditGR.setValue('signature_request', parentRecordId); // Link to parent
                    nonCreditGR.setValue('disbursement_ach', widgetData.disbursement_ach);
                    
                    var nonCreditId = nonCreditGR.insert();
                    if (nonCreditId) {
                        gs.log('Non-credit authority record created: ' + nonCreditId);
                    } else {
                        gs.log('Failed to create non-credit authority record');
                    }
                }
                
                // Create credit authority record if checked and has value
                if (widgetData.credit_checked === true && widgetData.overdraft_external_accounts) {
                    var creditGR = new GlideRecord('x_banun_bunow_si_0_credit_authority_limits');
                    creditGR.initialize();
                    creditGR.setValue('signature_request', parentRecordId); // Link to parent
                    creditGR.setValue('overdraft_external_accounts', widgetData.overdraft_external_accounts);
                    
                    var creditId = creditGR.insert();
                    if (creditId) {
                        gs.log('Credit authority record created: ' + creditId);
                    } else {
                        gs.log('Failed to create credit authority record');
                    }
                }
                
                return true;
            } catch (e) {
                gs.log('Error in processAuthorityWidgetData: ' + e.message);
                return false;
            }
        };
    }
    
})();



<!-- ============================================ -->
<!-- RP SCRIPT -->
<!-- ============================================ -->
// Record Producer completion script
// This runs after the parent record is created

// Check if we have authority widget data to process
if (producer.authority_widget_data) {
    // Get the sys_id of the record that was just created
    var parentRecordId = current.getUniqueValue(); // 'current' is the parent record that was just created
    
    gs.log('Record Producer created parent record: ' + parentRecordId);
    
    // Process the authority widget data to create child records
    if (typeof global.processAuthorityWidgetData === 'function') {
        global.processAuthorityWidgetData(parentRecordId, producer.authority_widget_data);
    }
}
