//       Server script

(function() {
    // Existing code...
    
    // Add handler for fetching existing limits
    if (input && input.action === 'getExistingLimits' && input.job_code) {
        var limitsGr = new GlideRecord('x_banun_bunow_si_0_authority_limits');
        limitsGr.addQuery('job_code', input.job_code);
        limitsGr.addQuery('active', true);
        limitsGr.orderByDesc('sys_created_on');
        limitsGr.setLimit(1);
        limitsGr.query();
        
        data.limits = [];
        if (limitsGr.next()) {
            var limit = {};
            var fields = [
                'disbursement_ach', 'disbursement_wire_transfer_external', 'disbursement_wire_transfer_internal',
                'disbursement_official_checks_external', 'disbursement_official_checks_internal',
                'check_cashing_on_us', 'check_cashing_not_on_us', 'remote_deposit',
                'treasury_solutions_company_wire_limits', 'fx_wire_limits',
                'overdraft_external_accounts', 'overdraft_internal_accounts',
                'unavailable_funds_external_accounts', 'unavailable_funds_internal_accounts'
            ];
            
            fields.forEach(function(field) {
                limit[field] = limitsGr.getValue(field) || '';
            });
            
            data.limits.push(limit);
        }
    }
})();





//  client controller

// Add these new variables at the top of initializeWidget()
function initializeWidget() {
    // Start monitoring request type
    c.setupRequestTypeMonitoring();
    
    // Add this new variable to track original values
    c.originalAuthorityData = {}; // Stores the original values for comparison

    // ... existing element references ...

    // Widget data model - stores all form state
    c.authorityData = {
        // ... existing properties ...
    };

    // Add new function to fetch and populate existing limits
    c.fetchAndPopulateExistingLimits = function() {
        var requestType = c.getRequestType();
        var jobCode = '';
        
        // Only auto-populate for change requests
        if (requestType !== 'change_to_existing_authority') {
            return;
        }
        
        // Get job code value
        try {
            if (typeof g_form !== 'undefined' && g_form.getValue) {
                jobCode = g_form.getValue('job_code');
            }
            if (!jobCode && window.parent && window.parent.g_form) {
                jobCode = window.parent.g_form.getValue('job_code');
            }
        } catch(e) {}
        
        if (!jobCode) return;
        
        // Make server call to get existing limits
        c.server.get({
            action: 'getExistingLimits',
            job_code: jobCode
        }).then(function(response) {
            if (response.data.limits && response.data.limits.length > 0) {
                var limits = response.data.limits[0];
                
                // Store original values for comparison
                c.originalAuthorityData = angular.copy(limits);
                
                // Determine if we have non-credit values
                var hasNonCreditValues = false;
                var hasCreditValues = false;
                
                // Check for any non-credit values
                if (limits.disbursement_ach || limits.disbursement_wire_transfer_external || 
                    limits.disbursement_wire_transfer_internal || limits.disbursement_official_checks_external ||
                    limits.disbursement_official_checks_internal || limits.check_cashing_on_us || 
                    limits.check_cashing_not_on_us || limits.remote_deposit || 
                    limits.treasury_solutions_company_wire_limits || limits.fx_wire_limits) {
                    hasNonCreditValues = true;
                }
                
                // Check for any credit values  
                if (limits.overdraft_external_accounts || limits.overdraft_internal_accounts ||
                    limits.unavailable_funds_external_accounts || limits.unavailable_funds_internal_accounts) {
                    hasCreditValues = true;
                }
                
                // Auto-check authority type checkboxes
                if (hasNonCreditValues) {
                    nonCreditCheckbox.checked = true;
                    nonCreditGroup.classList.add('active');
                    nonCreditSection.classList.add('active');
                    c.authorityData.non_credit_checked = true;
                }
                
                if (hasCreditValues) {
                    creditCheckbox.checked = true;
                    creditGroup.classList.add('active');
                    creditSection.classList.add('active');
                    c.authorityData.credit_checked = true;
                }
                
                // Populate non-credit fields
                if (hasNonCreditValues) {
                    // Handle disbursement fields - complex logic
                    var disbursementAmount = '';
                    
                    // Determine disbursement amount (they should all be the same if set)
                    if (limits.disbursement_ach) disbursementAmount = limits.disbursement_ach;
                    else if (limits.disbursement_wire_transfer_external || limits.disbursement_wire_transfer_internal) {
                        disbursementAmount = limits.disbursement_wire_transfer_external || limits.disbursement_wire_transfer_internal;
                    }
                    else if (limits.disbursement_official_checks_external || limits.disbursement_official_checks_internal) {
                        disbursementAmount = limits.disbursement_official_checks_external || limits.disbursement_official_checks_internal;
                    }
                    
                    if (disbursementAmount) {
                        document.getElementById('disbursement').value = formatCurrency(disbursementAmount);
                        c.authorityData.disbursement = disbursementAmount;
                    }
                    
                    // Check ACH if it has value
                    if (limits.disbursement_ach) {
                        document.getElementById('achCheck').checked = true;
                        c.authorityData.ach_checked = true;
                    }
                    
                    // Handle Wire Transfer
                    if (limits.disbursement_wire_transfer_external || limits.disbursement_wire_transfer_internal) {
                        document.getElementById('wireTransferCheck').checked = true;
                        c.authorityData.wire_transfer_checked = true;
                        document.getElementById('wireInternalOnlyContainer').style.display = 'block';
                        
                        // Check internal only if external is not set or is 0
                        if (!limits.disbursement_wire_transfer_external || limits.disbursement_wire_transfer_external === '0') {
                            document.getElementById('wireInternalOnly').checked = true;
                            c.authorityData.wire_internal_only = true;
                        }
                    }
                    
                    // Handle Official Checks
                    if (limits.disbursement_official_checks_external || limits.disbursement_official_checks_internal) {
                        document.getElementById('officialChecksCheck').checked = true;
                        c.authorityData.official_checks_checked = true;
                        document.getElementById('checksInternalOnlyContainer').style.display = 'block';
                        
                        // Check internal only if external is not set or is 0
                        if (!limits.disbursement_official_checks_external || limits.disbursement_official_checks_external === '0') {
                            document.getElementById('checksInternalOnly').checked = true;
                            c.authorityData.checks_internal_only = true;
                        }
                    }
                    
                    // Populate other non-credit fields
                    if (limits.check_cashing_on_us) {
                        document.getElementById('checkCashingOnUs').value = formatCurrency(limits.check_cashing_on_us);
                        c.authorityData.check_cashing_on_us = limits.check_cashing_on_us;
                    }
                    if (limits.check_cashing_not_on_us) {
                        document.getElementById('checkCashingNotOnUs').value = formatCurrency(limits.check_cashing_not_on_us);
                        c.authorityData.check_cashing_not_on_us = limits.check_cashing_not_on_us;
                    }
                    if (limits.remote_deposit) {
                        document.getElementById('remoteDeposit').value = formatCurrency(limits.remote_deposit);
                        c.authorityData.remote_deposit = limits.remote_deposit;
                    }
                    if (limits.treasury_solutions_company_wire_limits) {
                        document.getElementById('treasurySolutions').value = formatCurrency(limits.treasury_solutions_company_wire_limits);
                        c.authorityData.treasury_solutions_company_wire_limits = limits.treasury_solutions_company_wire_limits;
                    }
                    if (limits.fx_wire_limits) {
                        document.getElementById('fxWireLimits').value = formatCurrency(limits.fx_wire_limits);
                        c.authorityData.fx_wire_limits = limits.fx_wire_limits;
                    }
                }
                
                // Populate credit fields
                if (hasCreditValues) {
                    if (limits.overdraft_internal_accounts || limits.overdraft_external_accounts) {
                        var overdraftAmount = limits.overdraft_internal_accounts || limits.overdraft_external_accounts;
                        document.getElementById('overdraft').value = formatCurrency(overdraftAmount);
                        c.authorityData.overdraft = overdraftAmount;
                        
                        // Check internal only if external is not set
                        if (!limits.overdraft_external_accounts || limits.overdraft_external_accounts === '0') {
                            document.getElementById('overdraftInternalOnly').checked = true;
                            c.authorityData.overdraft_internal_only = true;
                        }
                    }
                    
                    if (limits.unavailable_funds_internal_accounts || limits.unavailable_funds_external_accounts) {
                        var unavailableAmount = limits.unavailable_funds_internal_accounts || limits.unavailable_funds_external_accounts;
                        document.getElementById('unavailableFunds').value = formatCurrency(unavailableAmount);
                        c.authorityData.unavailable_funds = unavailableAmount;
                        
                        // Check internal only if external is not set
                        if (!limits.unavailable_funds_external_accounts || limits.unavailable_funds_external_accounts === '0') {
                            document.getElementById('unavailableInternalOnly').checked = true;
                            c.authorityData.unavailable_internal_only = true;
                        }
                    }
                }
                
                // Update record producer variables
                updateRecordProducerVariables();
            }
        });
    };

    // Modify the setupRequestTypeMonitoring function to call fetch when job code changes
    c.setupRequestTypeMonitoring = function() {
        var lastRequestType = '';
        var lastJobCode = '';

        var checkInterval = setInterval(function() {
            var currentRequestType = c.getRequestType();
            var currentJobCode = '';
            
            try {
                if (typeof g_form !== 'undefined' && g_form.getValue) {
                    currentJobCode = g_form.getValue('job_code');
                }
                if (!currentJobCode && window.parent && window.parent.g_form) {
                    currentJobCode = window.parent.g_form.getValue('job_code');
                }
            } catch(e) {}

            if (currentRequestType !== lastRequestType || currentJobCode !== lastJobCode) {
                lastRequestType = currentRequestType;
                lastJobCode = currentJobCode;
                c.requestType = currentRequestType;

                $scope.$apply(function() {
                    validateForm();
                    
                    // Fetch and populate if it's a change request and we have a job code
                    if (currentRequestType === 'change_to_existing_authority' && currentJobCode) {
                        c.fetchAndPopulateExistingLimits();
                    }
                });
            }
        }, 500);

        $scope.$on('$destroy', function() {
            clearInterval(checkInterval);
        });
    };

    // Update the updateRecordProducerVariables function to include change tracking
    function updateRecordProducerVariables() {
        g_form.setValue('overall_business_need', c.authorityData.overall_business_need);
        
        var currentRequestType = c.getRequestType();
        c.requestType = currentRequestType;

        if (currentRequestType === 'remove_authority') {
            g_form.setValue('authority_types', '');
            g_form.setValue('authority_data', '');
            validateForm();
            return;
        }

        var authority_types = [];
        var authority_data = [];

        // Process non-credit authority data
        if (c.authorityData.non_credit_checked) {
            authority_types.push('non_credit');
            var nonCreditData = {
                disbursement_ach: (c.authorityData.ach_checked && c.authorityData.disbursement) ? c.authorityData.disbursement : '',
                disbursement_wire_transfer_external: (c.authorityData.wire_transfer_checked && !c.authorityData.wire_internal_only && c.authorityData.disbursement) ? c.authorityData.disbursement : '',
                disbursement_wire_transfer_internal: (c.authorityData.wire_transfer_checked && c.authorityData.disbursement) ? c.authorityData.disbursement : '',
                disbursement_official_checks_external: (c.authorityData.official_checks_checked && !c.authorityData.checks_internal_only && c.authorityData.disbursement) ? c.authorityData.disbursement : '',
                disbursement_official_checks_internal: (c.authorityData.official_checks_checked && c.authorityData.disbursement) ? c.authorityData.disbursement : '',
                check_cashing_on_us: c.authorityData.check_cashing_on_us,
                check_cashing_not_on_us: c.authorityData.check_cashing_not_on_us,
                remote_deposit: c.authorityData.remote_deposit,
                treasury_solutions_company_wire_limits: c.authorityData.treasury_solutions_company_wire_limits,
                fx_wire_limits: c.authorityData.fx_wire_limits
            };
            authority_data.push(JSON.stringify(nonCreditData));
        }

        // Process credit authority data
        if (c.authorityData.credit_checked) {
            authority_types.push('credit');
            var creditData = {
                overdraft_internal_accounts: c.authorityData.overdraft || '',
                overdraft_external_accounts: (c.authorityData.overdraft && !c.authorityData.overdraft_internal_only) ? c.authorityData.overdraft : '',
                unavailable_funds_internal_accounts: c.authorityData.unavailable_funds || '',
                unavailable_funds_external_accounts: (c.authorityData.unavailable_funds && !c.authorityData.unavailable_internal_only) ? c.authorityData.unavailable_funds : ''
            };
            authority_data.push(JSON.stringify(creditData));
        }

        g_form.setValue('authority_types', authority_types.join('|'));
        g_form.setValue('authority_data', authority_data.join('|'));
        
        // Store original values for change tracking
        if (currentRequestType === 'change_to_existing_authority' && c.originalAuthorityData) {
            g_form.setValue('original_authority_data', JSON.stringify(c.originalAuthorityData));
        }

        validateForm();
    }

    // ... rest of existing initialization code ...
}
