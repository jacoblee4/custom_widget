<!-- ============================================ -->
<!-- HTML  -->
<!-- ============================================ -->

<div class="widget-container" ng-show="c.shouldShowWidget()">
    <div class="widget-header">
        <h2>Authority Limit Details</h2>
    </div>
    
    <!-- Show authority selection and details for new/change requests -->
    <div class="main-content" ng-hide="c.isRemoveAuthority()">
        <div class="left-column">
            <div class="checkbox-group" id="nonCreditGroup">
                <input type="checkbox" id="nonCreditAuth" name="non_credit_authority_check">
                <label for="nonCreditAuth">Non-Credit Authority</label>
            </div>
            
            <div id="nonCreditSection" class="section">
                <h3>Non-Credit Authority Limits</h3>
                
                <!-- Disbursement Section -->
                <div class="form-group">
                    <label for="disbursement">
                        Disbursement 
                        <span class="info-icon" title="Disbursements – This authority provides approval limits for the disbursement of ACH, Wire Transfers, and/or Official Check transaction types based on the requested and approved selections. Internal Accounts are defined as BankUnited owned and controlled accounts.
If applicable: Choose the appropriate transaction type(s) and enter the requested disbursement amount. If the transaction type(s) should be restricted to internal accounts, select the Internal Accounts Only option.">ⓘ</span>
                    </label>
                    <div class="currency-wrapper">
                        <span class="currency-symbol">$</span>
                        <input type="text" id="disbursement" class="form-control" placeholder="">
                    </div>
                    <!-- Current value display for changes -->
                    <div class="current-value-display" id="disbursementCurrentDisplay" style="display: none;">
                        <small class="text-muted">Current: <span id="disbursementCurrentValue"></span></small>
                    </div>
                </div>
                
                <div class="disbursement-options">
                    <div class="checkbox-group-small">
                        <input type="checkbox" id="achCheck">
                        <label for="achCheck">ACH</label>
                        <div class="current-value-inline" id="achCurrentDisplay" style="display: none;">
                            <small class="text-muted">(Current: <span id="achCurrentValue"></span>)</small>
                        </div>
                    </div>
                    
                    <div class="checkbox-group-small">
                        <input type="checkbox" id="wireTransferCheck">
                        <label for="wireTransferCheck">Wire Transfer</label>
                        <div class="current-value-inline" id="wireCurrentDisplay" style="display: none;">
                            <small class="text-muted">(Current: <span id="wireCurrentValue"></span>)</small>
                        </div>
                    </div>
                    
                    <div class="indented-checkbox" id="wireInternalOnlyContainer" style="display: none;">
                        <input type="checkbox" id="wireInternalOnly">
                        <label for="wireInternalOnly">Internal Accounts Only</label>
                    </div>
                    
                    <div class="checkbox-group-small">
                        <input type="checkbox" id="officialChecksCheck">
                        <label for="officialChecksCheck">Official Checks</label>
                        <div class="current-value-inline" id="checksCurrentDisplay" style="display: none;">
                            <small class="text-muted">(Current: <span id="checksCurrentValue"></span>)</small>
                        </div>
                    </div>
                    
                    <div class="indented-checkbox spaced-indent" id="checksInternalOnlyContainer" style="display: none;">
                        <input type="checkbox" id="checksInternalOnly">
                        <label for="checksInternalOnly">Internal Accounts Only</label>
                    </div>
                </div>
                
                <!-- Check Cashing Section -->
                <div class="subsection">
                    <h4>
                        Check Cashing & Cash Withdrawal 
                        <span class="info-icon" title="Check Cashing – This authority provides the ability to approve cash withdrawals, the cashing of checks drawn on BankUnited (On-Us), and checks drawn on another institution (not On-Us) that are being cashed by BankUnited. Approval limit is based on the selected options and amounts.
If applicable: Choose the appropriate option(s) and enter the requested approval limit amount.">ⓘ</span>
                    </h4>
                    <div class="form-group">
                        <label for="checkCashingOnUs">On-Us (Checks & Cash Withdrawals)</label>
                        <div class="currency-wrapper">
                            <span class="currency-symbol">$</span>
                            <input type="text" id="checkCashingOnUs" class="form-control" placeholder="">
                        </div>
                        <div class="current-value-display" id="checkCashingOnUsCurrentDisplay" style="display: none;">
                            <small class="text-muted">Current: <span id="checkCashingOnUsCurrentValue"></span></small>
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="checkCashingNotOnUs">Not On-Us (Checks)</label>
                        <div class="currency-wrapper">
                            <span class="currency-symbol">$</span>
                            <input type="text" id="checkCashingNotOnUs" class="form-control" placeholder="">
                        </div>
                        <div class="current-value-display" id="checkCashingNotOnUsCurrentDisplay" style="display: none;">
                            <small class="text-muted">Current: <span id="checkCashingNotOnUsCurrentValue"></span></small>
                        </div>
                    </div>
                </div>
                
                <!-- Other Fields Section -->
                <div class="subsection">
                    <div class="form-group">
                        <label for="remoteDeposit">
                            Remote Deposit 
                            <span class="info-icon" title="Remote Deposit – This authority provides the ability to approve external client Remote Deposit limits, utilizing the TS Daily Remote Deposit Capture Limit Approval Form.
If applicable: Enter the requested Remote Deposit Capture limit amount.">ⓘ</span>
                        </label>
                        <div class="currency-wrapper">
                            <span class="currency-symbol">$</span>
                            <input type="text" id="remoteDeposit" class="form-control" placeholder="">
                        </div>
                        <div class="current-value-display" id="remoteDepositCurrentDisplay" style="display: none;">
                            <small class="text-muted">Current: <span id="remoteDepositCurrentValue"></span></small>
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="treasurySolutions">
                            Treasury Solutions Company Wire Limits 
                            <span class="info-icon" title="Treasury Solutions Company Wire Limits – This authority provides the ability to approve external client wire limits, utilizing the TS Daily Wire Limit Approval Form. This external client limit applies to the Treasury Solution systems (i.e. BFS/Lynx, OBS).
If applicable: Enter the requested wire limit amount.">ⓘ</span>
                        </label>
                        <div class="currency-wrapper">
                            <span class="currency-symbol">$</span>
                            <input type="text" id="treasurySolutions" class="form-control" placeholder="">
                        </div>
                        <div class="current-value-display" id="treasurySolutionsCurrentDisplay" style="display: none;">
                            <small class="text-muted">Current: <span id="treasurySolutionsCurrentValue"></span></small>
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="fxWireLimits">
                            FX Wire Limits 
                            <span class="info-icon" title="FX Wire Limits – This authority provides the ability to approve external client wire limits, utilizing the BankUnitedFX Wire Limit Approval Form. This external client limit applies to the Treasury Solution system BankUnitedFX.
If applicable: Enter the requested wire limit amount.">ⓘ</span>
                        </label>
                        <div class="currency-wrapper">
                            <span class="currency-symbol">$</span>
                            <input type="text" id="fxWireLimits" class="form-control" placeholder="">
                        </div>
                        <div class="current-value-display" id="fxWireLimitsCurrentDisplay" style="display: none;">
                            <small class="text-muted">Current: <span id="fxWireLimitsCurrentValue"></span></small>
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="right-column">
            <div class="checkbox-group" id="creditGroup">
                <input type="checkbox" id="creditAuth" name="credit_authority_check">
                <label for="creditAuth">Credit Authority</label>
            </div>
            
            <div id="creditSection" class="section">
                <h3>Credit Authority Limits</h3>
                
                <!-- Overdraft Section -->
                <div class="form-group">
                    <label for="overdraft">
                        Overdraft 
                        <span class="info-icon" title="Overdraft – This authority provides approval limits for Overdraft transactions based on the requested and approved selections. Internal Accounts are defined as BankUnited owned and controlled accounts.
If applicable: Enter the requested approval amount. If the authority type should be restricted to internal accounts ONLY, select the appropriate option.">ⓘ</span>
                    </label>
                    <div class="currency-wrapper">
                        <span class="currency-symbol">$</span>
                        <input type="text" id="overdraft" class="form-control" placeholder="">
                    </div>
                    <div class="current-value-display" id="overdraftCurrentDisplay" style="display: none;">
                        <small class="text-muted">Current: <span id="overdraftCurrentValue"></span></small>
                    </div>
                    <div class="indented-checkbox">
                        <input type="checkbox" id="overdraftInternalOnly">
                        <label for="overdraftInternalOnly">Internal Accounts Only</label>
                    </div>
                </div>
                
                <!-- Unavailable Funds Section -->
                <div class="form-group">
                    <label for="unavailableFunds">
                        Unavailable Funds 
                        <span class="info-icon" title="Unavailable Funds – This authority provides approval limits for Unavailable Funds transactions based on the requested and approved selections. Internal Accounts are defined as BankUnited owned and controlled accounts.
If applicable: Enter the requested approval amount. If the authority type should be restricted to internal accounts ONLY, select the appropriate option.">ⓘ</span>
                    </label>
                    <div class="currency-wrapper">
                        <span class="currency-symbol">$</span>
                        <input type="text" id="unavailableFunds" class="form-control" placeholder="">
                    </div>
                    <div class="current-value-display" id="unavailableFundsCurrentDisplay" style="display: none;">
                        <small class="text-muted">Current: <span id="unavailableFundsCurrentValue"></span></small>
                    </div>
                    <div class="indented-checkbox">
                        <input type="checkbox" id="unavailableInternalOnly">
                        <label for="unavailableInternalOnly">Internal Accounts Only</label>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Justification Section - Always show when widget is visible -->
    <div id="justificationSection" class="justification-section active">
        <h3>Justification</h3>
        <div class="info-message" ng-hide="c.isRemoveAuthority()">
            Using the text box below, please provide a detailed justification for this request. For New Authority or Limit Change requests, include what the authority will be used for (i.e. The approval of Loan Fundings, Customer Transactions, Cash Management, etc.).
        </div>
        <div class="info-message" ng-show="c.isRemoveAuthority()">
            Please provide a detailed justification for removing all existing authority limits for this job code.
        </div>
        <div class="form-group">
            <label for="businessNeed">Overall Business Need <span class="required-asterisk">*</span></label>
            <textarea id="businessNeed" class="form-control textarea"></textarea>
        </div>
    </div>
</div>


<!-- ============================================ -->
<!-- CSS -->
<!-- ============================================ -->

.widget-container {
    max-width: 900px;
    margin: 0 auto;
    background: white;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    padding: 24px;
}

.widget-header {
    margin-bottom: 24px;
    padding-bottom: 16px;
    border-bottom: 2px solid #e8e8e8;
    
    h2 {
        color: #333;
        font-size: 20px;
        font-weight: 600;
        margin: 0;
    }
}

.main-content {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 30px;
    margin-bottom: 24px;
}

.left-column, .right-column {
    display: flex;
    flex-direction: column;
    gap: 20px;
}

.checkbox-group {
    display: flex;
    align-items: center;
    padding: 12px 16px;
    background: #f8f9fa;
    border: 1px solid #dee2e6;
    border-radius: 6px;
    cursor: pointer;
    transition: all 0.2s ease;
    
    &:hover {
        background: #e9ecef;
        border-color: #adb5bd;
    }
    
    &.active {
        background: #e7f5ff;
        border-color: #339af0;
    }
    
    input[type="checkbox"] {
        margin-right: 10px;
        width: 18px;
        height: 18px;
        cursor: pointer;
    }
    
    label {
        cursor: pointer;
        font-size: 15px;
        color: #333;
        font-weight: 500;
        user-select: none;
        margin: 0;
    }
}

.section {
    display: none;
    padding: 20px;
    background: #f8f9fa;
    border: 1px solid #dee2e6;
    border-radius: 6px;
    
    &.active {
        display: block;
    }
    
    h3 {
        color: #495057;
        font-size: 16px;
        font-weight: 600;
        margin: 0 0 16px 0;
        padding-bottom: 8px;
        border-bottom: 1px solid #dee2e6;
    }
}

.form-group {
    margin-bottom: 16px;
    
    &:last-child {
        margin-bottom: 0;
    }
    
    label {
        display: block;
        margin-bottom: 6px;
        color: #495057;
        font-size: 14px;
        font-weight: 500;
    }
}

.form-control {
    width: 100%;
    padding: 8px 12px;
    border: 1px solid #ced4da;
    border-radius: 4px;
    font-size: 14px;
    transition: border-color 0.15s ease-in-out;
    
    &:focus {
        outline: none;
        border-color: #339af0;
        box-shadow: 0 0 0 2px rgba(51, 154, 240, 0.1);
    }
    
    &.textarea {
        min-height: 120px;
        resize: vertical;
        font-family: inherit;
    }
}

.currency-wrapper {
    position: relative;
    
    .currency-symbol {
        position: absolute;
        left: 12px;
        top: 50%;
        transform: translateY(-50%);
        color: #6c757d;
        font-weight: 500;
        z-index: 1;
    }
    
    .form-control {
        padding-left: 28px;
    }
}

.justification-section {
    display: none;
    padding: 20px;
    background: #fff4e6;
    border: 1px solid #ffd93d;
    border-radius: 6px;
    
    &.active {
        display: block;
    }
    
    h3 {
        color: #495057;
        font-size: 16px;
        font-weight: 600;
        margin: 0 0 12px 0;
    }
}

.justification-section .form-group label {
 color: #212529;
  font-weight: 600;
  font-size: 15px;
  margin-bottom: 8px;
}

.info-message {
    background: transparent;
    padding: 0;
    border-radius: 0;
    margin-bottom: 16px;
    font-size: 14px;
    color: #495057;
    line-height: 1.5;
    border-left: none;
    font-style: normal;
    font-weight: normal;
}

.disbursement-options {
    margin-top: 15px;
    padding-left: 15px;
}

.checkbox-group-small {
    display: flex;
    align-items: center;
    margin-bottom: 10px;
    
    input[type="checkbox"] {
        margin-right: 8px;
        width: 16px;
        height: 16px;
    }
    
    label {
        font-size: 14px;
        color: #495057;
        margin: 0;
        cursor: pointer;
    }
}

.indented-checkbox {
    margin-left: 25px;
    margin-top: 8px;
    display: flex;
    align-items: center;
    
    input[type="checkbox"] {
        margin-right: 8px;
        width: 14px;
        height: 14px;
    }
    
    label {
        font-size: 13px;
        color: #6c757d;
        margin: 0;
        cursor: pointer;
    }
}

.subsection {
    margin-top: 25px;
    padding-top: 20px;
    border-top: 1px solid #dee2e6;
    
    h4 {
        color: #495057;
        font-size: 15px;
        font-weight: 600;
        margin: 0 0 15px 0;
    }
}

.required-asterisk {
    color: #d9534f;
    font-weight: bold;
    margin-left: 3px;
}

.info-icon {
    display: inline-block;
    width: 16px;
    height: 16px;
    background-color: #17a2b8;
    color: white;
    border-radius: 50%;
    text-align: center;
    font-size: 12px;
    line-height: 16px;
    margin-left: 5px;
    cursor: help;
    font-weight: normal;
}

.spaced-indent {
    margin-top: 12px !important;
}

.current-value-display {
    margin-top: 4px;
    padding: 4px 8px;
    background-color: #f8f9fa;
    border-radius: 3px;
    border-left: 3px solid #17a2b8;
}

.current-value-inline {
    margin-left: 8px;
    display: inline-block;
}

.text-muted {
    color: #6c757d !important;
    font-style: italic;
}

@media (max-width: 768px) {
    .main-content {
        grid-template-columns: 1fr;
    }
}



<!-- ============================================ -->
<!-- CLIENT CONTROLLER -->
<!-- ============================================ -->

api.controller = function($scope, $window) {
    var c = this;
    var g_form = $scope.page.g_form;

    // Add request type tracking
    c.requestType = '';
    c.currentLimits = null; // Store current limits for change requests

    c.$onInit = function() {
        setTimeout(function() {
            initializeWidget();
        }, 500);
    };

    // Check if current request is remove authority
    c.isRemoveAuthority = function() {
        return c.requestType === 'remove_authority';
    };

    // Check if current request is change authority
    c.isChangeAuthority = function() {
        return c.requestType === 'change_to_existing_authority';
    };

    // Determine if widget should be visible
    c.shouldShowWidget = function() {
        return c.requestType && (c.requestType === 'new_authority' || c.requestType === 'change_to_existing_authority' || c.requestType === 'remove_authority');
    };

    // Get request type from g_form
    c.getRequestType = function() {
        try {
            // Try multiple methods to get request type
            var requestType = '';

            if (typeof g_form !== 'undefined' && g_form.getValue) {
                requestType = g_form.getValue('request_type');
                if (requestType) return requestType;
            }

            if (window.parent && window.parent.g_form && window.parent.g_form.getValue) {
                requestType = window.parent.g_form.getValue('request_type');
                if (requestType) return requestType;
            }

            var requestTypeField = document.querySelector('select[name="request_type"], [data-name="request_type"] select');
            if (requestTypeField && requestTypeField.value) {
                return requestTypeField.value;
            }

            if (c.requestType) {
                return c.requestType;
            }

        } catch (e) {
            // Handle error silently, but try cached value
            if (c.requestType) {
                return c.requestType;
            }
        }
        return '';
    };

    // Get job code from g_form
    c.getJobCode = function() {
        try {
            if (typeof g_form !== 'undefined' && g_form.getValue) {
                return g_form.getValue('job_code');
            }

            if (window.parent && window.parent.g_form && window.parent.g_form.getValue) {
                return window.parent.g_form.getValue('job_code');
            }

            var jobCodeField = document.querySelector('select[name="job_code"], [data-name="job_code"] select');
            if (jobCodeField && jobCodeField.value) {
                return jobCodeField.value;
            }

        } catch (e) {
        }
        return '';
    };

    // Load current limits for change requests
    c.loadCurrentLimits = function(jobCode) {
        if (!jobCode || !c.isChangeAuthority()) {
            return;
        }

        // Make server call to get current limits
        var getData = {
            action: 'getCurrentLimits',
            job_code: jobCode
        };

        // Server call implementation would go here
        // For now, we'll simulate with a placeholder
        c.getCurrentLimitsFromServer(getData).then(function(response) {
            if (response && response.limits && response.limits.length > 0) {
                c.currentLimits = response.limits[0];
                c.autoPopulateFields();
            }
        }).catch(function(error) {
            console.error('Error loading current limits:', error);
        });
    };

    // Simulate server call for current limits
    c.getCurrentLimitsFromServer = function(data) {
        return new Promise(function(resolve) {
            // In real implementation, this would be a server call
            // For now, return empty to prevent errors
            resolve({ limits: [] });
        });
    };

    // Auto-populate fields based on current limits
    c.autoPopulateFields = function() {
        if (!c.currentLimits || !c.isChangeAuthority()) {
            return;
        }

        var limits = c.currentLimits;
        
        // Helper function to format currency
        function formatCurrency(value) {
            if (!value || value === '0' || value === 0) return '';
            var numStr = value.toString().replace(/[^\d.]/g, '');
            var parts = numStr.split('.');
            if (parts.length > 2) {
                numStr = parts[0] + '.' + parts.slice(1).join('');
            }
            var [integerPart, decimalPart] = numStr.split('.');
            var formattedInteger = integerPart.replace(/\B(?=(\d{3})+(?!\d))/g, ',');
            if (decimalPart !== undefined) {
                var limitedDecimal = decimalPart.substring(0, 2);
                return formattedInteger + '.' + limitedDecimal;
            }
            return formattedInteger;
        }

        // Helper function to check if value is significant (> 0)
        function hasValue(val) {
            return val && parseFloat(val.toString().replace(/[^\d.]/g, '')) > 0;
        }

        // Check for non-credit values
        var hasNonCreditValues = hasValue(limits.disbursement_ach) ||
                                hasValue(limits.disbursement_wire_transfer_external) ||
                                hasValue(limits.disbursement_wire_transfer_internal) ||
                                hasValue(limits.disbursement_official_checks_external) ||
                                hasValue(limits.disbursement_official_checks_internal) ||
                                hasValue(limits.check_cashing_on_us) ||
                                hasValue(limits.check_cashing_not_on_us) ||
                                hasValue(limits.remote_deposit) ||
                                hasValue(limits.treasury_solutions_company_wire_limits) ||
                                hasValue(limits.fx_wire_limits);

        // Check for credit values
        var hasCreditValues = hasValue(limits.overdraft_external_accounts) ||
                             hasValue(limits.overdraft_internal_accounts) ||
                             hasValue(limits.unavailable_funds_external_accounts) ||
                             hasValue(limits.unavailable_funds_internal_accounts);

        // Auto-check authority types
        if (hasNonCreditValues) {
            document.getElementById('nonCreditAuth').checked = true;
            c.authorityData.non_credit_checked = true;
            document.getElementById('nonCreditGroup').classList.add('active');
            document.getElementById('nonCreditSection').classList.add('active');
        }

        if (hasCreditValues) {
            document.getElementById('creditAuth').checked = true;
            c.authorityData.credit_checked = true;
            document.getElementById('creditGroup').classList.add('active');
            document.getElementById('creditSection').classList.add('active');
        }

        // Handle disbursement logic (most complex part)
        c.handleDisbursementAutoPopulation(limits);

        // Handle simple fields
        c.populateSimpleFields(limits);

        // Handle credit fields
        c.populateCreditFields(limits);

        // Show current value displays
        c.showCurrentValueDisplays(limits);

        // Update the data model
        updateRecordProducerVariables();
    };

    // Handle complex disbursement auto-population
    c.handleDisbursementAutoPopulation = function(limits) {
        var achValue = hasValue(limits.disbursement_ach) ? limits.disbursement_ach : null;
        var wireExtValue = hasValue(limits.disbursement_wire_transfer_external) ? limits.disbursement_wire_transfer_external : null;
        var wireIntValue = hasValue(limits.disbursement_wire_transfer_internal) ? limits.disbursement_wire_transfer_internal : null;
        var checksExtValue = hasValue(limits.disbursement_official_checks_external) ? limits.disbursement_official_checks_external : null;
        var checksIntValue = hasValue(limits.disbursement_official_checks_internal) ? limits.disbursement_official_checks_internal : null;

        var disbursementAmount = null;
        var achChecked = false;
        var wireChecked = false;
        var wireInternalOnly = false;
        var checksChecked = false;
        var checksInternalOnly = false;

        // Logic to determine disbursement amount and checkboxes
        if (achValue) {
            disbursementAmount = achValue;
            achChecked = true;
        }

        if (wireExtValue || wireIntValue) {
            if (!disbursementAmount) {
                disbursementAmount = wireExtValue || wireIntValue;
            }
            wireChecked = true;
            // If only internal wire transfer exists, mark as internal only
            if (wireIntValue && !wireExtValue) {
                wireInternalOnly = true;
            }
        }

        if (checksExtValue || checksIntValue) {
            if (!disbursementAmount) {
                disbursementAmount = checksExtValue || checksIntValue;
            }
            checksChecked = true;
            // If only internal checks exist, mark as internal only
            if (checksIntValue && !checksExtValue) {
                checksInternalOnly = true;
            }
        }

        // Set the disbursement amount
        if (disbursementAmount) {
            var formattedAmount = formatCurrency(disbursementAmount);
            document.getElementById('disbursement').value = formattedAmount;
            c.authorityData.disbursement = getCurrencyValue(formattedAmount);
        }

        // Set checkboxes
        document.getElementById('achCheck').checked = achChecked;
        c.authorityData.ach_checked = achChecked;

        document.getElementById('wireTransferCheck').checked = wireChecked;
        c.authorityData.wire_transfer_checked = wireChecked;
        if (wireChecked) {
            document.getElementById('wireInternalOnlyContainer').style.display = 'block';
            document.getElementById('wireInternalOnly').checked = wireInternalOnly;
            c.authorityData.wire_internal_only = wireInternalOnly;
        }

        document.getElementById('officialChecksCheck').checked = checksChecked;
        c.authorityData.official_checks_checked = checksChecked;
        if (checksChecked) {
            document.getElementById('checksInternalOnlyContainer').style.display = 'block';
            document.getElementById('checksInternalOnly').checked = checksInternalOnly;
            c.authorityData.checks_internal_only = checksInternalOnly;
        }
    };

    // Helper function to check if value exists and is > 0
    function hasValue(val) {
        return val && parseFloat(val.toString().replace(/[^\d.]/g, '')) > 0;
    }

    // Populate simple non-credit fields
    c.populateSimpleFields = function(limits) {
        // Check Cashing fields
        if (hasValue(limits.check_cashing_on_us)) {
            var formatted = formatCurrency(limits.check_cashing_on_us);
            document.getElementById('checkCashingOnUs').value = formatted;
            c.authorityData.check_cashing_on_us = getCurrencyValue(formatted);
        }

        if (hasValue(limits.check_cashing_not_on_us)) {
            var formatted = formatCurrency(limits.check_cashing_not_on_us);
            document.getElementById('checkCashingNotOnUs').value = formatted;
            c.authorityData.check_cashing_not_on_us = getCurrencyValue(formatted);
        }

        // Other fields
        if (hasValue(limits.remote_deposit)) {
            var formatted = formatCurrency(limits.remote_deposit);
            document.getElementById('remoteDeposit').value = formatted;
            c.authorityData.remote_deposit = getCurrencyValue(formatted);
        }

        if (hasValue(limits.treasury_solutions_company_wire_limits)) {
            var formatted = formatCurrency(limits.treasury_solutions_company_wire_limits);
            document.getElementById('treasurySolutions').value = formatted;
            c.authorityData.treasury_solutions_company_wire_limits = getCurrencyValue(formatted);
        }

        if (hasValue(limits.fx_wire_limits)) {
            var formatted = formatCurrency(limits.fx_wire_limits);
            document.getElementById('fxWireLimits').value = formatted;
            c.authorityData.fx_wire_limits = getCurrencyValue(formatted);
        }
    };

    // Populate credit fields
    c.populateCreditFields = function(limits, formatCurrency, getCurrencyValue, hasValue) {
        // Overdraft - use the higher of external or internal, or combine logic
        var overdraftAmount = null;
        var overdraftInternalOnly = false;

        if (hasValue(limits.overdraft_external_accounts) || hasValue(limits.overdraft_internal_accounts)) {
            if (hasValue(limits.overdraft_external_accounts)) {
                overdraftAmount = limits.overdraft_external_accounts;
            } else if (hasValue(limits.overdraft_internal_accounts)) {
                overdraftAmount = limits.overdraft_internal_accounts;
                overdraftInternalOnly = true;
            }

            var formatted = formatCurrency(overdraftAmount);
            document.getElementById('overdraft').value = formatted;
            c.authorityData.overdraft = getCurrencyValue(formatted);
            
            document.getElementById('overdraftInternalOnly').checked = overdraftInternalOnly;
            c.authorityData.overdraft_internal_only = overdraftInternalOnly;
        }

        // Unavailable Funds - similar logic
        var unavailableAmount = null;
        var unavailableInternalOnly = false;

        if (hasValue(limits.unavailable_funds_external_accounts) || hasValue(limits.unavailable_funds_internal_accounts)) {
            if (hasValue(limits.unavailable_funds_external_accounts)) {
                unavailableAmount = limits.unavailable_funds_external_accounts;
            } else if (hasValue(limits.unavailable_funds_internal_accounts)) {
                unavailableAmount = limits.unavailable_funds_internal_accounts;
                unavailableInternalOnly = true;
            }

            var formatted = formatCurrency(unavailableAmount);
            document.getElementById('unavailableFunds').value = formatted;
            c.authorityData.unavailable_funds = getCurrencyValue(formatted);
            
            document.getElementById('unavailableInternalOnly').checked = unavailableInternalOnly;
            c.authorityData.unavailable_internal_only = unavailableInternalOnly;
        }
    };

    // Show current value displays for change requests
    c.showCurrentValueDisplays = function(limits, formatCurrency, hasValue) {
        if (!c.isChangeAuthority()) return;

        // Helper function to display current value
        function showCurrentValue(fieldId, currentValue) {
            var displayElement = document.getElementById(fieldId + 'CurrentDisplay');
            var valueElement = document.getElementById(fieldId + 'CurrentValue');
            
            if (displayElement && valueElement && hasValue(currentValue)) {
                valueElement.textContent = ' + formatCurrency(currentValue);
                displayElement.style.display = 'block';
            }
        }

        // Show current values for all fields that have them
        showCurrentValue('disbursement', limits.disbursement_ach || limits.disbursement_wire_transfer_external || limits.disbursement_wire_transfer_internal || limits.disbursement_official_checks_external || limits.disbursement_official_checks_internal);
        
        // For checkboxes, show inline current values
        if (hasValue(limits.disbursement_ach)) {
            document.getElementById('achCurrentValue').textContent = ' + formatCurrency(limits.disbursement_ach);
            document.getElementById('achCurrentDisplay').style.display = 'inline-block';
        }
        
        if (hasValue(limits.disbursement_wire_transfer_external) || hasValue(limits.disbursement_wire_transfer_internal)) {
            var wireValue = limits.disbursement_wire_transfer_external || limits.disbursement_wire_transfer_internal;
            document.getElementById('wireCurrentValue').textContent = ' + formatCurrency(wireValue);
            document.getElementById('wireCurrentDisplay').style.display = 'inline-block';
        }
        
        if (hasValue(limits.disbursement_official_checks_external) || hasValue(limits.disbursement_official_checks_internal)) {
            var checksValue = limits.disbursement_official_checks_external || limits.disbursement_official_checks_internal;
            document.getElementById('checksCurrentValue').textContent = ' + formatCurrency(checksValue);
            document.getElementById('checksCurrentDisplay').style.display = 'inline-block';
        }

        showCurrentValue('checkCashingOnUs', limits.check_cashing_on_us);
        showCurrentValue('checkCashingNotOnUs', limits.check_cashing_not_on_us);
        showCurrentValue('remoteDeposit', limits.remote_deposit);
        showCurrentValue('treasurySolutions', limits.treasury_solutions_company_wire_limits);
        showCurrentValue('fxWireLimits', limits.fx_wire_limits);
        showCurrentValue('overdraft', limits.overdraft_external_accounts || limits.overdraft_internal_accounts);
        showCurrentValue('unavailableFunds', limits.unavailable_funds_external_accounts || limits.unavailable_funds_internal_accounts);
    };

    // Monitor request type and job code changes
    c.setupRequestTypeMonitoring = function() {
        var lastRequestType = '';
        var lastJobCode = '';

        // Poll for request type and job code changes
        var checkInterval = setInterval(function() {
            var currentRequestType = c.getRequestType();
            var currentJobCode = c.getJobCode();

            if (currentRequestType !== lastRequestType || currentJobCode !== lastJobCode) {
                lastRequestType = currentRequestType;
                lastJobCode = currentJobCode;
                c.requestType = currentRequestType;

                // Clear current limits when job code or request type changes
                c.currentLimits = null;

                // Apply changes to scope
                $scope.$apply(function() {
                    // Load current limits for change requests
                    if (c.isChangeAuthority() && currentJobCode) {
                        c.loadCurrentLimits(currentJobCode);
                    } else {
                        // Clear any current value displays for non-change requests
                        c.hideCurrentValueDisplays();
                    }
                    // Re-run validation when request type changes
                    validateForm();
                });
            }
        }, 500);

        // Clean up on destroy
        $scope.$on('$destroy', function() {
            clearInterval(checkInterval);
        });
    };

    // Hide current value displays
    c.hideCurrentValueDisplays = function() {
        var displayElements = document.querySelectorAll('.current-value-display, .current-value-inline');
        displayElements.forEach(function(element) {
            element.style.display = 'none';
        });
    };

    // Add method to track changes and store them
    c.trackFieldChanges = function() {
        // This will be used to track what fields have changed from their original values
        // Store original values vs current values for the record producer script
        if (c.currentLimits && c.isChangeAuthority()) {
            var changesData = {
                original_limits: c.currentLimits,
                current_form_data: c.authorityData
            };
            
            // Store this in a hidden field for the record producer to access
            try {
                if (typeof g_form !== 'undefined' && g_form.setValue) {
                    g_form.setValue('authority_changes_data', JSON.stringify(changesData));
                }
            } catch (e) {
                console.error('Error storing changes data:', e);
            }
        }
    };

    function initializeWidget() {
        // Start monitoring request type and job code
        c.setupRequestTypeMonitoring();

        // Get references to elements
        var nonCreditCheckbox = document.getElementById('nonCreditAuth');
        var creditCheckbox = document.getElementById('creditAuth');
        var nonCreditGroup = document.getElementById('nonCreditGroup');
        var creditGroup = document.getElementById('creditGroup');
        var nonCreditSection = document.getElementById('nonCreditSection');
        var creditSection = document.getElementById('creditSection');
        var justificationSection = document.getElementById('justificationSection');

        var wireTransferCheck = document.getElementById('wireTransferCheck');
        var wireInternalOnlyContainer = document.getElementById('wireInternalOnlyContainer');
        var wireInternalOnly = document.getElementById('wireInternalOnly');
        var officialChecksCheck = document.getElementById('officialChecksCheck');
        var checksInternalOnlyContainer = document.getElementById('checksInternalOnlyContainer');
        var checksInternalOnly = document.getElementById('checksInternalOnly');

        // Widget data model - stores all form state
        c.authorityData = {
            non_credit_checked: false,
            credit_checked: false,
            disbursement: '',
            ach_checked: false,
            wire_transfer_checked: false,
            wire_internal_only: false,
            official_checks_checked: false,
            checks_internal_only: false,
            check_cashing_on_us: '',
            check_cashing_not_on_us: '',
            remote_deposit: '',
            treasury_solutions_company_wire_limits: '',
            fx_wire_limits: '',
            overdraft: '',
            overdraft_internal_only: false,
            unavailable_funds: '',
            unavailable_internal_only: false,
            overall_business_need: ''
        };

        // Currency formatting utilities
        function formatCurrency(value) {
            if (!value) return '';
            var numStr = value.toString().replace(/[^\d.]/g, '');
            var parts = numStr.split('.');
            if (parts.length > 2) {
                numStr = parts[0] + '.' + parts.slice(1).join('');
            }
            var [integerPart, decimalPart] = numStr.split('.');
            var formattedInteger = integerPart.replace(/\B(?=(\d{3})+(?!\d))/g, ',');
            if (decimalPart !== undefined) {
                var limitedDecimal = decimalPart.substring(0, 2);
                return formattedInteger + '.' + limitedDecimal;
            }
            return formattedInteger;
        }

        function getCurrencyValue(formattedValue) {
            if (!formattedValue) return '';
            return formattedValue.replace(/[^\d.]/g, '');
        }

        // Updated validation logic to handle remove authority
        function validateForm() {
            var errors = [];
            var currentRequestType = c.getRequestType();

            // Send debug info to server logs
            try {
                if (typeof g_form !== 'undefined' && g_form.setValue) {
                    g_form.setValue('debug_request_type', currentRequestType || 'undefined');
                    g_form.setValue('debug_c_request_type', c.requestType || 'undefined');
                    g_form.setValue('debug_validation_step', 'starting');
                }
            } catch (e) {}

            // For remove authority requests, skip client validation entirely - let server handle it
            if (currentRequestType === 'remove_authority' || c.requestType === 'remove_authority') {
                try {
                    g_form.setValue('debug_validation_step', 'remove_authority_skip_client');
                } catch (e) {}

                // Set validation to true and let server handle the actual validation
                g_form.setValue('form_validation_errors', '');
                g_form.setValue('form_is_valid', 'true');
                return true;
            }

            try {
                g_form.setValue('debug_validation_step', 'full_validation_path');
            } catch (e) {}

            // For new_authority and change_to_existing_authority, run normal validation

            // Business justification required for all request types
            if (!c.authorityData.overall_business_need || c.authorityData.overall_business_need.trim() === '') {
                errors.push('Overall Business Need is required');
            }

            // Must select at least one authority type (only for non-remove requests)
            if (!c.authorityData.non_credit_checked && !c.authorityData.credit_checked) {
                errors.push('You must select at least one authority type (Credit Authority or Non-Credit Authority)');
            }

            // Non-credit authority validation (only for non-remove requests)
            if (c.authorityData.non_credit_checked) {
                var hasNonCreditValue = c.authorityData.disbursement || c.authorityData.check_cashing_on_us ||
                    c.authorityData.check_cashing_not_on_us || c.authorityData.remote_deposit ||
                    c.authorityData.treasury_solutions_company_wire_limits || c.authorityData.fx_wire_limits;

                if (!hasNonCreditValue) {
                    errors.push('If Non-Credit Authority is selected, at least one currency field must have a value');
                }

                if (c.authorityData.disbursement &&
                    !c.authorityData.ach_checked &&
                    !c.authorityData.wire_transfer_checked &&
                    !c.authorityData.official_checks_checked) {
                    errors.push('If Disbursement amount is entered, you must select at least one option: ACH, Wire Transfer, or Official Checks');
                }
            }

            // Credit authority validation (only for non-remove requests)
            if (c.authorityData.credit_checked) {
                var hasCreditValue = c.authorityData.overdraft || c.authorityData.unavailable_funds;
                if (!hasCreditValue) {
                    errors.push('If Credit Authority is selected, at least one currency field must have a value');
                }
            }

            var isValid = errors.length === 0;

            // Update Record Producer variables for server-side validation
            g_form.setValue('form_validation_errors', errors.join('|'));
            g_form.setValue('form_is_valid', isValid ? 'true' : 'false');

            return isValid;
        }

        // Updated updateRecordProducerVariables function
        function updateRecordProducerVariables() {
            g_form.setValue('overall_business_need', c.authorityData.overall_business_need);

            // Get current request type - use multiple methods
            var currentRequestType = c.getRequestType();

            // Also update our cached request type
            c.requestType = currentRequestType;

            // For remove authority requests, don't set authority data
            if (currentRequestType === 'remove_authority') {
                g_form.setValue('authority_types', '');
                g_form.setValue('authority_data', '');
                // Make sure validation runs
                validateForm();
                return;
            }

            var authority_types = [];
            var authority_data = [];

            // Process non-credit authority data (only for non-remove requests)
            if (c.authorityData.non_credit_checked) {
                authority_types.push('non_credit');
                var nonCreditData = {
                    disbursement_ach: (c.authorityData.ach_checked && c.authorityData.disbursement) ? c.authorityData.disbursement : '',
                    disbursement_wire_transfer_external: (c.authorityData.wire_transfer_checked && !c.authorityData.wire_internal_only && c.authorityData.disbursement) ? c.authorityData.disbursement : '',
                    disbursement_wire_transfer_internal: (c.authorityData.wire_transfer_checked && c.authorityData.disbursement) ? c.authorityData.disbursement : '',
                    disbursement_official_checks_external: (c.authorityData.official_checks_checked && !c.authorityData.checks_internal_only && c.authorityData.disbursement) ? c.authorityData.disbursement : '',
                    disbursement_official_checks_internal: (c.authorityData.official_checks_checked && c.authorityData.disbursement) ? c.authorityData.disbursement : '',
                    check_cashing_on_us: c.authorityData.check_cashing_on_us,
                    check_cashing_not_on_us: c.authorityData.check_cashing_not_on_us,
                    remote_deposit: c.authorityData.remote_deposit,
                    treasury_solutions_company_wire_limits: c.authorityData.treasury_solutions_company_wire_limits,
                    fx_wire_limits: c.authorityData.fx_wire_limits
                };
                authority_data.push(JSON.stringify(nonCreditData));
            }

            // Process credit authority data (only for non-remove requests)
            if (c.authorityData.credit_checked) {
                authority_types.push('credit');
                var creditData = {
                    overdraft_internal_accounts: c.authorityData.overdraft || '',
                    overdraft_external_accounts: (c.authorityData.overdraft && !c.authorityData.overdraft_internal_only) ? c.authorityData.overdraft : '',
                    unavailable_funds_internal_accounts: c.authorityData.unavailable_funds || '',
                    unavailable_funds_external_accounts: (c.authorityData.unavailable_funds && !c.authorityData.unavailable_internal_only) ? c.authorityData.unavailable_funds : ''
                };
                authority_data.push(JSON.stringify(creditData));
            }

            g_form.setValue('authority_types', authority_types.join('|'));
            g_form.setValue('authority_data', authority_data.join('|'));

            // Track field changes for change requests
            c.trackFieldChanges();

            // Run validation
            validateForm();
        }

        // Update widget data and sync with Record Producer
        function updateWidgetData(fieldName, value) {
            c.authorityData[fieldName] = value;
            updateRecordProducerVariables();
        }

        // Handle authority type selection (Credit/Non-Credit)
        function handleAuthoritySelection() {
            var nonCreditChecked = nonCreditCheckbox.checked;
            var creditChecked = creditCheckbox.checked;

            // Update visual states
            nonCreditGroup.classList.toggle('active', nonCreditChecked);
            creditGroup.classList.toggle('active', creditChecked);
            nonCreditSection.classList.toggle('active', nonCreditChecked);
            creditSection.classList.toggle('active', creditChecked);

            // Update data model
            updateWidgetData('non_credit_checked', nonCreditChecked);
            updateWidgetData('credit_checked', creditChecked);
        }

        // Handle Wire Transfer checkbox changes
        function handleWireTransferChange() {
            var isChecked = wireTransferCheck.checked;
            wireInternalOnlyContainer.style.display = isChecked ? 'block' : 'none';
            if (!isChecked) {
                wireInternalOnly.checked = false;
                updateWidgetData('wire_internal_only', false);
            }
            updateWidgetData('wire_transfer_checked', isChecked);
        }

        // Handle Official Checks checkbox changes
        function handleOfficialChecksChange() {
            var isChecked = officialChecksCheck.checked;
            checksInternalOnlyContainer.style.display = isChecked ? 'block' : 'none';
            if (!isChecked) {
                checksInternalOnly.checked = false;
                updateWidgetData('checks_internal_only', false);
            }
            updateWidgetData('official_checks_checked', isChecked);
        }

        // Setup currency input field with formatting
        function setupCurrencyField(inputId, fieldName) {
            var input = document.getElementById(inputId);
            if (!input) return;

            var isUpdating = false;

            function handleCurrencyInput(event) {
                if (isUpdating) return;
                isUpdating = true;

                var cursorPosition = event.target.selectionStart;
                var oldValue = event.target.value;
                var oldLength = oldValue.length;
                var formattedValue = formatCurrency(oldValue);

                event.target.value = formattedValue;

                // Maintain cursor position after formatting
                var newLength = formattedValue.length;
                var lengthDiff = newLength - oldLength;
                var newCursorPosition = Math.max(0, cursorPosition + lengthDiff);
                setTimeout(() => {
                    event.target.setSelectionRange(newCursorPosition, newCursorPosition);
                }, 0);

                var rawValue = getCurrencyValue(formattedValue);
                updateWidgetData(fieldName, rawValue);
                isUpdating = false;
            }
            input.addEventListener('input', handleCurrencyInput);
        }

        // Setup checkbox field
        function setupCheckboxField(inputId, fieldName) {
            var input = document.getElementById(inputId);
            if (!input) return;
            input.addEventListener('change', function(event) {
                updateWidgetData(fieldName, event.target.checked);
            });
        }

        // Setup textarea field
        function setupTextAreaField(inputId, fieldName) {
            var input = document.getElementById(inputId);
            if (!input) return;
            input.addEventListener('input', function(event) {
                updateWidgetData(fieldName, event.target.value);
            });
        }

        // Bind all event listeners
        if (nonCreditCheckbox) nonCreditCheckbox.addEventListener('change', handleAuthoritySelection);
        if (creditCheckbox) creditCheckbox.addEventListener('change', handleAuthoritySelection);

        // Allow clicking on the entire checkbox group to toggle
        if (nonCreditGroup) {
            nonCreditGroup.addEventListener('click', function(e) {
                if (e.target.tagName !== 'INPUT') {
                    nonCreditCheckbox.checked = !nonCreditCheckbox.checked;
                    handleAuthoritySelection();
                }
            });
        }
        if (creditGroup) {
            creditGroup.addEventListener('click', function(e) {
                if (e.target.tagName !== 'INPUT') {
                    creditCheckbox.checked = !creditCheckbox.checked;
                    handleAuthoritySelection();
                }
            });
        }

        if (wireTransferCheck) wireTransferCheck.addEventListener('change', handleWireTransferChange);
        if (officialChecksCheck) officialChecksCheck.addEventListener('change', handleOfficialChecksChange);

        // Setup all currency fields
        setupCurrencyField('disbursement', 'disbursement');
        setupCurrencyField('checkCashingOnUs', 'check_cashing_on_us');
        setupCurrencyField('checkCashingNotOnUs', 'check_cashing_not_on_us');
        setupCurrencyField('remoteDeposit', 'remote_deposit');
        setupCurrencyField('treasurySolutions', 'treasury_solutions_company_wire_limits');
        setupCurrencyField('fxWireLimits', 'fx_wire_limits');
        setupCurrencyField('overdraft', 'overdraft');
        setupCurrencyField('unavailableFunds', 'unavailable_funds');

        // Setup all checkbox fields
        setupCheckboxField('achCheck', 'ach_checked');
        setupCheckboxField('wireInternalOnly', 'wire_internal_only');
        setupCheckboxField('checksInternalOnly', 'checks_internal_only');
        setupCheckboxField('overdraftInternalOnly', 'overdraft_internal_only');
        setupCheckboxField('unavailableInternalOnly', 'unavailable_internal_only');

        // Setup textarea field
        setupTextAreaField('businessNeed', 'overall_business_need');

        // Initialize Record Producer variables
        updateRecordProducerVariables();
    }
};



<!-- ============================================ -->
<!-- SERVER SCRIPT -->
<!-- ============================================ -->

(function() {
    // Server-side data initialization
    data.user = gs.getUser().getName();
    data.userId = gs.getUserID();
    
    // Check if the request is for getting current authority limits for auto-population
    if (input && input.action === 'getCurrentLimits') {
        var jobCode = input.job_code;
        var limits = [];
        
        if (jobCode) {
            // Query the authority limits table for active limits matching this job code
            var gr = new GlideRecord('x_banun_bunow_si_0_authority_limits');
            gr.addQuery('job_code', jobCode);
            gr.addQuery('active', true);
            gr.orderByDesc('sys_created_on');
            gr.setLimit(1);
            gr.query();
            
            if (gr.next()) {
                var limit = {
                    // Credit limits
                    overdraft_external_accounts: gr.getValue('overdraft_external_accounts'),
                    overdraft_internal_accounts: gr.getValue('overdraft_internal_accounts'),
                    unavailable_funds_external_accounts: gr.getValue('unavailable_funds_external_accounts'),
                    unavailable_funds_internal_accounts: gr.getValue('unavailable_funds_internal_accounts'),
                    
                    // Non-credit limits
                    disbursement_ach: gr.getValue('disbursement_ach'),
                    disbursement_wire_transfer_external: gr.getValue('disbursement_wire_transfer_external'),
                    disbursement_wire_transfer_internal: gr.getValue('disbursement_wire_transfer_internal'),
                    disbursement_official_checks_external: gr.getValue('disbursement_official_checks_external'),
                    disbursement_official_checks_internal: gr.getValue('disbursement_official_checks_internal'),
                    check_cashing_on_us: gr.getValue('check_cashing_on_us'),
                    check_cashing_not_on_us: gr.getValue('check_cashing_not_on_us'),
                    remote_deposit: gr.getValue('remote_deposit'),
                    treasury_solutions_company_wire_limits: gr.getValue('treasury_solutions_company_wire_limits'),
                    fx_wire_limits: gr.getValue('fx_wire_limits')
                };
                
                limits.push(limit);
            }
        }
        
        data.limits = limits;
    }
})();
