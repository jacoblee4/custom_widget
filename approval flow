var SignatureHelper = Class.create();
SignatureHelper.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {

    initialize: function() {
        // Parse CEO identifiers from single pipe-separated property
        this.ceoIdentifiers = this._parseCEOIdentifiers();

        // Parse business line titles from property
        this.businessLineTitles = this._parseBusinessLineTitles();
    },

    /**
     * Parse CEO identifiers from system property
     * Format: "sys_id|title|officer_title|keyword" (pipe-separated)
     */
    _parseCEOIdentifiers: function() {
        var propertyValue = gs.getProperty('bunow.ceo.identifiers', '');
        gs.info('=== CEO Property Value: ' + propertyValue);
        
        var identifiers = {
            exactMatches: [],
            keywords: []
        };

        if (propertyValue) {
            var values = propertyValue.split('|');  // Using pipe delimiter
            for (var i = 0; i < values.length; i++) {
                var trimmedValue = values[i].trim();
                if (trimmedValue) {
                    var lowerValue = trimmedValue.toLowerCase();
                    // If it's a short keyword like "CEO", add to keywords for contains search
                    if (trimmedValue.length <= 5 && trimmedValue.toUpperCase() === trimmedValue) {
                        identifiers.keywords.push(lowerValue);
                        gs.info('=== Added CEO keyword: ' + lowerValue);
                    } else {
                        // Otherwise treat as exact match (sys_id, full titles, etc.)
                        identifiers.exactMatches.push(lowerValue);
                        gs.info('=== Added CEO exact match: ' + lowerValue);
                    }
                }
            }
        }

        gs.info('=== CEO Identifiers parsed - Keywords: ' + identifiers.keywords.join(', ') + ' | Exact: ' + identifiers.exactMatches.join(', '));
        return identifiers;
    },

    /**
     * Parse business line titles from system property
     */
    _parseBusinessLineTitles: function() {
        var propertyValue = gs.getProperty('bunow.authoirty.business.line.titles', '');
        gs.info('=== Business Line Titles Property: ' + propertyValue);
        
        var titles = [];

        if (propertyValue) {
            var values = propertyValue.split('|');  // Using pipe delimiter
            for (var i = 0; i < values.length; i++) {
                var trimmedValue = values[i].trim();
                if (trimmedValue) {
                    titles.push(trimmedValue);
                }
            }
        }

        gs.info('=== Business Line Titles parsed: ' + titles.join(', '));
        return titles;
    },

    /**
     * Find the Business Line Approver by traversing up the management chain
     */
    findBusinessLineApprover: function(requestedForSysId) {
        gs.info('=== Starting findBusinessLineApprover');
        
        var result = {
            found: false,
            approver_sys_id: '',
            is_ceo: false,
            error_message: ''
        };
        
        if (!requestedForSysId) {
            result.error_message = 'No requested for user provided';
            return result;
        }
        
        var currentUser = new GlideRecord('sys_user');
        if (!currentUser.get(requestedForSysId)) {
            result.error_message = 'Requested for user not found';
            return result;
        }
        
        var maxLevels = 20; // Prevent infinite loops
        var currentLevel = 0;
        
        while (currentUser && currentLevel < maxLevels) {
            var userTitle = currentUser.getValue('title') || '';
            var userOfficerTitle = currentUser.getValue('u_officer_title') || '';
            var userSysId = currentUser.getValue('sys_id');
            
            gs.info('=== Level ' + currentLevel + 
                    ' | Title: ' + userTitle + 
                    ' | Officer Title: ' + userOfficerTitle);
            
            // Check if current user is CEO (should never approve)
            if (this._isCEO(currentUser)) {
                result.is_ceo = true;
                result.error_message = 'CEO found in approval chain - cannot proceed';
                gs.info('=== CEO DETECTED!');
                return result;
            }
            
            // Check if current user has the required title
            var currentOfficerTitle = currentUser.getValue('u_officer_title') || '';
            gs.info('=== Checking if officer title "' + currentOfficerTitle + '" is in business line titles');
            
            if (this.businessLineTitles.indexOf(currentOfficerTitle) > -1) {
                result.found = true;
                result.approver_sys_id = currentUser.getValue('sys_id');
                gs.info('=== Business Line Approver FOUND with title: ' + currentOfficerTitle);
                return result;
            }
            
            // Move up to manager
            var managerSysId = currentUser.getValue('manager');
            if (!managerSysId) {
                result.error_message = 'No Business Line Approver found - reached top of hierarchy';
                gs.info('=== No manager found - reached top of hierarchy');
                break;
            }
            
            gs.info('=== Moving up to next manager');
            if (!currentUser.get(managerSysId)) {
                result.error_message = 'Manager record not found in chain';
                gs.info('=== Could not retrieve manager record');
                break;
            }
            
            currentLevel++;
        }
        
        if (currentLevel >= maxLevels) {
            result.error_message = 'Maximum hierarchy levels reached without finding approver';
            gs.info('=== Hit maximum levels limit');
        }
        
        return result;
    },

    /**
     * Check if approval should be auto-approved
     */
    shouldAutoApproveBusinessLine: function(openedBySysId, requestedForSysId) {
        // Auto-approve if:
        // 1. Opened By == Requested For AND the requester has the business line title
        
        if (openedBySysId !== requestedForSysId) {
            return false;
        }
        
        // Check if the requester/opener has the business line title
        var userGr = new GlideRecord('sys_user');
        if (userGr.get(openedBySysId)) {
            var userTitle = userGr.getValue('u_officer_title') || '';
            if (this.businessLineTitles.indexOf(userTitle) > -1) {
                return true;
            }
        }
        
        return false;
    },
    
    /**
     * Check if a user is the CEO by comparing against identifiers
     */
    _isCEO: function(userGr) {
        if (!userGr || !this.ceoIdentifiers) {
            gs.info('=== _isCEO: No user or no identifiers configured');
            return false;
        }
        
        // Get user values for exact match checking
        var sysId = (userGr.getValue('sys_id') || '').toLowerCase().trim();
        var title = (userGr.getValue('title') || '').toLowerCase().trim();
        var officerTitle = (userGr.getValue('u_officer_title') || '').toLowerCase().trim();

        gs.info('=== _isCEO checking - Title: ' + title + ' | Officer Title: ' + officerTitle);

        // Check exact matches first (sys_id, full titles)
        var exactMatches = this.ceoIdentifiers.exactMatches || [];
        
        for (var i = 0; i < exactMatches.length; i++) {
            var identifier = exactMatches[i];
            if (sysId === identifier || 
                title === identifier || 
                officerTitle === identifier) {
                gs.info('=== CEO MATCH on exact: ' + identifier);
                return true;
            }
        }
        
        // Check keyword contains (like "CEO" appearing anywhere in title fields)
        var keywords = this.ceoIdentifiers.keywords || [];
        
        for (var j = 0; j < keywords.length; j++) {
            var keyword = keywords[j];
            
            if ((title && title.indexOf(keyword) > -1) || 
                (officerTitle && officerTitle.indexOf(keyword) > -1)) {
                gs.info('=== CEO MATCH on keyword: ' + keyword);
                return true;
            }
        }
        
        gs.info('=== Not a CEO');
        return false;
    },

    type: 'SignatureHelper'
});









bunow.ceo.identifiers: 58299a41db2e574071cc71fa8c961908|Chairman, President and CEO|President/COO|CEO

bunow.authoirty.business.line.titles: Executive Vice President|Senior Executive Vice President|Sr Executive Vice President
