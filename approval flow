Updated SignatureHelper Script Include
Add these methods to your existing SignatureHelper:
javascriptvar SignatureHelper = Class.create();
SignatureHelper.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {

    // ... existing methods ...

    /**
     * Get the maximum value from credit or non-credit child record
     * @param {String} childSysId - sys_id of child record
     * @param {String} type - 'credit' or 'non_credit'
     * @return {Object} - Contains max_value and field_name
     */
    getMaxAuthorityValue: function(childSysId, type) {
        var result = {
            max_value: 0,
            field_name: '',
            all_values: {}
        };
        
        if (!childSysId) return result;
        
        var table = (type === 'credit') ? 
            'x_banun_bunow_si_0_credit_authority_limits' : 
            'x_banun_bunow_si_0_non_credit_authority_limits';
            
        var gr = new GlideRecord(table);
        if (!gr.get(childSysId)) return result;
        
        var values = {};
        var maxValue = 0;
        var maxFieldName = '';
        
        if (type === 'credit') {
            // Credit fields
            values = {
                'Overdraft Internal': parseFloat(gr.getValue('overdraft_internal_accounts') || 0),
                'Overdraft External': parseFloat(gr.getValue('overdraft_external_accounts') || 0),
                'Unavailable Funds Internal': parseFloat(gr.getValue('unavailable_funds_internal_accounts') || 0),
                'Unavailable Funds External': parseFloat(gr.getValue('unavailable_funds_external_accounts') || 0)
            };
        } else {
            // Non-credit fields
            values = {
                'ACH Disbursement': parseFloat(gr.getValue('disbursement_ach') || 0),
                'Wire Transfer External': parseFloat(gr.getValue('disbursement_wire_transfer_external') || 0),
                'Wire Transfer Internal': parseFloat(gr.getValue('disbursement_wire_transfer_internal') || 0),
                'Official Checks External': parseFloat(gr.getValue('disbursement_official_checks_external') || 0),
                'Official Checks Internal': parseFloat(gr.getValue('disbursement_official_checks_internal') || 0),
                'Check Cashing On-Us': parseFloat(gr.getValue('check_cashing_on_us') || 0),
                'Check Cashing Not On-Us': parseFloat(gr.getValue('check_cashing_not_on_us') || 0),
                'Remote Deposit': parseFloat(gr.getValue('remote_deposit') || 0),
                'Treasury Solutions': parseFloat(gr.getValue('treasury_solutions_company_wire_limits') || 0),
                'FX Wire Limits': parseFloat(gr.getValue('fx_wire_limits') || 0)
            };
        }
        
        // Find maximum value
        for (var fieldName in values) {
            if (values[fieldName] > maxValue) {
                maxValue = values[fieldName];
                maxFieldName = fieldName;
            }
        }
        
        result.max_value = maxValue;
        result.field_name = maxFieldName;
        result.all_values = values;
        
        return result;
    },
    
    /**
     * Check if approver has delegated authority for the amount
     * @param {String} approverSysId - sys_id of approver
     * @param {Float} amount - amount to check
     * @param {String} type - 'credit' or 'non_credit'
     * @return {Object} - Contains has_authority, threshold, and message
     */
    checkDelegatedAuthority: function(approverSysId, amount, type) {
        var result = {
            has_authority: false,
            threshold: 0,
            message: ''
        };
        
        if (!approverSysId || !amount) {
            result.message = 'Missing approver or amount';
            return result;
        }
        
        var table = (type === 'credit') ? 
            'x_banun_bunow_si_0_credit_officers' : 
            'x_banun_bunow_si_0_non_credit_officers';
            
        var gr = new GlideRecord(table);
        gr.addQuery('user', approverSysId);
        gr.addQuery('active', true);
        gr.query();
        
        if (gr.next()) {
            result.threshold = parseFloat(gr.getValue('authority_threshold') || 0);
            
            if (result.threshold > 0 && amount <= result.threshold) {
                result.has_authority = true;
                result.message = 'Approver has delegated authority. Threshold: $' + 
                    result.threshold.toLocaleString() + ' >= Request: $' + amount.toLocaleString();
            } else {
                result.message = 'Authority insufficient. Threshold: $' + 
                    result.threshold.toLocaleString() + ' < Request: $' + amount.toLocaleString();
            }
        } else {
            result.message = 'No delegated authority found for approver';
        }
        
        return result;
    },
    
    /**
     * Check if approver is the division head
     * @param {String} approverSysId - sys_id of approver  
     * @param {String} requestedForSysId - sys_id of requested for user
     * @return {Object} - Contains is_division_head and next_approver_sys_id
     */
    checkIfDivisionHead: function(approverSysId, requestedForSysId) {
        var result = {
            is_division_head: false,
            division_head_sys_id: '',
            next_approver_sys_id: ''
        };
        
        var userGr = new GlideRecord('sys_user');
        if (!userGr.get(requestedForSysId)) {
            return result;
        }
        
        var divisionHead = userGr.getValue('u_division_head');
        result.division_head_sys_id = divisionHead;
        
        if (divisionHead === approverSysId) {
            result.is_division_head = true;
        } else {
            // Get the division head's manager for next iteration
            if (divisionHead) {
                var dhGr = new GlideRecord('sys_user');
                if (dhGr.get(divisionHead)) {
                    result.next_approver_sys_id = dhGr.getValue('manager');
                }
            }
        }
        
        return result;
    },
    
    /**
     * Find next approver in hierarchy with sufficient authority
     * @param {String} startingApproverSysId - Where to start looking
     * @param {String} divisionHeadSysId - Division head sys_id (stop here)
     * @param {Float} amount - Amount needing approval
     * @param {String} type - 'credit' or 'non_credit'
     * @return {Object} - Contains found_approver, approver_sys_id, is_division_head
     */
    findHierarchicalApprover: function(startingApproverSysId, divisionHeadSysId, amount, type) {
        var result = {
            found_approver: false,
            approver_sys_id: '',
            is_division_head: false,
            reached_division_head: false,
            message: ''
        };
        
        var currentApprover = startingApproverSysId;
        var maxLevels = 10;
        var currentLevel = 0;
        
        while (currentApprover && currentLevel < maxLevels) {
            // Check if this is the CEO
            if (this._isCEO_check(currentApprover)) {
                result.message = 'CEO found in hierarchy - cannot proceed';
                return result;
            }
            
            // Check if this is the division head
            if (currentApprover === divisionHeadSysId) {
                result.reached_division_head = true;
                result.is_division_head = true;
                result.message = 'Reached division head without finding approver with authority';
                return result;
            }
            
            // Check if this person has authority
            var authCheck = this.checkDelegatedAuthority(currentApprover, amount, type);
            if (authCheck.has_authority) {
                result.found_approver = true;
                result.approver_sys_id = currentApprover;
                result.message = authCheck.message;
                return result;
            }
            
            // Move to next manager
            var userGr = new GlideRecord('sys_user');
            if (!userGr.get(currentApprover)) {
                break;
            }
            
            currentApprover = userGr.getValue('manager');
            currentLevel++;
        }
        
        result.message = 'No approver found in hierarchy';
        return result;
    },
    
    /**
     * Helper to check if a sys_id is the CEO
     */
    _isCEO_check: function(userSysId) {
        var userGr = new GlideRecord('sys_user');
        if (userGr.get(userSysId)) {
            return this._isCEO(userGr);
        }
        return false;
    },
    
   /**
 * Check if we should use committee voting
 * @param {String} type - 'credit' or 'non_credit'
 * @return {Object} - Contains use_committee and approval_count_needed
 */
shouldUseCommittee: function(type) {
    var result = {
        use_committee: false,
        member_count: 0,
        approval_count_needed: 0
    };
    
    var table = (type === 'credit') ? 
        'x_banun_bunow_si_0_credit_officers' : 
        'x_banun_bunow_si_0_non_credit_officers';
    
    // Just count active members
    var gr = new GlideRecord(table);
    gr.addQuery('active', true);
    gr.query();
    
    result.member_count = gr.getRowCount();
    
    if (result.member_count >= 3) {
        result.use_committee = true;
        result.approval_count_needed = Math.ceil(result.member_count / 2);
    }
    
    return result;
},

    type: 'SignatureHelper'
});
