var SignatureHelper = Class.create();
SignatureHelper.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {

    initialize: function() {
        // Parse CEO identifiers from single comma-separated property
        this.ceoIdentifiers = this._parseCEOIdentifiers();

        // Parse business line titles from property
        this.businessLineTitles = this._parseBusinessLineTitles();
    },

    /**
     * Parse CEO identifiers from system property
     * Format: "sys_id,title,officer_title,keyword" (comma-separated)
     */
    _parseCEOIdentifiers: function() {
        var propertyValue = gs.getProperty('bunow.ceo.identifiers', '');
        var identifiers = {
            exactMatches: [],
            keywords: []
        };

        if (propertyValue) {
            var values = propertyValue.split(',');
            for (var i = 0; i < values.length; i++) {
                var trimmedValue = values[i].trim();
                if (trimmedValue) {
                    var lowerValue = trimmedValue.toLowerCase();
                    // If it's a short keyword like "CEO", add to keywords for contains search
                    if (trimmedValue.length <= 5 && trimmedValue.toUpperCase() === trimmedValue) {
                        identifiers.keywords.push(lowerValue);
                    } else {
                        // Otherwise treat as exact match (sys_id, full titles, etc.)
                        identifiers.exactMatches.push(lowerValue);
                    }
                }
            }
        }

        return identifiers;
    },

    /**
     * Parse business line titles from system property
     */
    _parseBusinessLineTitles: function() {
        var propertyValue = gs.getProperty('bunow.authoirty.business.line.titles', '');
        var titles = [];

        if (propertyValue) {
            var values = propertyValue.split(',');
            for (var i = 0; i < values.length; i++) {
                var trimmedValue = values[i].trim();
                if (trimmedValue) {
                    titles.push(trimmedValue);
                }
            }
        }

        return titles;
    },

	/**
     * Find the Business Line Approver by traversing up the management chain
     */
    findBusinessLineApprover: function(requestedForSysId) {
        var result = {
            found: false,
            approver_sys_id: '',
            is_ceo: false,
            error_message: ''
        };
        
        if (!requestedForSysId) {
            result.error_message = 'No requested for user provided';
            return result;
        }
        
        var currentUser = new GlideRecord('sys_user');
        if (!currentUser.get(requestedForSysId)) {
            result.error_message = 'Requested for user not found';
            return result;
        }
        
        var maxLevels = 20; // Prevent infinite loops
        var currentLevel = 0;
        
        while (currentUser && currentLevel < maxLevels) {
            // Check if current user is CEO (should never approve)
            if (this._isCEO(currentUser)) {
                result.is_ceo = true;
                result.error_message = 'CEO found in approval chain - cannot proceed';
                return result;
            }
            
            // Check if current user has the required title
            var currentTitle = currentUser.getValue('u_officer_title') || '';
            if (this.businessLineTitles.indexOf(currentTitle) > -1) {
                result.found = true;
                result.approver_sys_id = currentUser.getValue('sys_id');
                return result;
            }
            
            // Move up to manager
            var managerSysId = currentUser.getValue('manager');
            if (!managerSysId) {
                result.error_message = 'No Business Line Approver found.y';
                break;
            }
            
            if (!currentUser.get(managerSysId)) {
                result.error_message = 'Manager record not found in chain';
                break;
            }
            
            currentLevel++;
        }
        
        if (currentLevel >= maxLevels) {
            result.error_message = 'Maximum hierarchy levels reached without finding approver';
        }
        
        return result;
    },


    /**
     * Check if approval should be auto-approved
     */
    shouldAutoApproveBusinessLine: function(openedBySysId, requestedForSysId, approverSysId) {
        // Auto-approve if:
        // 1. Opened By == Requested For AND the requester has the business line title
        
        if (openedBySysId !== requestedForSysId) {
            return false;
        }
        
        // Check if the requester/opener has the business line title
        var userGr = new GlideRecord('sys_user');
        if (userGr.get(openedBySysId)) {
            var userTitle = userGr.getValue('u_officer_title') || '';
            if (this.businessLineTitles.indexOf(userTitle) > -1) {
                return true;
            }
        }
        
        return false;
    },
    
    /**
     * Check if a user is the CEO by comparing against identifiers
     */
    _isCEO: function(userGr) {
        if (!userGr || !this.ceoIdentifiers) {
            return false;
        }
        
        // Get user values for exact match checking
        var sysId = (userGr.getValue('sys_id') || '').toLowerCase().trim();
        var title = (userGr.getValue('title') || '').toLowerCase().trim();
        var officerTitle = (userGr.getValue('u_officer_title') || '').toLowerCase().trim();
        
        // Check exact matches first (sys_id, full titles)
        var exactMatches = this.ceoIdentifiers.exactMatches || [];
        for (var i = 0; i < exactMatches.length; i++) {
            var identifier = exactMatches[i];
            if (sysId === identifier || 
                title === identifier || 
                officerTitle === identifier) {
                return true;
            }
        }
        
        // Check keyword contains (like "CEO" appearing anywhere in title fields)
        var keywords = this.ceoIdentifiers.keywords || [];
        for (var j = 0; j < keywords.length; j++) {
            var keyword = keywords[j];
            if ((title && title.indexOf(keyword) > -1) || 
                (officerTitle && officerTitle.indexOf(keyword) > -1) ||
                (jobTitle && jobTitle.indexOf(keyword) > -1)) {
                gs.info('AuthorityLimit: CEO keyword "' + keyword + '" found in user titles');
                return true;
            }
        }
        
        return false;
    },

    type: 'SignatureHelper'
});
