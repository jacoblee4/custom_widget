Step 5: Build the Flow Logic
Now let's add the actions in order:

Action 1: Update Child to In Progress

Add Action → ServiceNow Core → Update Record
Record: Inputs → child_record
Fields to Update:

state: in_progress
stage: 2 (Authority Review)




Action 2: Get Maximum Amount

Add Action → Flow Logic → Set Flow Variables
Variable: max_amount
Script:

javascript(function() {
    var helper = new x_banun_bunow_si_0.SignatureHelper();
    var result = helper.getMaxAuthorityValue(
        inputs.child_record.sys_id,
        'credit'
    );
    
    // Log to work notes
    var childGr = new GlideRecord('x_banun_bunow_si_0_credit_authority_limits');
    if (childGr.get(inputs.child_record.sys_id)) {
        childGr.work_notes = 'Maximum credit value: $' + result.max_value.toLocaleString() + 
            ' (Field: ' + result.field_name + ')';
        childGr.update();
    }
    
    return result.max_value;
})();

Action 3: Check Business Line Approver Authority

Add Action → Flow Logic → Set Flow Variables
Variable: has_authority
Script:

javascript(function() {
    var helper = new x_banun_bunow_si_0.SignatureHelper();
    var result = helper.checkDelegatedAuthority(
        inputs.business_line_approver.sys_id,
        fd_data.max_amount,
        'credit'
    );
    
    // Log result
    var childGr = new GlideRecord('x_banun_bunow_si_0_credit_authority_limits');
    if (childGr.get(inputs.child_record.sys_id)) {
        childGr.work_notes = result.message;
        childGr.update();
    }
    
    return result.has_authority;
})();

Action 4: If - Has Authority

Add Action → Flow Logic → If
Condition: Flow Variables → has_authority is true

THEN Branch (Has Authority):
Action 4.1: Check if Same Person

Add Action → Flow Logic → Set Flow Variables
Variable: is_same_person
Script:

javascriptreturn (inputs.business_line_approver.sys_id === inputs.requested_for.sys_id);
Action 4.2: If - Same Person Check

Add Action → Flow Logic → If
Condition: Flow Variables → is_same_person is true

THEN (Same Person - Need CRMC):
Action 4.2.1: Look Up CRMC Group

Add Action → ServiceNow Core → Look Up Records
Table: sys_user_group
Conditions: Name is CRMC
Store first record as: crmc_group

Action 4.2.2: Ask for Approval - CRMC

Add Action → ServiceNow Core → Ask for Approval
Record: Inputs → child_record
Groups from: Data pill → crmc_group (from 4.2.1)
Rules: Anyone approves

Action 4.2.3: Update Based on Approval

Add Action → Flow Logic → If
Condition: 4.2.2 - Ask for Approval → State is Approved

THEN:

Update Record → child_record → state = closed_complete, approval = approved
Set Flow Variables → outputs.approved = true, outputs.approval_method = CRMC

ELSE:

Update Record → child_record → state = closed_incomplete, approval = rejected
Set Flow Variables → outputs.approved = false

ELSE (Different Person - Auto Approve):
Action 4.2.4: Auto Approve

Add Action → ServiceNow Core → Update Record
Record: Inputs → child_record
Fields:

state: closed_complete
approval: approved
work_notes: Auto-approved: Business Line Approver has sufficient delegated authority


Then Set Flow Variables → outputs.approved = true, outputs.approval_method = auto


ELSE Branch (No Authority - Complex Path):
Action 5: Check Division Head

Add Action → Flow Logic → Set Flow Variables
Variable: is_division_head
Script:

javascript(function() {
    var helper = new x_banun_bunow_si_0.SignatureHelper();
    var result = helper.checkIfDivisionHead(
        inputs.business_line_approver.sys_id,
        inputs.requested_for.sys_id
    );
    
    fd_data.division_head_sys_id = result.division_head_sys_id;
    fd_data.current_approver_sys_id = result.next_approver_sys_id;
    
    return result.is_division_head;
})();
Action 6: If - Is Division Head

Add Action → Flow Logic → If
Condition: Flow Variables → is_division_head is true

THEN (Is Division Head - Go to Committee):
Skip to Action 8 (Committee logic)
ELSE (Not Division Head - Hierarchical Search):
Action 7: Find Hierarchical Approver

Add Action → Flow Logic → Set Flow Variables
Variable: current_approver_sys_id
Script:

javascript(function() {
    var helper = new x_banun_bunow_si_0.SignatureHelper();
    var result = helper.findHierarchicalApprover(
        fd_data.current_approver_sys_id,  // Starting from division head's manager
        fd_data.division_head_sys_id,
        fd_data.max_amount,
        'credit'
    );
    
    // Update stage to show escalation
    var childGr = new GlideRecord('x_banun_bunow_si_0_credit_authority_limits');
    if (childGr.get(inputs.child_record.sys_id)) {
        childGr.stage = '3'; // Division Executive Review
        childGr.work_notes = result.message;
        childGr.update();
    }
    
    if (result.reached_ceo || result.reached_division_head) {
        // Need committee
        return '';
    } else if (result.found_approver) {
        // Found someone to approve
        return result.approver_sys_id;
    }
    
    return '';
})();
Action 7.1: If - Found Approver

Add Action → Flow Logic → If
Condition: Flow Variables → current_approver_sys_id is not empty

THEN:

Look Up User (current_approver_sys_id)
Ask for Approval from that user
Update based on response (like in 4.2.3)

ELSE:
Continue to Committee (Action 8)

Action 8: Committee Check

Add Action → Flow Logic → Set Flow Variables
Variable: use_committee
Script:

javascript(function() {
    var helper = new x_banun_bunow_si_0.SignatureHelper();
    var result = helper.shouldUseCommittee('credit');
    
    fd_data.approval_count_needed = result.approval_count_needed;
    
    // Update stage
    var childGr = new GlideRecord('x_banun_bunow_si_0_credit_authority_limits');
    if (childGr.get(inputs.child_record.sys_id)) {
        childGr.stage = '4'; // CRMC Review
        childGr.update();
    }
    
    return result.use_committee;
})();
Action 9: If - Use Committee

Add Action → Flow Logic → If
Condition: Flow Variables → use_committee is true

THEN (Committee Voting):
Action 9.1: Create Committee Approvals

Add Action → Flow Logic → Run Script

javascript(function() {
    // Get all committee members
    var gr = new GlideRecord('x_banun_bunow_si_0_crmc_delegated_authority');
    gr.addQuery('active', true);
    gr.query();
    
    var approvalGroup = new GlideRecord('sysapproval_group');
    approvalGroup.initialize();
    approvalGroup.name = 'CRMC Committee - ' + inputs.child_record.number;
    approvalGroup.parent = inputs.child_record.sys_id;
    var groupId = approvalGroup.insert();
    
    while (gr.next()) {
        var approval = new GlideRecord('sysapproval_approver');
        approval.initialize();
        approval.source_table = 'x_banun_bunow_si_0_credit_authority_limits';
        approval.document_id = inputs.child_record.sys_id;
        approval.approver = gr.getValue('user');
        approval.state = 'requested';
        approval.approval_group = groupId;
        approval.insert();
    }
    
    return groupId;
})();
Then wait for majority approval...
ELSE (Send to CRMC Group):
Same as Action 4.2.1 and 4.2.2

Step 6: Test the Subflow

Click Test
Select test inputs
Run and verify each path

Step 7: Create Non-Credit Version

Duplicate this subflow
Rename to Authority Limit - Non-Credit Approval
Change:

Input table references to non_credit tables
'credit' to 'non_credit' in script calls
'CRMC' to 'ORMC' in group lookups



Does this help? Which action would you like me to clarify further?
