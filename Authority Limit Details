<!-- ============================================ -->
<!-- HTML  -->
<!-- ============================================ -->

<div class="widget-container" ng-show="c.shouldShowWidget()">
    <div class="widget-header">
        <h2>Authority Limit Details</h2>
    </div>
    
    <!-- Show authority selection and details for new/change requests -->
    <div class="main-content" ng-hide="c.isRemoveAuthority()">
        <div class="left-column">
            <div class="checkbox-group" id="nonCreditGroup">
                <input type="checkbox" id="nonCreditAuth" name="non_credit_authority_check">
                <label for="nonCreditAuth">Non-Credit Authority</label>
            </div>
            
            <div id="nonCreditSection" class="section">
                <h3>Non-Credit Authority Limits</h3>
                
                <!-- Disbursement Section -->
                <div class="form-group">
                    <label for="disbursement">
                        Disbursement 
                        <span class="info-icon" title="Disbursements – This authority provides approval limits for the disbursement of ACH, Wire Transfers, and/or Official Check transaction types based on the requested and approved selections. Internal Accounts are defined as BankUnited owned and controlled accounts.
If applicable: Choose the appropriate transaction type(s) and enter the requested disbursement amount. If the transaction type(s) should be restricted to internal accounts, select the Internal Accounts Only option.">ⓘ</span>
                    </label>
                    <div class="currency-wrapper">
                        <span class="currency-symbol">$</span>
                        <input type="text" id="disbursement" class="form-control" placeholder="">
                    </div>
                </div>
                
                <div class="disbursement-options">
                    <div class="checkbox-group-small">
                        <input type="checkbox" id="achCheck">
                        <label for="achCheck">ACH</label>
                    </div>
                    
                    <div class="checkbox-group-small">
                        <input type="checkbox" id="wireTransferCheck">
                        <label for="wireTransferCheck">Wire Transfer</label>
                    </div>
                    
                    <div class="account-type-checkboxes" id="wireAccountTypes" style="display: none;">
                        <div class="indented-checkbox">
                            <input type="checkbox" id="wireInternal">
                            <label for="wireInternal">Internal Accounts</label>
                        </div>
                        <div class="indented-checkbox">
                            <input type="checkbox" id="wireExternal">
                            <label for="wireExternal">External Accounts</label>
                        </div>
                    </div>
                    
                    <div class="checkbox-group-small">
                        <input type="checkbox" id="officialChecksCheck">
                        <label for="officialChecksCheck">Official Checks</label>
                    </div>
                    
                    <div class="account-type-checkboxes spaced-indent" id="checksAccountTypes" style="display: none;">
                        <div class="indented-checkbox">
                            <input type="checkbox" id="checksInternal">
                            <label for="checksInternal">Internal Accounts</label>
                        </div>
                        <div class="indented-checkbox">
                            <input type="checkbox" id="checksExternal">
                            <label for="checksExternal">External Accounts</label>
                        </div>
                    </div>
                </div>
                
                <!-- Check Cashing Section -->
                <div class="subsection">
                    <h4>
                        Check Cashing & Cash Withdrawal 
                        <span class="info-icon" title="Check Cashing – This authority provides the ability to approve cash withdrawals, the cashing of checks drawn on BankUnited (On-Us), and checks drawn on another institution (not On-Us) that are being cashed by BankUnited. Approval limit is based on the selected options and amounts.
If applicable: Choose the appropriate option(s) and enter the requested approval limit amount.">ⓘ</span>
                    </h4>
                    <div class="form-group">
                        <label for="checkCashingOnUs">On-Us (Checks & Cash Withdrawals)</label>
                        <div class="currency-wrapper">
                            <span class="currency-symbol">$</span>
                            <input type="text" id="checkCashingOnUs" class="form-control" placeholder="">
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="checkCashingNotOnUs">Not On-Us (Checks)</label>
                        <div class="currency-wrapper">
                            <span class="currency-symbol">$</span>
                            <input type="text" id="checkCashingNotOnUs" class="form-control" placeholder="">
                        </div>
                    </div>
                </div>
                
                <!-- Other Fields Section -->
                <div class="subsection">
                    <div class="form-group">
                        <label for="remoteDeposit">
                            Remote Deposit 
                            <span class="info-icon" title="Remote Deposit – This authority provides the ability to approve external client Remote Deposit limits, utilizing the TS Daily Remote Deposit Capture Limit Approval Form.
If applicable: Enter the requested Remote Deposit Capture limit amount.">ⓘ</span>
                        </label>
                        <div class="currency-wrapper">
                            <span class="currency-symbol">$</span>
                            <input type="text" id="remoteDeposit" class="form-control" placeholder="">
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="treasurySolutions">
                            Treasury Solutions Company Wire Limits 
                            <span class="info-icon" title="Treasury Solutions Company Wire Limits – This authority provides the ability to approve external client wire limits, utilizing the TS Daily Wire Limit Approval Form. This external client limit applies to the Treasury Solution systems (i.e. BFS/Lynx, OBS).
If applicable: Enter the requested wire limit amount.">ⓘ</span>
                        </label>
                        <div class="currency-wrapper">
                            <span class="currency-symbol">$</span>
                            <input type="text" id="treasurySolutions" class="form-control" placeholder="">
                        </div>
                    </div>
                    <div class="form-group">
                        <label for="fxWireLimits">
                            FX Wire Limits 
                            <span class="info-icon" title="FX Wire Limits – This authority provides the ability to approve external client wire limits, utilizing the BankUnitedFX Wire Limit Approval Form. This external client limit applies to the Treasury Solution system BankUnitedFX.
If applicable: Enter the requested wire limit amount.">ⓘ</span>
                        </label>
                        <div class="currency-wrapper">
                            <span class="currency-symbol">$</span>
                            <input type="text" id="fxWireLimits" class="form-control" placeholder="">
                        </div>
                    </div>
                </div>
            </div>
        </div>

        <div class="right-column">
            <div class="checkbox-group" id="creditGroup">
                <input type="checkbox" id="creditAuth" name="credit_authority_check">
                <label for="creditAuth">Credit Authority</label>
            </div>
            
            <div id="creditSection" class="section">
                <h3>Credit Authority Limits</h3>
                
                <!-- Overdraft Section -->
                <div class="form-group">
                    <label for="overdraft">
                        Overdraft 
                        <span class="info-icon" title="Overdraft – This authority provides approval limits for Overdraft transactions based on the requested and approved selections. Internal Accounts are defined as BankUnited owned and controlled accounts.
If applicable: Enter the requested approval amount. If the authority type should be restricted to internal accounts ONLY, select the appropriate option.">ⓘ</span>
                    </label>
                    <div class="currency-wrapper">
                        <span class="currency-symbol">$</span>
                        <input type="text" id="overdraft" class="form-control" placeholder="">
                    </div>
                    <div class="account-type-checkboxes">
                        <div class="indented-checkbox">
                            <input type="checkbox" id="overdraftInternal">
                            <label for="overdraftInternal">Internal Accounts</label>
                        </div>
                        <div class="indented-checkbox">
                            <input type="checkbox" id="overdraftExternal">
                            <label for="overdraftExternal">External Accounts</label>
                        </div>
                    </div>
                </div>
                
                <!-- Unavailable Funds Section -->
                <div class="form-group">
                    <label for="unavailableFunds">
                        Unavailable Funds 
                        <span class="info-icon" title="Unavailable Funds – This authority provides approval limits for Unavailable Funds transactions based on the requested and approved selections. Internal Accounts are defined as BankUnited owned and controlled accounts.
If applicable: Enter the requested approval amount. If the authority type should be restricted to internal accounts ONLY, select the appropriate option.">ⓘ</span>
                    </label>
                    <div class="currency-wrapper">
                        <span class="currency-symbol">$</span>
                        <input type="text" id="unavailableFunds" class="form-control" placeholder="">
                    </div>
                    <div class="account-type-checkboxes">
                        <div class="indented-checkbox">
                            <input type="checkbox" id="unavailableInternal">
                            <label for="unavailableInternal">Internal Accounts</label>
                        </div>
                        <div class="indented-checkbox">
                            <input type="checkbox" id="unavailableExternal">
                            <label for="unavailableExternal">External Accounts</label>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Justification Section - Always show when widget is visible -->
    <div id="justificationSection" class="justification-section active">
        <h3>Justification</h3>
        <div class="info-message" ng-hide="c.isRemoveAuthority()">
            Using the text box below, please provide a detailed justification for this request. For New Authority or Limit Change requests, include what the authority will be used for (i.e. The approval of Loan Fundings, Customer Transactions, Cash Management, etc.).
        </div>
        <div class="info-message" ng-show="c.isRemoveAuthority()">
            Please provide a detailed justification for removing all existing authority limits for this job code.
        </div>
        <div class="form-group">
            <label for="businessNeed">Overall Business Need <span class="required-asterisk">*</span></label>
            <textarea id="businessNeed" class="form-control textarea"></textarea>
        </div>
    </div>
</div>


<!-- ============================================ -->
<!-- CSS -->
<!-- ============================================ -->

.widget-container {
    max-width: 900px;
    margin: 0 auto;
    background: white;
    border-radius: 8px;
    box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
    padding: 24px;
}

.widget-header {
    margin-bottom: 24px;
    padding-bottom: 16px;
    border-bottom: 2px solid #e8e8e8;
    
    h2 {
        color: #333;
        font-size: 20px;
        font-weight: 600;
        margin: 0;
    }
}

.main-content {
    display: grid;
    grid-template-columns: 1fr 1fr;
    gap: 30px;
    margin-bottom: 24px;
}

.left-column, .right-column {
    display: flex;
    flex-direction: column;
    gap: 20px;
}

.checkbox-group {
    display: flex;
    align-items: center;
    padding: 12px 16px;
    background: #f8f9fa;
    border: 1px solid #dee2e6;
    border-radius: 6px;
    cursor: pointer;
    transition: all 0.2s ease;
    
    &:hover {
        background: #e9ecef;
        border-color: #adb5bd;
    }
    
    &.active {
        background: #e7f5ff;
        border-color: #339af0;
    }
    
    input[type="checkbox"] {
        margin-right: 10px;
        width: 18px;
        height: 18px;
        cursor: pointer;
    }
    
    label {
        cursor: pointer;
        font-size: 15px;
        color: #333;
        font-weight: 500;
        user-select: none;
        margin: 0;
    }
}

.section {
    display: none;
    padding: 20px;
    background: #f8f9fa;
    border: 1px solid #dee2e6;
    border-radius: 6px;
    
    &.active {
        display: block;
    }
    
    h3 {
        color: #495057;
        font-size: 16px;
        font-weight: 600;
        margin: 0 0 16px 0;
        padding-bottom: 8px;
        border-bottom: 1px solid #dee2e6;
    }
}

.form-group {
    margin-bottom: 16px;
    
    &:last-child {
        margin-bottom: 0;
    }
    
    label {
        display: block;
        margin-bottom: 6px;
        color: #495057;
        font-size: 14px;
        font-weight: 500;
    }
}

.form-control {
    width: 100%;
    padding: 8px 12px;
    border: 1px solid #ced4da;
    border-radius: 4px;
    font-size: 14px;
    transition: border-color 0.15s ease-in-out;
    
    &:focus {
        outline: none;
        border-color: #339af0;
        box-shadow: 0 0 0 2px rgba(51, 154, 240, 0.1);
    }
    
    &.textarea {
        min-height: 120px;
        resize: vertical;
        font-family: inherit;
    }
}

.currency-wrapper {
    position: relative;
    
    .currency-symbol {
        position: absolute;
        left: 12px;
        top: 50%;
        transform: translateY(-50%);
        color: #6c757d;
        font-weight: 500;
        z-index: 1;
    }
    
    .form-control {
        padding-left: 28px;
    }
}

.justification-section {
    display: none;
    padding: 20px;
    background: #f8f9fa;
    border: 1px solid #dee2e6;
    border-radius: 6px;
    
    &.active {
        display: block;
    }
    
    h3 {
        color: #495057;
        font-size: 16px;
        font-weight: 600;
        margin: 0 0 12px 0;
    }
}

.justification-section .form-group label {
    color: #212529;
    font-weight: 600;
    font-size: 15px;
    margin-bottom: 8px;
}

.info-message {
    background: transparent;
    padding: 0;
    border-radius: 0;
    margin-bottom: 16px;
    font-size: 14px;
    color: #6c757d;
    line-height: 1.5;
    border-left: none;
    font-style: normal;
    font-weight: normal;
}

.disbursement-options {
    margin-top: 15px;
    padding-left: 15px;
}

.checkbox-group-small {
    display: flex;
    align-items: center;
    margin-bottom: 10px;
    
    input[type="checkbox"] {
        margin-right: 8px;
        width: 16px;
        height: 16px;
    }
    
    label {
        font-size: 14px;
        color: #495057;
        margin: 0;
        cursor: pointer;
    }
}

.account-type-checkboxes {
    margin-top: 8px;
    margin-left: 25px;
}

.indented-checkbox {
    display: flex;
    align-items: center;
    margin-bottom: 6px;
    
    input[type="checkbox"] {
        margin-right: 8px;
        width: 14px;
        height: 14px;
    }
    
    label {
        font-size: 13px;
        color: #6c757d;
        margin: 0;
        cursor: pointer;
    }
    
    &:last-child {
        margin-bottom: 0;
    }
}

.subsection {
    margin-top: 25px;
    padding-top: 20px;
    border-top: 1px solid #dee2e6;
    
    h4 {
        color: #495057;
        font-size: 15px;
        font-weight: 600;
        margin: 0 0 15px 0;
    }
}

.required-asterisk {
    color: #d9534f;
    font-weight: bold;
    margin-left: 3px;
}

.info-icon {
    display: inline-block;
    width: 16px;
    height: 16px;
    background-color: #17a2b8;
    color: white;
    border-radius: 50%;
    text-align: center;
    font-size: 12px;
    line-height: 16px;
    margin-left: 5px;
    cursor: help;
    font-weight: normal;
}

.spaced-indent {
    margin-top: 12px !important;
}

@media (max-width: 768px) {
    .main-content {
        grid-template-columns: 1fr;
    }
}

.checkbox-group.disabled {
    opacity: 0.7;
    cursor: not-allowed;
    
    input[type="checkbox"] {
        pointer-events: none;
        cursor: not-allowed;
    }
    
    label {
        cursor: not-allowed;
    }
}


<!-- ============================================ -->
<!-- CLIENT CONTROLLER -->
<!-- ============================================ -->

api.controller = function($scope, $window, spUtil) {
    var c = this;
    var g_form = $scope.page.g_form;

    // Add request type and job code tracking
    c.requestType = '';
    c.jobCode = '';
    c.existingLimits = null;
    c.originalLoadedValues = null;

    // Widget data model - stores all form state (updated with new fields)
    c.authorityData = {
        non_credit_checked: false,
        credit_checked: false,
        disbursement: '',
        ach_checked: false,
        wire_transfer_checked: false,
        wire_internal: false,
        wire_external: false,
        official_checks_checked: false,
        checks_internal: false,
        checks_external: false,
        check_cashing_on_us: '',
        check_cashing_not_on_us: '',
        remote_deposit: '',
        treasury_solutions_company_wire_limits: '',
        fx_wire_limits: '',
        overdraft: '',
        overdraft_internal: false,
        overdraft_external: false,
        unavailable_funds: '',
        unavailable_internal: false,
        unavailable_external: false,
        overall_business_need: ''
    };

    c.$onInit = function() {
        setTimeout(function() {
            initializeWidget();
        }, 500);
    };

    // Check if current request is remove authority
    c.isRemoveAuthority = function() {
        return c.requestType === 'remove_authority';
    };

    // Determine if widget should be visible
    c.shouldShowWidget = function() {
        return c.requestType && (c.requestType === 'new_authority' || c.requestType === 'change_to_existing_authority' || c.requestType === 'remove_authority');
    };

    // Get request type from g_form
    c.getRequestType = function() {
        try {
            var requestType = '';

            if (typeof g_form !== 'undefined' && g_form.getValue) {
                requestType = g_form.getValue('request_type');
                if (requestType) return requestType;
            }

            if (window.parent && window.parent.g_form && window.parent.g_form.getValue) {
                requestType = window.parent.g_form.getValue('request_type');
                if (requestType) return requestType;
            }

            var requestTypeField = document.querySelector('select[name="request_type"], [data-name="request_type"] select');
            if (requestTypeField && requestTypeField.value) {
                return requestTypeField.value;
            }

            if (c.requestType) {
                return c.requestType;
            }

        } catch (e) {
            if (c.requestType) {
                return c.requestType;
            }
        }
        return '';
    };

    // Get job code from g_form
    c.getJobCode = function() {
        try {
            var jobCode = '';

            if (typeof g_form !== 'undefined' && g_form.getValue) {
                jobCode = g_form.getValue('job_code');
                if (jobCode) return jobCode;
            }

            if (window.parent && window.parent.g_form && window.parent.g_form.getValue) {
                jobCode = window.parent.g_form.getValue('job_code');
                if (jobCode) return jobCode;
            }

            var jobCodeField = document.querySelector('select[name="job_code"], [data-name="job_code"] select, input[name="job_code"], [data-name="job_code"] input');
            if (jobCodeField && jobCodeField.value) {
                return jobCodeField.value;
            }

        } catch (e) {
            console.log('Error getting job code:', e);
        }
        return '';
    };

    // Currency formatting utilities - UPDATED to remove decimals
    c.formatCurrency = function(value) {
        if (!value) return '';
        // Remove all non-digit characters
        var numStr = value.toString().replace(/[^\d]/g, '');
        // Add comma separators
        var formattedInteger = numStr.replace(/\B(?=(\d{3})+(?!\d))/g, ',');
        return formattedInteger;
    };

    c.getCurrencyValue = function(formattedValue) {
        if (!formattedValue) return '';
        // Remove all non-digit characters
        return formattedValue.replace(/[^\d]/g, '');
    };

    // Helper function to check if value is non-zero
    c.isNonZeroValue = function(value) {
        if (!value) return false;
        var numValue = parseFloat(value);
        return !isNaN(numValue) && numValue !== 0;
    };

    // Check if any values have changed from original
    c.hasValuesChanged = function() {
        if (!c.originalLoadedValues) return true;

        for (var key in c.originalLoadedValues) {
            if (c.originalLoadedValues.hasOwnProperty(key)) {
                if (key === 'overall_business_need') continue;

                if (c.authorityData[key] !== c.originalLoadedValues[key]) {
                    return true;
                }
            }
        }

        return false;
    };

    // Validation logic - UPDATED with bidirectional credit validation
    c.validateForm = function() {
        var errors = [];
        var currentRequestType = c.getRequestType();

        // For remove authority requests, skip client validation
        if (currentRequestType === 'remove_authority' || c.requestType === 'remove_authority') {
            g_form.setValue('form_validation_errors', '');
            g_form.setValue('form_is_valid', 'true');
            return true;
        }

        // Business justification required for all request types
        if (!c.authorityData.overall_business_need || c.authorityData.overall_business_need.trim() === '') {
            errors.push('Overall Business Need is required');
        }

        // Must select at least one authority type
        if (!c.authorityData.non_credit_checked && !c.authorityData.credit_checked) {
            errors.push('You must select at least one authority type (Credit Authority or Non-Credit Authority)');
        }

        // For change requests, ensure at least one value has changed
        if (currentRequestType === 'change_to_existing_authority' && c.originalLoadedValues) {
            if (!c.hasValuesChanged()) {
                errors.push('At least one authority limit value must be changed for a Change to Existing Authority request');
            }
        }

        // Non-credit authority validation
        if (c.authorityData.non_credit_checked) {
            var hasNonCreditValue = c.authorityData.disbursement || c.authorityData.check_cashing_on_us ||
                c.authorityData.check_cashing_not_on_us || c.authorityData.remote_deposit ||
                c.authorityData.treasury_solutions_company_wire_limits || c.authorityData.fx_wire_limits;

            if (!hasNonCreditValue) {
                errors.push('If Non-Credit Authority is selected, at least one currency field must have a value');
            }

            if (c.authorityData.disbursement) {
                if (!c.authorityData.ach_checked &&
                    !c.authorityData.wire_transfer_checked &&
                    !c.authorityData.official_checks_checked) {
                    errors.push('If Disbursement amount is entered, you must select at least one option: ACH, Wire Transfer, or Official Checks');
                }

                // Validate Wire Transfer account types
                if (c.authorityData.wire_transfer_checked) {
                    if (!c.authorityData.wire_internal && !c.authorityData.wire_external) {
                        errors.push('If Wire Transfer is selected, you must choose at least one account type (Internal or External)');
                    }
                }

                // Validate Official Checks account types
                if (c.authorityData.official_checks_checked) {
                    if (!c.authorityData.checks_internal && !c.authorityData.checks_external) {
                        errors.push('If Official Checks is selected, you must choose at least one account type (Internal or External)');
                    }
                }
            }
        }

        // Credit authority validation - UPDATED WITH BIDIRECTIONAL VALIDATION
        if (c.authorityData.credit_checked) {
            var hasCreditValue = c.authorityData.overdraft || c.authorityData.unavailable_funds;
            var hasOverdraftAccountType = c.authorityData.overdraft_internal || c.authorityData.overdraft_external;
            var hasUnavailableAccountType = c.authorityData.unavailable_internal || c.authorityData.unavailable_external;

            if (!hasCreditValue && !hasOverdraftAccountType && !hasUnavailableAccountType) {
                errors.push('If Credit Authority is selected, at least one currency field must have a value');
            }

            // Overdraft bidirectional validation
            if (c.authorityData.overdraft && !hasOverdraftAccountType) {
                errors.push('If Overdraft amount is entered, you must choose at least one account type (Internal or External)');
            }
            if (hasOverdraftAccountType && !c.authorityData.overdraft) {
                errors.push('If Overdraft account type is selected, you must enter an Overdraft amount');
            }

            // Unavailable Funds bidirectional validation
            if (c.authorityData.unavailable_funds && !hasUnavailableAccountType) {
                errors.push('If Unavailable Funds amount is entered, you must choose at least one account type (Internal or External)');
            }
            if (hasUnavailableAccountType && !c.authorityData.unavailable_funds) {
                errors.push('If Unavailable Funds account type is selected, you must enter an Unavailable Funds amount');
            }
        }

        var isValid = errors.length === 0;

        // Update Record Producer variables
        g_form.setValue('form_validation_errors', errors.join('|'));
        g_form.setValue('form_is_valid', isValid ? 'true' : 'false');

        return isValid;
    };

    // Update Record Producer variables - UPDATED with new checkbox logic
    c.updateRecordProducerVariables = function() {
        g_form.setValue('overall_business_need', c.authorityData.overall_business_need);

        var currentRequestType = c.getRequestType();
        c.requestType = currentRequestType;

        // For remove authority requests, don't set authority data
        if (currentRequestType === 'remove_authority') {
            g_form.setValue('authority_types', '');
            g_form.setValue('authority_data', '');
            c.validateForm();
            return;
        }

        var authority_types = [];
        var authority_data = [];

        // Process non-credit authority data
        if (c.authorityData.non_credit_checked) {
            authority_types.push('non_credit');
            var nonCreditData = {
                disbursement_ach: (c.authorityData.ach_checked && c.authorityData.disbursement) ? c.authorityData.disbursement : '',
                disbursement_wire_transfer_external: (c.authorityData.wire_transfer_checked && c.authorityData.wire_external && c.authorityData.disbursement) ? c.authorityData.disbursement : '',
                disbursement_wire_transfer_internal: (c.authorityData.wire_transfer_checked && c.authorityData.wire_internal && c.authorityData.disbursement) ? c.authorityData.disbursement : '',
                disbursement_official_checks_external: (c.authorityData.official_checks_checked && c.authorityData.checks_external && c.authorityData.disbursement) ? c.authorityData.disbursement : '',
                disbursement_official_checks_internal: (c.authorityData.official_checks_checked && c.authorityData.checks_internal && c.authorityData.disbursement) ? c.authorityData.disbursement : '',
                check_cashing_on_us: c.authorityData.check_cashing_on_us,
                check_cashing_not_on_us: c.authorityData.check_cashing_not_on_us,
                remote_deposit: c.authorityData.remote_deposit,
                treasury_solutions_company_wire_limits: c.authorityData.treasury_solutions_company_wire_limits,
                fx_wire_limits: c.authorityData.fx_wire_limits
            };
            authority_data.push(JSON.stringify(nonCreditData));
        }

        // Process credit authority data
        if (c.authorityData.credit_checked) {
            authority_types.push('credit');
            var creditData = {
                overdraft_internal_accounts: (c.authorityData.overdraft && c.authorityData.overdraft_internal) ? c.authorityData.overdraft : '',
                overdraft_external_accounts: (c.authorityData.overdraft && c.authorityData.overdraft_external) ? c.authorityData.overdraft : '',
                unavailable_funds_internal_accounts: (c.authorityData.unavailable_funds && c.authorityData.unavailable_internal) ? c.authorityData.unavailable_funds : '',
                unavailable_funds_external_accounts: (c.authorityData.unavailable_funds && c.authorityData.unavailable_external) ? c.authorityData.unavailable_funds : ''
            };
            authority_data.push(JSON.stringify(creditData));
        }

        g_form.setValue('authority_types', authority_types.join('|'));
        g_form.setValue('authority_data', authority_data.join('|'));

        c.validateForm();
    };

    // Update widget data and sync with Record Producer
    c.updateWidgetData = function(fieldName, value) {
        c.authorityData[fieldName] = value;
        c.updateRecordProducerVariables();
    };

    // Load existing authority limits for pre-population
    c.loadExistingLimits = function() {
        if (!c.jobCode || c.requestType !== 'change_to_existing_authority') {
            return;
        }

        c.server.get({
            action: 'getExistingLimits',
            job_code: c.jobCode
        }).then(function(response) {
            if (response.data.limits && response.data.limits.length > 0) {
                c.existingLimits = response.data.limits[0];
                c.populateFieldsFromExistingLimits();
            }
        }).catch(function(error) {
            console.error('Failed to load existing limits:', error);
        });
    };

    // Populate fields with existing limit values - UPDATED for new checkboxes
c.populateFieldsFromExistingLimits = function() {
    if (!c.existingLimits) return;

    // First, clear all existing fields
    c.clearAllFields();

    var limits = c.existingLimits;
    var hasNonCreditValues = false;
    var hasCreditValues = false;

    // Check if there are any non-zero non-credit values
    if (c.isNonZeroValue(limits.disbursement_ach) ||
        c.isNonZeroValue(limits.disbursement_wire_transfer_external) ||
        c.isNonZeroValue(limits.disbursement_wire_transfer_internal) ||
        c.isNonZeroValue(limits.disbursement_official_checks_external) ||
        c.isNonZeroValue(limits.disbursement_official_checks_internal) ||
        c.isNonZeroValue(limits.check_cashing_on_us) ||
        c.isNonZeroValue(limits.check_cashing_not_on_us) ||
        c.isNonZeroValue(limits.remote_deposit) ||
        c.isNonZeroValue(limits.treasury_solutions_company_wire_limits) ||
        c.isNonZeroValue(limits.fx_wire_limits)) {
        hasNonCreditValues = true;
    }

    // Check if there are any non-zero credit values
    if (c.isNonZeroValue(limits.overdraft_external_accounts) ||
        c.isNonZeroValue(limits.overdraft_internal_accounts) ||
        c.isNonZeroValue(limits.unavailable_funds_external_accounts) ||
        c.isNonZeroValue(limits.unavailable_funds_internal_accounts)) {
        hasCreditValues = true;
    }

    // Pre-populate Non-Credit Authority
    if (hasNonCreditValues) {
        // Check the Non-Credit Authority checkbox
        document.getElementById('nonCreditAuth').checked = true;
        document.getElementById('nonCreditGroup').classList.add('active');
        document.getElementById('nonCreditSection').classList.add('active');
        c.authorityData.non_credit_checked = true;
        
        // NEW: Make checkbox read-only
        document.getElementById('nonCreditAuth').disabled = true;
        document.getElementById('nonCreditGroup').classList.add('disabled');

        // Handle Disbursement fields (rest of the code remains the same)
        var disbursementValue = '';

        // ACH
        if (c.isNonZeroValue(limits.disbursement_ach)) {
            document.getElementById('achCheck').checked = true;
            c.authorityData.ach_checked = true;
            disbursementValue = limits.disbursement_ach;
        }

        // Wire Transfer - check both internal and external
        var hasWireExternal = c.isNonZeroValue(limits.disbursement_wire_transfer_external);
        var hasWireInternal = c.isNonZeroValue(limits.disbursement_wire_transfer_internal);

        if (hasWireInternal || hasWireExternal) {
            document.getElementById('wireTransferCheck').checked = true;
            c.authorityData.wire_transfer_checked = true;
            document.getElementById('wireAccountTypes').style.display = 'block';

            // Check appropriate account type boxes
            if (hasWireInternal) {
                document.getElementById('wireInternal').checked = true;
                c.authorityData.wire_internal = true;
                disbursementValue = disbursementValue || limits.disbursement_wire_transfer_internal;
            }
            if (hasWireExternal) {
                document.getElementById('wireExternal').checked = true;
                c.authorityData.wire_external = true;
                disbursementValue = disbursementValue || limits.disbursement_wire_transfer_external;
            }
        }

        // Official Checks
        var hasChecksExternal = c.isNonZeroValue(limits.disbursement_official_checks_external);
        var hasChecksInternal = c.isNonZeroValue(limits.disbursement_official_checks_internal);

        if (hasChecksInternal || hasChecksExternal) {
            document.getElementById('officialChecksCheck').checked = true;
            c.authorityData.official_checks_checked = true;
            document.getElementById('checksAccountTypes').style.display = 'block';

            // Check appropriate account type boxes
            if (hasChecksInternal) {
                document.getElementById('checksInternal').checked = true;
                c.authorityData.checks_internal = true;
                disbursementValue = disbursementValue || limits.disbursement_official_checks_internal;
            }
            if (hasChecksExternal) {
                document.getElementById('checksExternal').checked = true;
                c.authorityData.checks_external = true;
                disbursementValue = disbursementValue || limits.disbursement_official_checks_external;
            }
        }

        // Set disbursement value only if non-zero
        if (c.isNonZeroValue(disbursementValue)) {
            var disbursementField = document.getElementById('disbursement');
            disbursementField.value = c.formatCurrency(disbursementValue);
            c.authorityData.disbursement = disbursementValue;
        }

        // Check Cashing fields - only set if non-zero
        if (c.isNonZeroValue(limits.check_cashing_on_us)) {
            var checkCashingOnUs = document.getElementById('checkCashingOnUs');
            checkCashingOnUs.value = c.formatCurrency(limits.check_cashing_on_us);
            c.authorityData.check_cashing_on_us = limits.check_cashing_on_us;
        }

        if (c.isNonZeroValue(limits.check_cashing_not_on_us)) {
            var checkCashingNotOnUs = document.getElementById('checkCashingNotOnUs');
            checkCashingNotOnUs.value = c.formatCurrency(limits.check_cashing_not_on_us);
            c.authorityData.check_cashing_not_on_us = limits.check_cashing_not_on_us;
        }

        // Other Non-Credit fields
        if (c.isNonZeroValue(limits.remote_deposit)) {
            var remoteDeposit = document.getElementById('remoteDeposit');
            remoteDeposit.value = c.formatCurrency(limits.remote_deposit);
            c.authorityData.remote_deposit = limits.remote_deposit;
        }

        if (c.isNonZeroValue(limits.treasury_solutions_company_wire_limits)) {
            var treasurySolutions = document.getElementById('treasurySolutions');
            treasurySolutions.value = c.formatCurrency(limits.treasury_solutions_company_wire_limits);
            c.authorityData.treasury_solutions_company_wire_limits = limits.treasury_solutions_company_wire_limits;
        }

        if (c.isNonZeroValue(limits.fx_wire_limits)) {
            var fxWireLimits = document.getElementById('fxWireLimits');
            fxWireLimits.value = c.formatCurrency(limits.fx_wire_limits);
            c.authorityData.fx_wire_limits = limits.fx_wire_limits;
        }
    }

    // Pre-populate Credit Authority
    if (hasCreditValues) {
        // Check the Credit Authority checkbox
        document.getElementById('creditAuth').checked = true;
        document.getElementById('creditGroup').classList.add('active');
        document.getElementById('creditSection').classList.add('active');
        c.authorityData.credit_checked = true;
        
        // NEW: Make checkbox read-only
        document.getElementById('creditAuth').disabled = true;
        document.getElementById('creditGroup').classList.add('disabled');

        // Overdraft fields
        var hasOverdraftExternal = c.isNonZeroValue(limits.overdraft_external_accounts);
        var hasOverdraftInternal = c.isNonZeroValue(limits.overdraft_internal_accounts);

        if (hasOverdraftInternal || hasOverdraftExternal) {
            // Use the first non-zero value as the display value
            var overdraftValue = hasOverdraftInternal ? limits.overdraft_internal_accounts : limits.overdraft_external_accounts;
            var overdraftField = document.getElementById('overdraft');
            overdraftField.value = c.formatCurrency(overdraftValue);
            c.authorityData.overdraft = overdraftValue;

            // Check appropriate account type boxes
            if (hasOverdraftInternal) {
                document.getElementById('overdraftInternal').checked = true;
                c.authorityData.overdraft_internal = true;
            }
            if (hasOverdraftExternal) {
                document.getElementById('overdraftExternal').checked = true;
                c.authorityData.overdraft_external = true;
            }
        }

        // Unavailable Funds fields
        var hasUnavailableExternal = c.isNonZeroValue(limits.unavailable_funds_external_accounts);
        var hasUnavailableInternal = c.isNonZeroValue(limits.unavailable_funds_internal_accounts);

        if (hasUnavailableInternal || hasUnavailableExternal) {
            // Use the first non-zero value as the display value
            var unavailableValue = hasUnavailableInternal ? limits.unavailable_funds_internal_accounts : limits.unavailable_funds_external_accounts;
            var unavailableField = document.getElementById('unavailableFunds');
            unavailableField.value = c.formatCurrency(unavailableValue);
            c.authorityData.unavailable_funds = unavailableValue;

            // Check appropriate account type boxes
            if (hasUnavailableInternal) {
                document.getElementById('unavailableInternal').checked = true;
                c.authorityData.unavailable_internal = true;
            }
            if (hasUnavailableExternal) {
                document.getElementById('unavailableExternal').checked = true;
                c.authorityData.unavailable_external = true;
            }
        }
    }

    // Store the original loaded values for comparison
    c.originalLoadedValues = JSON.parse(JSON.stringify(c.authorityData));

    // Update the Record Producer variables after pre-population
    c.updateRecordProducerVariables();
};

    // Monitor request type and job code changes
    c.setupFieldMonitoring = function() {
        var lastRequestType = '';
        var lastJobCode = '';

        var checkInterval = setInterval(function() {
            var currentRequestType = c.getRequestType();
            var currentJobCode = c.getJobCode();

            // Check if either field has changed
            if (currentRequestType !== lastRequestType || currentJobCode !== lastJobCode) {
                var jobCodeChanged = (currentJobCode !== lastJobCode);

                lastRequestType = currentRequestType;
                lastJobCode = currentJobCode;
                c.requestType = currentRequestType;
                c.jobCode = currentJobCode;

                $scope.$apply(function() {
                    if (jobCodeChanged) {
                        c.clearAllFields();
                        c.originalLoadedValues = null;
                    }

                    if (currentRequestType === 'new_authority') {
                        c.clearAllFields();
                        c.originalLoadedValues = null;
                    }

                    if (currentRequestType === 'change_to_existing_authority' && currentJobCode) {
                        c.loadExistingLimits();
                    }

                    c.validateForm();
                });
            }
        }, 500);

        $scope.$on('$destroy', function() {
            clearInterval(checkInterval);
        });
    };

    // Clear all form fields
c.clearAllFields = function() {
    // Reset all checkboxes and fields
    document.getElementById('nonCreditAuth').checked = false;
    document.getElementById('creditAuth').checked = false;
    
    // NEW: Remove disabled state and disabled class
    document.getElementById('nonCreditAuth').disabled = false;
    document.getElementById('creditAuth').disabled = false;
    document.getElementById('nonCreditGroup').classList.remove('active', 'disabled');
    document.getElementById('creditGroup').classList.remove('active', 'disabled');
    
    document.getElementById('nonCreditSection').classList.remove('active');
    document.getElementById('creditSection').classList.remove('active');

    // Clear all input fields
    var inputs = document.querySelectorAll('.widget-container input[type="text"], .widget-container textarea');
    inputs.forEach(function(input) {
        input.value = '';
    });

    // Clear all checkboxes
    var checkboxes = document.querySelectorAll('.widget-container input[type="checkbox"]');
    checkboxes.forEach(function(checkbox) {
        checkbox.checked = false;
    });

    // Hide conditional containers
    var wireContainer = document.getElementById('wireAccountTypes');
    if (wireContainer) wireContainer.style.display = 'none';
    var checksContainer = document.getElementById('checksAccountTypes');
    if (checksContainer) checksContainer.style.display = 'none';

    // Reset authority data
    c.authorityData = {
        non_credit_checked: false,
        credit_checked: false,
        disbursement: '',
        ach_checked: false,
        wire_transfer_checked: false,
        wire_internal: false,
        wire_external: false,
        official_checks_checked: false,
        checks_internal: false,
        checks_external: false,
        check_cashing_on_us: '',
        check_cashing_not_on_us: '',
        remote_deposit: '',
        treasury_solutions_company_wire_limits: '',
        fx_wire_limits: '',
        overdraft: '',
        overdraft_internal: false,
        overdraft_external: false,
        unavailable_funds: '',
        unavailable_internal: false,
        unavailable_external: false,
        overall_business_need: ''
    };

    c.updateRecordProducerVariables();
};

    function initializeWidget() {
        // Start monitoring fields
        c.setupFieldMonitoring();

        // Get references to elements
        var nonCreditCheckbox = document.getElementById('nonCreditAuth');
        var creditCheckbox = document.getElementById('creditAuth');
        var nonCreditGroup = document.getElementById('nonCreditGroup');
        var creditGroup = document.getElementById('creditGroup');
        var nonCreditSection = document.getElementById('nonCreditSection');
        var creditSection = document.getElementById('creditSection');
        var justificationSection = document.getElementById('justificationSection');

        var wireTransferCheck = document.getElementById('wireTransferCheck');
        var wireAccountTypes = document.getElementById('wireAccountTypes');
        var wireInternal = document.getElementById('wireInternal');
        var wireExternal = document.getElementById('wireExternal');

        var officialChecksCheck = document.getElementById('officialChecksCheck');
        var checksAccountTypes = document.getElementById('checksAccountTypes');
        var checksInternal = document.getElementById('checksInternal');
        var checksExternal = document.getElementById('checksExternal');

        // Handle authority type selection
        function handleAuthoritySelection() {
            var nonCreditChecked = nonCreditCheckbox.checked;
            var creditChecked = creditCheckbox.checked;

            nonCreditGroup.classList.toggle('active', nonCreditChecked);
            creditGroup.classList.toggle('active', creditChecked);
            nonCreditSection.classList.toggle('active', nonCreditChecked);
            creditSection.classList.toggle('active', creditChecked);

            c.updateWidgetData('non_credit_checked', nonCreditChecked);
            c.updateWidgetData('credit_checked', creditChecked);
        }

        // Handle Wire Transfer checkbox changes
        function handleWireTransferChange() {
            var isChecked = wireTransferCheck.checked;
            wireAccountTypes.style.display = isChecked ? 'block' : 'none';
            if (!isChecked) {
                wireInternal.checked = false;
                wireExternal.checked = false;
                c.updateWidgetData('wire_internal', false);
                c.updateWidgetData('wire_external', false);
            }
            c.updateWidgetData('wire_transfer_checked', isChecked);
        }

        // Handle Official Checks checkbox changes
        function handleOfficialChecksChange() {
            var isChecked = officialChecksCheck.checked;
            checksAccountTypes.style.display = isChecked ? 'block' : 'none';
            if (!isChecked) {
                checksInternal.checked = false;
                checksExternal.checked = false;
                c.updateWidgetData('checks_internal', false);
                c.updateWidgetData('checks_external', false);
            }
            c.updateWidgetData('official_checks_checked', isChecked);
        }

        // Setup currency input field with formatting - UPDATED to prevent decimals
        function setupCurrencyField(inputId, fieldName) {
            var input = document.getElementById(inputId);
            if (!input) return;

            var isUpdating = false;

            function handleCurrencyInput(event) {
                if (isUpdating) return;
                isUpdating = true;

                var cursorPosition = event.target.selectionStart;
                var oldValue = event.target.value;
                var oldLength = oldValue.length;
                var formattedValue = c.formatCurrency(oldValue);

                event.target.value = formattedValue;

                var newLength = formattedValue.length;
                var lengthDiff = newLength - oldLength;
                var newCursorPosition = Math.max(0, cursorPosition + lengthDiff);
                setTimeout(() => {
                    event.target.setSelectionRange(newCursorPosition, newCursorPosition);
                }, 0);

                var rawValue = c.getCurrencyValue(formattedValue);
                c.updateWidgetData(fieldName, rawValue);
                isUpdating = false;
            }

            // Prevent decimal point entry
            input.addEventListener('keypress', function(event) {
                if (event.key === '.' || event.key === ',') {
                    event.preventDefault();
                }
            });

            input.addEventListener('input', handleCurrencyInput);
        }

        // Setup checkbox field
        function setupCheckboxField(inputId, fieldName) {
            var input = document.getElementById(inputId);
            if (!input) return;
            input.addEventListener('change', function(event) {
                c.updateWidgetData(fieldName, event.target.checked);
            });
        }

        // Setup textarea field
        function setupTextAreaField(inputId, fieldName) {
            var input = document.getElementById(inputId);
            if (!input) return;
            input.addEventListener('input', function(event) {
                c.updateWidgetData(fieldName, event.target.value);
            });
        }

        // Bind all event listeners
        if (nonCreditCheckbox) nonCreditCheckbox.addEventListener('change', handleAuthoritySelection);
        if (creditCheckbox) creditCheckbox.addEventListener('change', handleAuthoritySelection);

        // Allow clicking on the entire checkbox group to toggle (unless disabled)
if (nonCreditGroup) {
    nonCreditGroup.addEventListener('click', function(e) {
        // NEW: Check if disabled before allowing toggle
        if (e.target.tagName !== 'INPUT' && !nonCreditAuth.disabled) {
            nonCreditCheckbox.checked = !nonCreditCheckbox.checked;
            handleAuthoritySelection();
        }
    });
}
if (creditGroup) {
    creditGroup.addEventListener('click', function(e) {
        // NEW: Check if disabled before allowing toggle
        if (e.target.tagName !== 'INPUT' && !creditAuth.disabled) {
            creditCheckbox.checked = !creditCheckbox.checked;
            handleAuthoritySelection();
        }
    });
}

        if (wireTransferCheck) wireTransferCheck.addEventListener('change', handleWireTransferChange);
        if (officialChecksCheck) officialChecksCheck.addEventListener('change', handleOfficialChecksChange);

        // Setup all currency fields
        setupCurrencyField('disbursement', 'disbursement');
        setupCurrencyField('checkCashingOnUs', 'check_cashing_on_us');
        setupCurrencyField('checkCashingNotOnUs', 'check_cashing_not_on_us');
        setupCurrencyField('remoteDeposit', 'remote_deposit');
        setupCurrencyField('treasurySolutions', 'treasury_solutions_company_wire_limits');
        setupCurrencyField('fxWireLimits', 'fx_wire_limits');
        setupCurrencyField('overdraft', 'overdraft');
        setupCurrencyField('unavailableFunds', 'unavailable_funds');

        // Setup all checkbox fields
        setupCheckboxField('achCheck', 'ach_checked');
        setupCheckboxField('wireInternal', 'wire_internal');
        setupCheckboxField('wireExternal', 'wire_external');
        setupCheckboxField('checksInternal', 'checks_internal');
        setupCheckboxField('checksExternal', 'checks_external');
        setupCheckboxField('overdraftInternal', 'overdraft_internal');
        setupCheckboxField('overdraftExternal', 'overdraft_external');
        setupCheckboxField('unavailableInternal', 'unavailable_internal');
        setupCheckboxField('unavailableExternal', 'unavailable_external');

        // Setup textarea field
        setupTextAreaField('businessNeed', 'overall_business_need');

        // Initialize Record Producer variables
        c.updateRecordProducerVariables();
    }
};

<!-- ============================================ -->
<!-- SERVER SCRIPT -->
<!-- ============================================ -->

(function() {
    // Server-side data initialization
    data.user = gs.getUser().getName();
    data.userId = gs.getUserID();
    
    // Handle request to get existing limits for pre-population
    if (input && input.action === 'getExistingLimits') {
        var jobCode = input.job_code;
        var limits = [];
        
        if (jobCode) {
            // Query for existing authority limits
            var gr = new GlideRecord('x_banun_bunow_si_0_authority_limits');
            gr.addQuery('job_code', jobCode);
            gr.addQuery('active', true);
            gr.orderByDesc('sys_created_on');
            gr.setLimit(1); // Get the most recent
            gr.query();
            
            if (gr.next()) {
                var limit = {
                    // Credit limits
                    overdraft_external_accounts: gr.getValue('overdraft_external_accounts'),
                    overdraft_internal_accounts: gr.getValue('overdraft_internal_accounts'),
                    unavailable_funds_external_accounts: gr.getValue('unavailable_funds_external_accounts'),
                    unavailable_funds_internal_accounts: gr.getValue('unavailable_funds_internal_accounts'),
                    
                    // Non-credit limits
                    disbursement_ach: gr.getValue('disbursement_ach'),
                    disbursement_wire_transfer_external: gr.getValue('disbursement_wire_transfer_external'),
                    disbursement_wire_transfer_internal: gr.getValue('disbursement_wire_transfer_internal'),
                    disbursement_official_checks_external: gr.getValue('disbursement_official_checks_external'),
                    disbursement_official_checks_internal: gr.getValue('disbursement_official_checks_internal'),
                    check_cashing_on_us: gr.getValue('check_cashing_on_us'),
                    check_cashing_not_on_us: gr.getValue('check_cashing_not_on_us'),
                    remote_deposit: gr.getValue('remote_deposit'),
                    treasury_solutions_company_wire_limits: gr.getValue('treasury_solutions_company_wire_limits'),
                    fx_wire_limits: gr.getValue('fx_wire_limits')
                };
                
                limits.push(limit);
            }
        }
        
        data.limits = limits;
    }
})();
