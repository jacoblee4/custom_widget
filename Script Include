var SignatureHelper = Class.create();
SignatureHelper.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {

    initialize: function() {
        // Parse CEO identifiers from single pipe-separated property
        this.ceoIdentifiers = this._parseCEOIdentifiers();

        // Parse business line titles from property
        this.businessLineTitles = this._parseBusinessLineTitles();
    },

    // Parse CEO identifiers from system property
    _parseCEOIdentifiers: function() {
        var propertyValue = gs.getProperty('x_banun_bunow_si_0.bunow.ceo.identifiers', '');

        var identifiers = {
            exactMatches: [],
            keywords: []
        };

        if (propertyValue) {
            var values = propertyValue.split('|');
            for (var i = 0; i < values.length; i++) {
                var trimmedValue = values[i].trim();
                if (trimmedValue) {
                    var lowerValue = trimmedValue.toLowerCase();
                    // If it's a short keyword like "CEO", add to keywords for contains search
                    if (trimmedValue.length <= 5 && trimmedValue.toUpperCase() === trimmedValue) {
                        identifiers.keywords.push(lowerValue);
                    } else {
                        // Otherwise treat as exact match (sys_id, full titles, etc.)
                        identifiers.exactMatches.push(lowerValue);
                    }
                }
            }
        }

        return identifiers;
    },

    // Parse business line titles from system property
    _parseBusinessLineTitles: function() {
        var propertyValue = gs.getProperty('x_banun_bunow_si_0.bunow.authority.business.line.titles', '');

        var titles = [];

        if (propertyValue) {
            var values = propertyValue.split('|');
            for (var i = 0; i < values.length; i++) {
                var trimmedValue = values[i].trim();
                if (trimmedValue) {
                    titles.push(trimmedValue);
                }
            }
        }

        return titles;
    },

    // Find the Business Line Approver by traversing up the management chain
    findBusinessLineApprover: function(requestedForSysId) {
        var result = {
            found: false,
            approver_sys_id: '',
            is_ceo: false,
            error_message: ''
        };

        if (!requestedForSysId) {
            result.error_message = 'No requested for user provided';
            return result;
        }

        var currentUser = new GlideRecord('sys_user');
        if (!currentUser.get(requestedForSysId)) {
            result.error_message = 'Requested for user not found';
            return result;
        }

        var maxLevels = 20; // Prevent infinite loops
        var currentLevel = 0;

        while (currentUser && currentLevel < maxLevels) {
            // Check if current user is active
            if (!currentUser.active) {
                result.error_message = 'Inactive user found in approval chain: ' + currentUser.getValue('name');
                return result;
            }

            // Check if current user is CEO
            if (this._isCEO(currentUser)) {
                result.is_ceo = true;
                result.found = true;
                result.approver_sys_id = currentUser.getValue('sys_id');
                result.error_message = 'Found CEO, cenceling request';
                return result;
            }

            // Check if current user has the required title
            var currentOfficerTitle = currentUser.getValue('u_officer_title') || '';
            if (this.businessLineTitles.indexOf(currentOfficerTitle) > -1) {
                result.found = true;
                result.approver_sys_id = currentUser.getValue('sys_id');
                return result;
            }

            // Get manager sys_id FIRST
            var managerSysId = currentUser.getValue('manager');
            if (!managerSysId) {
                result.error_message = 'No Business Line Approver found - reached top of hierarchy';
                break;
            }

            // Then move to manager
            if (!currentUser.get(managerSysId)) {
                result.error_message = 'Manager record not found in chain';
                break;
            }

            // Check if manager is active
            if (!currentUser.active) {
                result.error_message = 'Inactive manager found in chain: ' + currentUser.getValue('name');
                break;
            }

            currentLevel++;
        }

        if (currentLevel >= maxLevels) {
            result.error_message = 'Maximum hierarchy levels reached without finding approver';
        }

        return result;
    },

    // Check if a user is the CEO by comparing against identifiers
    _isCEO: function(userGr) {
        if (!userGr || !this.ceoIdentifiers) {
            return false;
        }

        // Get user values for exact match checking
        var sysId = (userGr.getValue('sys_id') || '').toLowerCase().trim();
        var title = (userGr.getValue('title') || '').toLowerCase().trim();
        var officerTitle = (userGr.getValue('u_officer_title') || '').toLowerCase().trim();

        // Check exact matches first (sys_id, full titles)
        var exactMatches = this.ceoIdentifiers.exactMatches || [];

        for (var i = 0; i < exactMatches.length; i++) {
            var identifier = exactMatches[i];
            if (sysId === identifier ||
                title === identifier ||
                officerTitle === identifier) {
                return true;
            }
        }

        // Check keyword contains ("CEO" appearing anywhere in title fields)
        var keywords = this.ceoIdentifiers.keywords || [];

        for (var j = 0; j < keywords.length; j++) {
            var keyword = keywords[j];

            if ((title && title.indexOf(keyword) > -1) ||
                (officerTitle && officerTitle.indexOf(keyword) > -1)) {
                return true;
            }
        }

        return false;
    },

    // Get the maximum value from credit or non-credit child record
    getMaxAuthorityValue: function(childSysId, type) {
        var result = {
            max_value: 0,
            field_name: '',
            all_values: {}
        };

        if (!childSysId) return result;

        var table = (type === 'credit') ?
            'x_banun_bunow_si_0_credit_authority_limits' :
            'x_banun_bunow_si_0_non_credit_authority_limits';

        var gr = new GlideRecord(table);
        if (!gr.get(childSysId)) return result;

        var values = {};
        var maxValue = 0;
        var maxFieldName = '';

        if (type === 'credit') {
            // Credit fields
            values = {
                'Overdraft Internal': parseInt(gr.getValue('overdraft_internal_accounts') || 0, 10),
                'Overdraft External': parseInt(gr.getValue('overdraft_external_accounts') || 0, 10),
                'Unavailable Funds Internal': parseInt(gr.getValue('unavailable_funds_internal_accounts') || 0, 10),
                'Unavailable Funds External': parseInt(gr.getValue('unavailable_funds_external_accounts') || 0, 10)
            };
        } else {
            // Non-credit fields
            values = {
                'ACH Disbursement': parseInt(gr.getValue('disbursement_ach') || 0, 10),
                'Wire Transfer External': parseInt(gr.getValue('disbursement_wire_transfer_external') || 0, 10),
                'Wire Transfer Internal': parseInt(gr.getValue('disbursement_wire_transfer_internal') || 0, 10),
                'Official Checks External': parseInt(gr.getValue('disbursement_official_checks_external') || 0, 10),
                'Official Checks Internal': parseInt(gr.getValue('disbursement_official_checks_internal') || 0, 10),
                'Check Cashing On-Us': parseInt(gr.getValue('check_cashing_on_us') || 0, 10),
                'Check Cashing Not On-Us': parseInt(gr.getValue('check_cashing_not_on_us') || 0, 10),
                'Remote Deposit': parseInt(gr.getValue('remote_deposit') || 0, 10),
                'Treasury Solutions': parseInt(gr.getValue('treasury_solutions_company_wire_limits') || 0, 10),
                'FX Wire Limits': parseInt(gr.getValue('fx_wire_limits') || 0, 10)
            };
        }

        // Find maximum value
        for (var fieldName in values) {
            if (values[fieldName] > maxValue) {
                maxValue = values[fieldName];
                maxFieldName = fieldName;
            }
        }

        result.max_value = maxValue;
        result.field_name = maxFieldName;
        result.all_values = values;

        return result;
    },

    // Check if approver has delegated authority for the amount
    checkDelegatedAuthority: function(approverSysId, amount, type) {
        var result = {
            has_authority: false,
            threshold: 0,
            message: ''
        };

        if (!approverSysId || !amount) {
            result.message = 'Missing approver or amount';
            return result;
        }

        var amountNum = parseInt(amount, 10);

        var table = (type === 'credit') ?
            'x_banun_bunow_si_0_crmc_delegated_authority' :
            'x_banun_bunow_si_0_ormc_delegated_authority';

        var gr = new GlideRecord(table);
        gr.addQuery('delegate_name', approverSysId);
        gr.addEncodedQuery('active=true^delegate_name.active=true'); // Make sure the delegate record is active AND the user record for the delegate
        gr.query();

        if (gr.next()) {
            result.threshold = parseInt(gr.getValue('authority_limit') || 0, 10);

            if (result.threshold > 0 && amountNum <= result.threshold) {
                result.has_authority = true;
                result.message = 'Approver has delegated authority. Threshold: $' +
                    result.threshold.toLocaleString() + ' >= Request: $' + amountNum.toLocaleString();
            } else {
                result.message = 'Authority insufficient. Threshold: $' +
                    result.threshold.toLocaleString() + ' < Request: $' + amountNum.toLocaleString();
            }
        } else {
            result.message = 'No delegated authority found for approver';
        }

        return result;
    },

    // Find the division head which is anyone who reports to the CEO
    getDivisionHeadFromUser: function(businessLineApproverSysId) {
        var result = {
            found: false,
            division_head_sys_id: '',
            is_ceo: false,
            error_message: ''
        };

        if (!businessLineApproverSysId) {
            result.error_message = 'No user provided';
            return result;
        }

        var currentUser = new GlideRecord('sys_user');
        if (!currentUser.get(businessLineApproverSysId)) {
            result.error_message = 'User not found';
            return result;
        }

        var maxLevels = 20;
        var currentLevel = 0;

        while (currentUser && currentLevel < maxLevels) {
            // Check if current user is active
            if (!currentUser.active) {
                result.error_message = 'Inactive user found in chain: ' + currentUser.getValue('name');
                return result;
            }

            // Check if current user IS the CEO
            if (this._isCEO(currentUser)) {
                result.is_ceo = true;
                result.error_message = 'User is the CEO';
                return result;
            }

            // Get the current user's manager
            var managerSysId = currentUser.getValue('manager');
            if (!managerSysId) {
                result.error_message = 'End of hierarchy reached without finding division head';
                return result;
            }

            // Check if the manager is the CEO
            var managerGr = new GlideRecord('sys_user');
            if (managerGr.get(managerSysId)) {
                if (this._isCEO(managerGr)) {
                    result.found = true;
                    result.division_head_sys_id = currentUser.getValue('sys_id');
                    return result;
                }
            }

            // Move up to the current user's manager for next iteration
            if (!currentUser.get(managerSysId)) {
                result.error_message = 'Manager record not found in chain';
                return result;
            }

            currentLevel++;
        }

        if (currentLevel >= maxLevels) {
            result.error_message = 'Maximum hierarchy levels reached without finding division head';
        }

        return result;
    },


    // Find next approver in hierarchy with sufficient authority
    findHierarchicalApprover: function(businessLineApproverSysId, divisionHeadSysId, amount, type) {
        var result = {
            found_approver: false,
            approver_sys_id: '',
            is_division_head: false,
            reached_division_head: false,
            reached_ceo: false,
            message: ''
        };

        // Start by getting the Business Line Approver's MANAGER
        var blApprover = new GlideRecord('sys_user');
        if (!blApprover.get(businessLineApproverSysId)) {
            result.message = 'Business Line Approver not found';
            return result;
        }

        var currentApprover = blApprover.getValue('manager');
        if (!currentApprover) {
            result.message = 'Business Line Approver has no manager';
            return result;
        }

        var maxLevels = 20;
        var currentLevel = 0;

        while (currentApprover && currentLevel < maxLevels) {
            // Check if approver exists and is active
            var userGr = new GlideRecord('sys_user');
            if (!userGr.get(currentApprover)) {
                result.message = 'User not found in hierarchy';
                break;
            }

            if (!userGr.active) {
                result.message = 'Inactive user found in hierarchy: ' + userGr.getValue('name');
                break;
            }

            // Check if this is the CEO - if so, we've gone too far
            if (this._isCEO_check(currentApprover)) {
                result.reached_ceo = true;
                result.message = 'CEO found in hierarchy - escalating to committee';
                return result;
            }

            // Check if this person has authority to approve
            var authCheck = this.checkDelegatedAuthority(currentApprover, amount, type);

            if (authCheck.has_authority) {
                // If they can approve! Return them as the approver
                result.found_approver = true;
                result.approver_sys_id = currentApprover;
                result.message = authCheck.message;
                return result;
            }

            // They can't approve - check if they're the division head
            // Division head = last stop before CEO, send to committee
            if (currentApprover === divisionHeadSysId) {
                result.reached_division_head = true;
                result.is_division_head = true;
                result.message = 'Reached division head without finding approver with authority - send to committee';
                return result;
            }

            // Not division head, not enough authority - move up to their manager
            var nextManager = userGr.getValue('manager');

            if (!nextManager) {
                result.message = 'End of hierarchy - no manager found';
                break;
            }

            currentApprover = nextManager;
            currentLevel++;
        }

        if (currentLevel >= maxLevels) {
            result.message = 'Maximum hierarchy levels reached';
        } else if (!result.message) {
            result.message = 'No approver found in hierarchy';
        }

        return result;
    },


    /**
     * Helper to check if a sys_id is the CEO
     */
    _isCEO_check: function(userSysId) {
        var userGr = new GlideRecord('sys_user');
        if (userGr.get(userSysId)) {
            return this._isCEO(userGr);
        }
        return false;
    },

    // Remove authority limits - intelligently handles partial removals
    removeAuthorityLimit: function(jobCode, type) {
        var gr = new GlideRecord('x_banun_bunow_si_0_authority_limits');
        gr.addQuery('job_code', jobCode);
        gr.query();

        if (!gr.next()) {
            gs.info('removeAuthorityLimit: No authority limit found for job code: ' + jobCode);
            return true;
        }

        // Check if the OTHER type has any values
        var hasOtherTypeValues = false;

        if (type === 'credit') {
            // Removing credit, check if non-credit has values
            hasOtherTypeValues = this._hasNonCreditValues(gr);
        } else if (type === 'non-credit') {
            // Removing non-credit, check if credit has values
            hasOtherTypeValues = this._hasCreditValues(gr);
        }

        if (hasOtherTypeValues) {
            // Other type has values, so just zero out this type's fields
            gs.info('removeAuthorityLimit: Other type has values, zeroing out ' + type + ' fields');

            if (type === 'credit') {
                gr.overdraft_external_accounts = 0;
                gr.overdraft_internal_accounts = 0;
                gr.unavailable_funds_external_accounts = 0;
                gr.unavailable_funds_internal_accounts = 0;
            } else if (type === 'non-credit') {
                gr.disbursement_ach = 0;
                gr.disbursement_wire_transfer_external = 0;
                gr.disbursement_wire_transfer_internal = 0;
                gr.disbursement_official_checks_external = 0;
                gr.disbursement_official_checks_internal = 0;
                gr.check_cashing_on_us = 0;
                gr.check_cashing_not_on_us = 0;
                gr.remote_deposit = 0;
                gr.treasury_solutions_company_wire_limits = 0;
                gr.fx_wire_limits = 0;
            }

            gr.update();
        } else {
            // Other type has no values, safe to delete entire record
            gs.info('removeAuthorityLimit: No other type values, deleting entire record');
            gr.deleteRecord();
        }

        return true;
    },

    // Helper to check if credit fields have any non-zero values
    _hasCreditValues: function(gr) {
        var creditFields = [
            'overdraft_external_accounts',
            'overdraft_internal_accounts',
            'unavailable_funds_external_accounts',
            'unavailable_funds_internal_accounts'
        ];

        for (var i = 0; i < creditFields.length; i++) {
            var value = parseInt(gr.getValue(creditFields[i]) || 0, 10);
            if (value > 0) {
                return true;
            }
        }
        return false;
    },

    // Helper to check if non-credit fields have any non-zero values
    _hasNonCreditValues: function(gr) {
        var nonCreditFields = [
            'disbursement_ach',
            'disbursement_wire_transfer_external',
            'disbursement_wire_transfer_internal',
            'disbursement_official_checks_external',
            'disbursement_official_checks_internal',
            'check_cashing_on_us',
            'check_cashing_not_on_us',
            'remote_deposit',
            'treasury_solutions_company_wire_limits',
            'fx_wire_limits'
        ];

        for (var i = 0; i < nonCreditFields.length; i++) {
            var value = parseInt(gr.getValue(nonCreditFields[i]) || 0, 10);
            if (value > 0) {
                return true;
            }
        }
        return false;
    },

    // Create or update authority limits table
    processAuthorityLimits: function(jobCode, creditChildId, nonCreditChildId) {

        // Get values from child records (will be null if not provided)
        var creditValues = creditChildId ? this._getCreditValues(creditChildId) : null;
        var nonCreditValues = nonCreditChildId ? this._getNonCreditValues(nonCreditChildId) : null;

        // Validate that at least one child ID was provided
        if (!creditValues && !nonCreditValues) {
            gs.error('processAuthorityLimits: No valid credit or non-credit child ID provided');
            return false;
        }

        // Check if limit already exists
        var existingGr = new GlideRecord('x_banun_bunow_si_0_authority_limits');
        existingGr.addQuery('job_code', jobCode);
        existingGr.query();

        if (existingGr.next()) {
            // Update existing
            return this._updateLimit(existingGr, creditValues, nonCreditValues);
        } else {
            // Create new
            return this._createLimit(jobCode, creditValues, nonCreditValues);
        }
    },

    _getCreditValues: function(creditChildId) {
        if (!creditChildId) return null;

        var gr = new GlideRecord('x_banun_bunow_si_0_credit_authority_limits');
        if (gr.get(creditChildId)) {
            return {
                overdraft_external_accounts: gr.overdraft_external_accounts,
                overdraft_internal_accounts: gr.overdraft_internal_accounts,
                unavailable_funds_external_accounts: gr.unavailable_funds_external_accounts,
                unavailable_funds_internal_accounts: gr.unavailable_funds_internal_accounts
            };
        }
        return null;
    },

    _getNonCreditValues: function(nonCreditChildId) {
        if (!nonCreditChildId) return null;

        var gr = new GlideRecord('x_banun_bunow_si_0_non_credit_authority_limits');
        if (gr.get(nonCreditChildId)) {
            return {
                disbursement_ach: gr.disbursement_ach,
                disbursement_wire_transfer_external: gr.disbursement_wire_transfer_external,
                disbursement_wire_transfer_internal: gr.disbursement_wire_transfer_internal,
                disbursement_official_checks_external: gr.disbursement_official_checks_external,
                disbursement_official_checks_internal: gr.disbursement_official_checks_internal,
                check_cashing_on_us: gr.check_cashing_on_us,
                check_cashing_not_on_us: gr.check_cashing_not_on_us,
                remote_deposit: gr.remote_deposit,
                treasury_solutions_company_wire_limits: gr.treasury_solutions_company_wire_limits,
                fx_wire_limits: gr.fx_wire_limits
            };
        }
        return null;
    },

    _updateLimit: function(existingGr, creditValues, nonCreditValues) {
        // Update credit fields if provided
        if (creditValues) {
            for (var key in creditValues) {
                existingGr[key] = creditValues[key];
            }
        }

        // Update non-credit fields if provided
        if (nonCreditValues) {
            for (var key in nonCreditValues) {
                existingGr[key] = nonCreditValues[key];
            }
        }
        existingGr.active = true;
        existingGr.update();

        return true;
    },

    _createLimit: function(jobCode, creditValues, nonCreditValues) {
        var newGr = new GlideRecord('x_banun_bunow_si_0_authority_limits');
        newGr.initialize();
        newGr.job_code = jobCode;
        newGr.active = true;

        // Set credit fields if provided
        if (creditValues) {
            for (var key in creditValues) {
                newGr[key] = creditValues[key];
            }
        }

        // Set non-credit fields if provided
        if (nonCreditValues) {
            for (var key in nonCreditValues) {
                newGr[key] = nonCreditValues[key];
            }
        }

        var sysId = newGr.insert();

        return sysId ? true : false;
    },

    // Check if any committee member rejected the record
    rejectionReceived: function(record) {
        var rejection = new GlideRecord('sysapproval_approver');
        rejection.addQuery('sysapproval', record);
        rejection.addQuery('state', 'rejected');
        rejection.query();

        return rejection.hasNext();
    },

    type: 'SignatureHelper'
});
