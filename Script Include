var recordType = fd_data.subflow_inputs.type_of_request || 'both'; // Default to 'both' if null
var requestType = fd_data.subflow_inputs.signature_parent_record.request_type;
var creditRec = fd_data.subflow_inputs.credit_record;
var nonCreditRec = fd_data.subflow_inputs.non_credit_record;

gs.info('SIGNATURE TESTING === PROVISIONING TASK DEBUG ===');
gs.info('SIGNATURE TESTING recordType: ' + recordType);
gs.info('SIGNATURE TESTING requestType: ' + requestType);
gs.info('SIGNATURE TESTING creditRec exists: ' + (creditRec && creditRec.sys_id));
gs.info('SIGNATURE TESTING nonCreditRec exists: ' + (nonCreditRec && nonCreditRec.sys_id));
    
var needsCreditTask = false;
var needsNonCreditTask = false;
    
// Credit always needs a task if present
if ((recordType == 'credit' || recordType == 'both') && creditRec && creditRec.sys_id) {
    needsCreditTask = true;
    gs.info('SIGNATURE TESTING Credit task NEEDED');
}
    
// Non-credit only needs task based on wire transfer logic
if ((recordType == 'non-credit' || recordType == 'both') && nonCreditRec && nonCreditRec.sys_id) {
    var wireExternal = parseFloat(nonCreditRec.disbursement_wire_transfer_external.getValue()) || 0;
    var wireInternal = parseFloat(nonCreditRec.disbursement_wire_transfer_internal.getValue()) || 0;
    var origWireExternal = parseFloat(nonCreditRec.original_disbursement_wire_transfer_external.getValue()) || 0;
    var origWireInternal = parseFloat(nonCreditRec.original_disbursement_wire_transfer_internal.getValue()) || 0;
    
    gs.info('SIGNATURE TESTING Wire External: ' + wireExternal);
    gs.info('SIGNATURE TESTING Wire Internal: ' + wireInternal);
    gs.info('SIGNATURE TESTING Orig Wire External: ' + origWireExternal);
    gs.info('SIGNATURE TESTING Orig Wire Internal: ' + origWireInternal);
        
    if (requestType == 'new_authority') {
        // NEW: Need task if either value is positive
        needsNonCreditTask = (wireExternal > 0 || wireInternal > 0);
        gs.info('SIGNATURE TESTING NEW logic - needsNonCreditTask: ' + needsNonCreditTask);
    }
    else if (requestType == 'change_to_existing_authority') {
        // CHANGE: Need task if either value changed from original
        needsNonCreditTask = (wireExternal != origWireExternal || wireInternal != origWireInternal);
        gs.info('SIGNATURE TESTING CHANGE logic - needsNonCreditTask: ' + needsNonCreditTask);
    }
    else if (requestType == 'remove_authority') {
        // REMOVE: Need task if either current value is positive (indicates there was something to remove)
        // For removals, original_ fields are always 0, so we check current values
        needsNonCreditTask = (wireExternal > 0 || wireInternal > 0);
        gs.info('SIGNATURE TESTING REMOVE logic - needsNonCreditTask: ' + needsNonCreditTask);
    }
}
    
gs.info('SIGNATURE TESTING needsCreditTask: ' + needsCreditTask);
gs.info('SIGNATURE TESTING needsNonCreditTask: ' + needsNonCreditTask);

// Determine final record_type or exit early
if (!needsCreditTask && !needsNonCreditTask) {
    gs.info('SIGNATURE TESTING RESULT: none');
    return 'none'; // No task needed at all
}
if (needsCreditTask && needsNonCreditTask) {
    gs.info('SIGNATURE TESTING RESULT: both');
    return 'both';
}
if (needsCreditTask) {
    gs.info('SIGNATURE TESTING RESULT: credit');
    return 'credit';
}
gs.info('SIGNATURE TESTING RESULT: non-credit');
return 'non-credit';
