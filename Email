(function runMailScript(current, template, email, email_action, event) {
    
    // Get parent record from the approval record
    var parent = current.sysapproval.getRefRecord();
    var isChange = parent.request_type == 'change_to_existing_authority';
    
    // Build email content
    var content = '';
    
    // Header section with parent record details
    content += '<div style="font-family: Arial, sans-serif; color: #000000; max-width: 800px;">';
    content += '<h2 style="color: #00aae3; border-bottom: 3px solid; border-image: linear-gradient(to right, #00aae3, #3363ff, #7b12d4) 1; padding-bottom: 10px;">Request Details</h2>';
    
    // Parent record information
    content += '<div style="background-color: #f5f5f5; padding: 15px; margin: 20px 0; border-left: 4px solid #00aae3;">';
    content += '<table style="width: 100%; border-collapse: collapse;">';
    content += '<tr><td style="padding: 8px; font-weight: bold; width: 200px;">Request Number:</td><td style="padding: 8px;">' + parent.number + '</td></tr>';
    content += '<tr><td style="padding: 8px; font-weight: bold;">Request Type:</td><td style="padding: 8px;">' + parent.request_type.getDisplayValue() + '</td></tr>';
    content += '<tr><td style="padding: 8px; font-weight: bold;">Job Code:</td><td style="padding: 8px;">' + parent.job_code.getDisplayValue() + '</td></tr>';
    content += '<tr><td style="padding: 8px; font-weight: bold;">Opened By:</td><td style="padding: 8px;">' + parent.opened_by.getDisplayValue() + '</td></tr>';
    content += '<tr><td style="padding: 8px; font-weight: bold;">Requested For:</td><td style="padding: 8px;">' + parent.requested_for.getDisplayValue() + '</td></tr>';
    content += '<tr><td style="padding: 8px; font-weight: bold; vertical-align: top;">Overall Business Need:</td><td style="padding: 8px;">' + parent.overall_business_need + '</td></tr>';
    content += '</table>';
    content += '</div>';
    
    // Query child tables to get actual limit data
    var creditGr = new GlideRecord('x_banun_bunow_si_0_credit_authority_limits');
    creditGr.addQuery('parent', parent.sys_id);
    creditGr.query();
    var creditLimits = creditGr.hasNext() ? creditGr : null;
    if (creditLimits) creditGr.next();
    
    var nonCreditGr = new GlideRecord('x_banun_bunow_si_0_non_credit_authority_limits');
    nonCreditGr.addQuery('parent', parent.sys_id);
    nonCreditGr.query();
    var nonCreditLimits = nonCreditGr.hasNext() ? nonCreditGr : null;
    if (nonCreditLimits) nonCreditGr.next();
    
    // Authority Limits Section
    content += '<h3 style="color: #0066cc; margin-top: 30px;">Requested Authority Limits</h3>';
    
    if (creditLimits || nonCreditLimits) {
        content += '<div style="display: table; width: 100%; border-collapse: collapse; margin: 20px 0;">';
        
        // Create two columns layout
        content += '<div style="display: table-row;">';
        
        // Non-Credit Authority Column (Left)
        if (nonCreditLimits) {
            content += '<div style="display: table-cell; width: 48%; vertical-align: top; padding-right: 2%;">';
            content += '<div style="background: white; border-left: 4px solid #27ae60; border-radius: 4px; padding: 15px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">';
            content += '<h4 style="color: #27ae60; margin: 0 0 15px 0; font-size: 14px; text-transform: uppercase;">Non-Credit Authority</h4>';
            
            // Disbursement Group
            var hasDisbursement = nonCreditGr.disbursement_ach || nonCreditGr.disbursement_wire_transfer_external || 
                                  nonCreditGr.disbursement_wire_transfer_internal || nonCreditGr.disbursement_official_checks_external || 
                                  nonCreditGr.disbursement_official_checks_internal;
            
            if (hasDisbursement) {
                content += '<div style="margin-bottom: 15px;">';
                content += '<div style="font-weight: 600; color: #2c3e50; font-size: 13px; margin-bottom: 6px; padding-bottom: 4px; border-bottom: 1px solid #dee2e6;">Disbursement</div>';
                
                if (nonCreditGr.disbursement_ach) {
                    content += buildLimitRow('ACH', nonCreditGr.disbursement_ach, nonCreditGr.original_disbursement_ach, isChange, true);
                }
                if (nonCreditGr.disbursement_wire_transfer_external) {
                    content += buildLimitRow('Wire Transfer External', nonCreditGr.disbursement_wire_transfer_external, nonCreditGr.original_disbursement_wire_transfer_external, isChange, true);
                }
                if (nonCreditGr.disbursement_wire_transfer_internal) {
                    content += buildLimitRow('Wire Transfer Internal', nonCreditGr.disbursement_wire_transfer_internal, nonCreditGr.original_disbursement_wire_transfer_internal, isChange, true);
                }
                if (nonCreditGr.disbursement_official_checks_external) {
                    content += buildLimitRow('Official Checks External', nonCreditGr.disbursement_official_checks_external, nonCreditGr.original_disbursement_official_checks_external, isChange, true);
                }
                if (nonCreditGr.disbursement_official_checks_internal) {
                    content += buildLimitRow('Official Checks Internal', nonCreditGr.disbursement_official_checks_internal, nonCreditGr.original_disbursement_official_checks_internal, isChange, true);
                }
                content += '</div>';
            }
            
            // Check Cashing Group
            var hasCheckCashing = nonCreditGr.check_cashing_on_us || nonCreditGr.check_cashing_not_on_us;
            
            if (hasCheckCashing) {
                content += '<div style="margin-bottom: 15px;">';
                content += '<div style="font-weight: 600; color: #2c3e50; font-size: 13px; margin-bottom: 6px; padding-bottom: 4px; border-bottom: 1px solid #dee2e6;">Check Cashing & Cash Withdrawal</div>';
                
                if (nonCreditGr.check_cashing_on_us) {
                    content += buildLimitRow('On-Us (Checks & Cash Withdrawals)', nonCreditGr.check_cashing_on_us, nonCreditGr.original_check_cashing_on_us, isChange, true);
                }
                if (nonCreditGr.check_cashing_not_on_us) {
                    content += buildLimitRow('Not On-Us (Checks)', nonCreditGr.check_cashing_not_on_us, nonCreditGr.original_check_cashing_not_on_us, isChange, true);
                }
                content += '</div>';
            }
            
            // Other Non-Credit Limits
            if (nonCreditGr.remote_deposit) {
                content += buildLimitRow('Remote Deposit', nonCreditGr.remote_deposit, nonCreditGr.original_remote_deposit, isChange, false);
            }
            if (nonCreditGr.treasury_solutions_company_wire_limits) {
                content += buildLimitRow('Treasury Solutions Company Wire Limits', nonCreditGr.treasury_solutions_company_wire_limits, nonCreditGr.original_treasury_solutions_company_wire_limits, isChange, false);
            }
            if (nonCreditGr.fx_wire_limits) {
                content += buildLimitRow('FX Wire Limits', nonCreditGr.fx_wire_limits, nonCreditGr.original_fx_wire_limits, isChange, false);
            }
            
            content += '</div>';
            content += '</div>';
        }
        
        // Credit Authority Column (Right)
        if (creditLimits) {
            content += '<div style="display: table-cell; width: 48%; vertical-align: top; padding-left: 2%;">';
            content += '<div style="background: white; border-left: 4px solid #e74c3c; border-radius: 4px; padding: 15px; box-shadow: 0 2px 4px rgba(0,0,0,0.1);">';
            content += '<h4 style="color: #e74c3c; margin: 0 0 15px 0; font-size: 14px; text-transform: uppercase;">Credit Authority</h4>';
            
            // Overdraft Group
            var hasOverdraft = creditGr.overdraft_external_accounts || creditGr.overdraft_internal_accounts;
            
            if (hasOverdraft) {
                content += '<div style="margin-bottom: 15px;">';
                content += '<div style="font-weight: 600; color: #2c3e50; font-size: 13px; margin-bottom: 6px; padding-bottom: 4px; border-bottom: 1px solid #dee2e6;">Overdraft</div>';
                
                if (creditGr.overdraft_external_accounts) {
                    content += buildLimitRow('External Accounts', creditGr.overdraft_external_accounts, creditGr.original_overdraft_external_accounts, isChange, true);
                }
                if (creditGr.overdraft_internal_accounts) {
                    content += buildLimitRow('Internal Accounts', creditGr.overdraft_internal_accounts, creditGr.original_overdraft_internal_accounts, isChange, true);
                }
                content += '</div>';
            }
            
            // Unavailable Funds Group
            var hasUnavailable = creditGr.unavailable_funds_external_accounts || creditGr.unavailable_funds_internal_accounts;
            
            if (hasUnavailable) {
                content += '<div style="margin-bottom: 15px;">';
                content += '<div style="font-weight: 600; color: #2c3e50; font-size: 13px; margin-bottom: 6px; padding-bottom: 4px; border-bottom: 1px solid #dee2e6;">Unavailable Funds</div>';
                
                if (creditGr.unavailable_funds_external_accounts) {
                    content += buildLimitRow('External Accounts', creditGr.unavailable_funds_external_accounts, creditGr.original_unavailable_funds_external_accounts, isChange, true);
                }
                if (creditGr.unavailable_funds_internal_accounts) {
                    content += buildLimitRow('Internal Accounts', creditGr.unavailable_funds_internal_accounts, creditGr.original_unavailable_funds_internal_accounts, isChange, true);
                }
                content += '</div>';
            }
            
            content += '</div>';
            content += '</div>';
        }
        
        content += '</div>';
        content += '</div>';
    }
    
    // Action buttons
    content += '<div style="margin: 30px 0; padding: 20px; background-color: #f0f0f0; border-radius: 5px;">';
    content += '<p style="margin: 0 0 15px 0; font-weight: bold;">Please review this request and take appropriate action:</p>';
    content += '<a href="${approve_link}" style="display: inline-block; padding: 12px 30px; background-color: #28a745; color: white; text-decoration: none; border-radius: 5px; margin-right: 10px;">Approve</a>';
    content += '<a href="${reject_link}" style="display: inline-block; padding: 12px 30px; background-color: #dc3545; color: white; text-decoration: none; border-radius: 5px;">Reject</a>';
    content += '</div>';
    
    content += '<p style="color: #666; font-size: 12px; margin-top: 30px; border-top: 1px solid #ddd; padding-top: 15px;">This is an automated notification from the Signature Authority application. Please do not reply to this email.</p>';
    content += '</div>';
    
    // Helper function to build a limit row with optional original value
    function buildLimitRow(label, newValue, originalValue, showOriginal, indented) {
        var row = '<div style="padding: 6px 0; border-bottom: 1px solid #ecf0f1;' + (indented ? ' padding-left: 15px;' : '') + '">';
        row += '<div style="font-size: 13px; color: #5a6c7d; margin-bottom: 3px;">' + label + '</div>';
        row += '<div style="display: flex; justify-content: space-between;">';
        
        if (showOriginal && originalValue) {
            row += '<div style="flex: 1;"><strong>New:</strong> $' + formatCurrency(newValue) + '</div>';
            row += '<div style="flex: 1; text-align: right;"><strong>Original:</strong> $' + formatCurrency(originalValue) + '</div>';
        } else {
            row += '<div style="font-weight: 600; color: #2c3e50;">$' + formatCurrency(newValue) + '</div>';
        }
        
        row += '</div>';
        row += '</div>';
        return row;
    }
    
    // Helper function to format currency
    function formatCurrency(value) {
        if (!value) return '0.00';
        return parseFloat(value).toFixed(2).replace(/\B(?=(\d{3})+(?!\d))/g, ',');
    }
    
    template.print(content);
    
})(current, template, email, email_action, event);
