<!-- HTML Template -->
<div class="job-code-employees-widget">
  <div ng-if="!c.jobCode" class="alert alert-info">
    <i class="fa fa-info-circle"></i>
    Please select a job code to view employees
  </div>
  
  <div ng-if="c.jobCode && c.loading" class="text-center">
    <i class="fa fa-spinner fa-spin fa-2x"></i>
    <p>Loading employees...</p>
  </div>
  
  <div ng-if="c.jobCode && !c.loading && c.employees.length === 0" class="alert alert-warning">
    <i class="fa fa-exclamation-triangle"></i>
    No employees found for job code <strong>{{c.jobCodeDisplay || 'Unknown'}}</strong>
  </div>
  
  <div ng-if="c.jobCode && !c.loading && c.employees.length > 0" class="employees-container">
    <h4 class="employees-header">
      <i class="fa fa-users"></i>
      Employees With Job Code: <strong>{{c.jobCodeDisplay || 'Unknown'}}</strong>
      <span class="employee-count">({{c.employees.length}} total)</span>
    </h4>
    
    <div class="table-responsive">
      <table class="table table-striped table-hover">
        <thead>
          <tr>
            <th>Name</th>
            <th>Title</th>
            <th>Manager</th>
          </tr>
        </thead>
        <tbody>
          <tr ng-repeat="employee in c.getCurrentPageEmployees()">
            <td>{{employee.name}}</td>
            <td>{{employee.title}}</td>
            <td>{{employee.manager_display}}</td>
          </tr>
        </tbody>
      </table>
    </div>
    
    <!-- Pagination controls -->
    <div ng-if="c.totalPages > 1" class="pagination-controls">
      <nav aria-label="Employee pagination">
        <ul class="pagination">
          <li class="page-item" ng-class="{disabled: c.currentPage === 1}">
            <a class="page-link" href="javascript:void(0)" ng-click="c.previousPage()" aria-label="Previous">
              <span aria-hidden="true">&laquo;</span>
            </a>
          </li>
          <li class="page-item" ng-repeat="page in c.getPageNumbers()" 
              ng-class="{active: page === c.currentPage}">
            <a class="page-link" href="javascript:void(0)" ng-click="c.goToPage(page)">{{page}}</a>
          </li>
          <li class="page-item" ng-class="{disabled: c.currentPage === c.totalPages}">
            <a class="page-link" href="javascript:void(0)" ng-click="c.nextPage()" aria-label="Next">
              <span aria-hidden="true">&raquo;</span>
            </a>
          </li>
        </ul>
      </nav>
      <div class="pagination-info">
        Showing {{c.getStartIndex() + 1}}-{{c.getEndIndex()}} of {{c.employees.length}} employees
      </div>
    </div>
  </div>
</div>




<!-- CSS -->
.job-code-employees-widget {
  padding: 15px;
  font-family: 'Source Sans Pro', Arial, sans-serif;
}

.alert {
  padding: 12px 15px;
  border-radius: 4px;
  margin-bottom: 15px;
  border: 1px solid transparent;
}

.alert-info {
  background-color: #d9edf7;
  border-color: #bce8f1;
  color: #31708f;
}

.alert-warning {
  background-color: #fcf8e3;
  border-color: #faebcc;
  color: #8a6d3b;
}

.employees-container {
  margin-top: 15px;
}

.employees-header {
  color: #2c3e50;
  border-bottom: 2px solid #3498db;
  padding-bottom: 8px;
  margin-bottom: 20px;
  display: flex;
  align-items: center;
  gap: 10px;
}

.employee-count {
  font-size: 14px;
  color: #7f8c8d;
  font-weight: normal;
  margin-left: auto;
}

.table-responsive {
  overflow-x: auto;
  margin-bottom: 20px;
}

.table {
  width: 100%;
  background: white;
  border: 1px solid #e9ecef;
  border-radius: 4px;
}

.table thead th {
  background-color: #f8f9fa;
  border-bottom: 2px solid #dee2e6;
  color: #495057;
  font-weight: 600;
  padding: 12px;
  text-align: left;
}

.table tbody td {
  padding: 10px 12px;
  border-bottom: 1px solid #dee2e6;
  vertical-align: middle;
}

.table tbody tr:last-child td {
  border-bottom: none;
}

.table tbody tr:hover {
  background-color: #f8f9fa;
}

.pagination-controls {
  display: flex;
  justify-content: space-between;
  align-items: center;
  flex-wrap: wrap;
  gap: 15px;
}

.pagination {
  display: flex;
  list-style: none;
  padding: 0;
  margin: 0;
  gap: 5px;
}

.page-item {
  display: inline-block;
}

.page-link {
  display: block;
  padding: 6px 12px;
  color: #3498db;
  text-decoration: none;
  background-color: white;
  border: 1px solid #dee2e6;
  border-radius: 4px;
  transition: all 0.3s;
}

.page-link:hover {
  background-color: #e9ecef;
  border-color: #adb5bd;
}

.page-item.active .page-link {
  background-color: #3498db;
  border-color: #3498db;
  color: white;
}

.page-item.disabled .page-link {
  color: #6c757d;
  pointer-events: none;
  cursor: not-allowed;
  background-color: #fff;
  border-color: #dee2e6;
  opacity: 0.5;
}

.pagination-info {
  color: #6c757d;
  font-size: 14px;
}

.fa {
  margin-right: 6px;
}

.text-center {
  text-align: center;
  padding: 30px;
}

.fa-spinner {
  color: #3498db;
}

@media (max-width: 768px) {
  .employees-header {
    flex-wrap: wrap;
  }
  
  .employee-count {
    margin-left: 0;
    width: 100%;
  }
  
  .pagination-controls {
    flex-direction: column;
    align-items: stretch;
  }
  
  .pagination {
    justify-content: center;
  }
  
  .pagination-info {
    text-align: center;
  }
}





<!-- SERVER SCRIPT -->
(function() {
  'use strict';

  if (input && input.action === 'getEmployees') {
    var jobCodeSysId = input.job_code; // This is the sys_id from the reference field
    var employees = [];
    var jobCodeDisplayValue = '';
    var jobCodeValue = ''; // The actual job code string value
    
    if (jobCodeSysId) {
      // Get the actual job code value from the job code table
      var jobGr = new GlideRecord('x_banun_rbac_job_code');
      if (jobGr.get(jobCodeSysId)) {
        // Get the display value
        jobCodeDisplayValue = jobGr.getDisplayValue();
        
        // Get the actual job code value - this should match what's stored in u_job_code
        jobCodeValue = jobGr.getValue('job_code') || 
                      jobGr.getValue('u_job_code') || 
                      jobGr.getValue('code') || 
                      jobGr.getDisplayValue(); // fallback to display value
      }
      
      // Query the sys_user table for active users with this job code STRING value
      var userGr = new GlideRecord('sys_user');
      userGr.addQuery('u_job_code', jobCodeValue); // Compare string to string
      userGr.addQuery('active', true);
      userGr.orderBy('name');
      userGr.query();
      
      while (userGr.next()) {
        var employee = {
          sys_id: userGr.getValue('sys_id'),
          name: userGr.getValue('name'),
          title: userGr.getValue('title') || '',
          manager: userGr.getValue('manager'),
          manager_display: userGr.manager.getDisplayValue() || ''
        };
        
        employees.push(employee);
      }
    }
    
    data.employees = employees;
    data.jobCodeDisplay = jobCodeDisplayValue;
  }
})();




<!-- CLIENT CONTROLLER -->
api.controller = function($scope, spUtil, $timeout) {
  var c = this;
  
  // Initialize variables
  c.jobCode = '';
  c.jobCodeDisplay = '';
  c.employees = [];
  c.loading = false;
  
  // Pagination variables
  c.currentPage = 1;
  c.pageSize = 10;
  c.totalPages = 1;
  
  // Function to get job code value from the form
  c.getJobCodeValue = function() {
    try {
      // Get job code
      if (typeof g_form !== 'undefined' && g_form.getValue) {
        return g_form.getValue('job_code');
      }
      
      // Check if we're in a Service Portal form
      if (window.parent && window.parent.g_form) {
        return window.parent.g_form.getValue('job_code');
      }
      
      // Query for record producer fields
      var jobCodeField = document.querySelector('select[name="job_code"], input[name="job_code"], [data-name="job_code"] select, [data-name="job_code"] input');
      if (jobCodeField) {
        return jobCodeField.value || jobCodeField.selectedOptions?.[0]?.value || '';
      }
      
      // Angular form scope (for Service Portal)
      if ($scope.data && $scope.data.job_code) {
        return $scope.data.job_code;
      }
      
    } catch (e) {
      console.log('Error getting job code value:', e);
    }
    
    return '';
  };
  
  // Set up polling to monitor job code changes
  c.setupJobCodeMonitoring = function() {
    var lastJobCode = '';
    
    // Poll for changes every 500ms
    var checkInterval = setInterval(function() {
      var currentJobCode = c.getJobCodeValue();
      
      if (currentJobCode !== lastJobCode) {
        console.log('Job code changed from', lastJobCode, 'to', currentJobCode);
        lastJobCode = currentJobCode;
        c.jobCode = currentJobCode;
        
        $timeout(function() {
          c.loadEmployees();
        });
      }
    }, 500);
    
    // Clean up interval when scope is destroyed
    $scope.$on('$destroy', function() {
      clearInterval(checkInterval);
    });
    
    // Also try to set up direct event listeners
    $timeout(function() {
      c.setupDirectListeners();
    }, 1000);
  };
  
  // Set up direct event listeners
  c.setupDirectListeners = function() {
    // Try to add change listeners to job code fields
    var selectors = [
      'select[name="job_code"]',
      'input[name="job_code"]', 
      '[data-name="job_code"] select',
      '[data-name="job_code"] input',
      '#job_code'
    ];
    
    selectors.forEach(function(selector) {
      var elements = document.querySelectorAll(selector);
      elements.forEach(function(element) {
        element.addEventListener('change', function() {
          console.log('Direct change event detected');
          $timeout(function() {
            c.jobCode = c.getJobCodeValue();
            c.loadEmployees();
          });
        });
      });
    });
    
    // Try g_form callback if available
    try {
      if (typeof g_form !== 'undefined' && g_form.addOnChangeCallback) {
        g_form.addOnChangeCallback('job_code', function() {
          console.log('g_form change callback triggered');
          $timeout(function() {
            c.jobCode = c.getJobCodeValue();
            c.loadEmployees();
          });
        });
      }
    } catch (e) {
      console.log('Could not set up g_form callback:', e);
    }
  };
  
  // Function to load employees
  c.loadEmployees = function() {
    console.log('Loading employees for job code:', c.jobCode);
    
    if (!c.jobCode) {
      c.employees = [];
      c.currentPage = 1;
      c.totalPages = 1;
      return;
    }
    
    c.loading = true;
    
    // Call server script to get employees
    c.server.get({
      action: 'getEmployees',
      job_code: c.jobCode
    }).then(function(response) {
      console.log('Server response:', response);
      c.employees = response.data.employees || [];
      c.jobCodeDisplay = response.data.jobCodeDisplay || '';
      c.currentPage = 1;
      c.totalPages = Math.ceil(c.employees.length / c.pageSize);
      c.loading = false;
    }).catch(function(error) {
      console.error('Error loading employees:', error);
      spUtil.addErrorMessage('Failed to load employees');
      c.employees = [];
      c.loading = false;
    });
  };
  
  // Pagination functions
  c.getCurrentPageEmployees = function() {
    var start = (c.currentPage - 1) * c.pageSize;
    var end = start + c.pageSize;
    return c.employees.slice(start, end);
  };
  
  c.getStartIndex = function() {
    return (c.currentPage - 1) * c.pageSize;
  };
  
  c.getEndIndex = function() {
    var end = c.currentPage * c.pageSize;
    return end > c.employees.length ? c.employees.length : end;
  };
  
  c.previousPage = function() {
    if (c.currentPage > 1) {
      c.currentPage--;
    }
  };
  
  c.nextPage = function() {
    if (c.currentPage < c.totalPages) {
      c.currentPage++;
    }
  };
  
  c.goToPage = function(page) {
    if (page >= 1 && page <= c.totalPages) {
      c.currentPage = page;
    }
  };
  
  c.getPageNumbers = function() {
    var pages = [];
    var maxPagesToShow = 5;
    var startPage = 1;
    var endPage = c.totalPages;
    
    if (c.totalPages > maxPagesToShow) {
      var middlePage = Math.floor(maxPagesToShow / 2);
      if (c.currentPage <= middlePage) {
        endPage = maxPagesToShow;
      } else if (c.currentPage >= c.totalPages - middlePage) {
        startPage = c.totalPages - maxPagesToShow + 1;
      } else {
        startPage = c.currentPage - middlePage;
        endPage = c.currentPage + middlePage;
      }
    }
    
    for (var i = startPage; i <= endPage; i++) {
      pages.push(i);
    }
    
    return pages;
  };
  
  // Initialize on load
  $timeout(function() {
    c.jobCode = c.getJobCodeValue();
    console.log('Initial job code:', c.jobCode);
    
    if (c.jobCode) {
      c.loadEmployees();
    }
    
    // Set up monitoring for job code changes
    c.setupJobCodeMonitoring();
  }, 500);
};




<!-- Record Producer Script -->
// Authority Widget Record Producer Script
// Processes widget data and creates parent/child authority records

var parentId = current.getUniqueValue();
var shouldProceed = true; // Flag to control processing flow

// Check authority limits validation first
var requestType = producer.request_type ? producer.request_type.toString() : '';
var jobCode = producer.job_code ? producer.job_code.toString() : '';

// If we have both request type and job code, check if this combination should be blocked
if (requestType && jobCode) {
    // Get authority limits to check if they exist
    var limitsExist = false;
    var limitGr = new GlideRecord('x_banun_bunow_si_0_authority_limits');
    limitGr.addQuery('job_code', jobCode);
    limitGr.addQuery('active', true);
    limitGr.query();
    if (limitGr.hasNext()) {
        limitsExist = true;
    }

    var shouldBlock = false;
    var blockMessage = '';

    // Get job code display value
    var jobCodeDisplay = '';
    var jobGr = new GlideRecord('x_banun_rbac_job_code');
    if (jobGr.get(jobCode)) {
        jobCodeDisplay = jobGr.getDisplayValue();
    }

    // Check blocking conditions
    if (requestType === 'new_authority' && limitsExist) {
        shouldBlock = true;
        blockMessage = 'Authority limits already exist for job code ' + jobCodeDisplay + '. Please submit a "Change to Existing Authority" request instead.';
    } else if (requestType === 'change_to_existing_authority' && !limitsExist) {
        shouldBlock = true;
        blockMessage = 'No authority limits found for job code ' + jobCodeDisplay + '. Please submit a "New Authority" request instead.';
    } else if (requestType === 'remove_authority' && !limitsExist) {
        shouldBlock = true;
        blockMessage = 'No existing authority limits found for job code ' + jobCodeDisplay + '. Cannot proceed with removal request.';
    }

    if (shouldBlock) {
        gs.addErrorMessage(blockMessage);
        current.setAbortAction(true);
        shouldProceed = false; // Prevent further processing
    }
}

// Only proceed if authority limits validation passed
if (shouldProceed) {
    gs.info('AUTH_FIX_DEBUG: Starting form validation');
    gs.info('AUTH_FIX_DEBUG: Request type = ' + requestType);
    gs.info('AUTH_FIX_DEBUG: form_is_valid value = ' + producer.form_is_valid);
    gs.info('AUTH_FIX_DEBUG: form_validation_errors = ' + (producer.form_validation_errors || 'none'));

    var validationPassed = false;

    // Handle remove_authority validation on server side
    if (requestType === 'remove_authority') {
        gs.info('AUTH_FIX_DEBUG: Server-side remove_authority validation');
        // For remove requests, completely ignore client validation and only check business justification
        var businessNeed = producer.overall_business_need ? producer.overall_business_need.toString().trim() : '';
        if (businessNeed && businessNeed.length > 0) {
            validationPassed = true;
            gs.info('AUTH_FIX_DEBUG: Remove validation passed - business need provided');
        } else {
            gs.info('AUTH_FIX_DEBUG: Remove validation failed - business need missing');
            gs.addErrorMessage('Overall Business Need is required');
            current.setAbortAction(true);
            validationPassed = false;
        }
    } else {
        // For other request types, use the client validation result
        var formIsValid = producer.form_is_valid ? producer.form_is_valid.toString().trim() : 'false';
        validationPassed = (formIsValid === 'true' || formIsValid === true || producer.form_is_valid === true);
        gs.info('AUTH_FIX_DEBUG: Using client validation result = ' + validationPassed);

        // If client validation failed, show the client errors
        if (!validationPassed) {
            var errors = producer.form_validation_errors ? producer.form_validation_errors.toString().split('|') : ['Form validation failed'];
            gs.info('AUTH_FIX_DEBUG: Client validation failed, errors = ' + errors.join('; '));
            gs.addErrorMessage('Please correct the following errors: ' + errors.join('; '));
            current.setAbortAction(true);
        }
    }

    gs.info('AUTH_FIX_DEBUG: Final validationPassed = ' + validationPassed);

    if (validationPassed) {
        gs.info('AUTH_FIX_DEBUG: Validation passed, proceeding');

        // Set job code string fields on parent record for display purposes
        if (producer.job_code) {
            var jobCodeGR = new GlideRecord('x_banun_rbac_job_code');
            if (jobCodeGR.get(producer.job_code)) {
                current.setValue('job_code_string', jobCodeGR.getValue('job_code'));
                current.setValue('job_function_description', jobCodeGR.getValue('job_function_description'));
            }
        }

        // Process authority data if provided by widget (skip for remove requests)
        if (requestType !== 'remove_authority' && producer.authority_types && producer.authority_data) {
            var authority_types = producer.authority_types.toString().split('|');
            var authority_data_strings = producer.authority_data.toString().split('|');

            // Create child records for each authority type selected
            for (var i = 0; i < authority_types.length; i++) {
                var authorityType = authority_types[i];
                var authorityDataStr = authority_data_strings[i];

                try {
                    var authorityData = JSON.parse(authorityDataStr);

                    if (authorityType === 'non_credit') {
                        // Create non-credit authority limit record
                        var nonCreditGR = new GlideRecord('x_banun_bunow_si_0_non_credit_authority_limits');
                        nonCreditGR.initialize();
                        nonCreditGR.setValue('parent', parentId);
                        if (producer.job_code) {
                            nonCreditGR.setValue('job_code', producer.job_code);
                        }
                        if (authorityData.disbursement_ach)
                            nonCreditGR.setValue('disbursement_ach', authorityData.disbursement_ach);
                        if (authorityData.disbursement_wire_transfer_external)
                            nonCreditGR.setValue('disbursement_wire_transfer_external', authorityData.disbursement_wire_transfer_external);
                        if (authorityData.disbursement_wire_transfer_internal)
                            nonCreditGR.setValue('disbursement_wire_transfer_internal', authorityData.disbursement_wire_transfer_internal);
                        if (authorityData.disbursement_official_checks_external)
                            nonCreditGR.setValue('disbursement_official_checks_external', authorityData.disbursement_official_checks_external);
                        if (authorityData.disbursement_official_checks_internal)
                            nonCreditGR.setValue('disbursement_official_checks_internal', authorityData.disbursement_official_checks_internal);
                        if (authorityData.check_cashing_on_us)
                            nonCreditGR.setValue('check_cashing_on_us', authorityData.check_cashing_on_us);
                        if (authorityData.check_cashing_not_on_us)
                            nonCreditGR.setValue('check_cashing_not_on_us', authorityData.check_cashing_not_on_us);
                        if (authorityData.remote_deposit)
                            nonCreditGR.setValue('remote_deposit', authorityData.remote_deposit);
                        if (authorityData.treasury_solutions_company_wire_limits)
                            nonCreditGR.setValue('treasury_solutions_company_wire_limits', authorityData.treasury_solutions_company_wire_limits);
                        if (authorityData.fx_wire_limits)
                            nonCreditGR.setValue('fx_wire_limits', authorityData.fx_wire_limits);
                        nonCreditGR.insert();
                    } else if (authorityType === 'credit') {
                        // Create credit authority limit record
                        var creditGR = new GlideRecord('x_banun_bunow_si_0_credit_authority_limits');
                        creditGR.initialize();
                        creditGR.setValue('parent', parentId);
                        if (producer.job_code) {
                            creditGR.setValue('job_code', producer.job_code);
                        }
                        if (authorityData.overdraft_internal_accounts) {
                            creditGR.setValue('overdraft_internal_accounts', authorityData.overdraft_internal_accounts);
                        }
                        if (authorityData.overdraft_external_accounts) {
                            creditGR.setValue('overdraft_external_accounts', authorityData.overdraft_external_accounts);
                        }
                        if (authorityData.unavailable_funds_internal_accounts) {
                            creditGR.setValue('unavailable_funds_internal_accounts', authorityData.unavailable_funds_internal_accounts);
                        }
                        if (authorityData.unavailable_funds_external_accounts) {
                            creditGR.setValue('unavailable_funds_external_accounts', authorityData.unavailable_funds_external_accounts);
                        }
                        creditGR.insert();
                    }
                } catch (e) {
                    gs.addErrorMessage('Error processing authority data: ' + e.message);
                }
            }
        }
    }
}
