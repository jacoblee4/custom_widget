// HTML

<div class="authority-limits-widget">
  <!-- No job code selected message -->
  <div ng-if="!c.jobCode" class="alert alert-info">
    <i class="fa fa-info-circle"></i>
    Please select a job code to view authority limits
  </div>
  
  <!-- Loading spinner -->
  <div ng-if="c.jobCode && c.loading" class="text-center">
    <i class="fa fa-spinner fa-spin fa-2x"></i>
    <p>Loading authority limits...</p>
  </div>
  
  <!-- NEW AUTHORITY: Error when limits exist -->
  <div ng-if="c.isNewAuthority() && c.jobCode && !c.loading && c.authorityLimits.length > 0" class="alert alert-danger">
    <i class="fa fa-exclamation-circle"></i>
    <strong>Authority limits already exist for job code {{c.jobCodeDisplay || 'Unknown'}}.</strong><br>
    Please submit a "Change to Existing Authority" request instead.
  </div>
  
  <!-- NEW AUTHORITY: Success when no limits found -->
  <div ng-if="c.isNewAuthority() && c.jobCode && !c.loading && c.authorityLimits.length === 0" class="alert alert-success">
    <i class="fa fa-check-circle"></i>
    No existing authority limits found for job code <strong>{{c.jobCodeDisplay || 'Unknown'}}</strong>.<br>
    Please fill out the Authority Limit Details below.
  </div>
  
  <!-- CHANGE AUTHORITY: Error when no limits found -->
  <div ng-if="c.isChangeAuthority() && c.jobCode && !c.loading && c.authorityLimits.length === 0" class="alert alert-danger">
    <i class="fa fa-exclamation-circle"></i>
    <strong>No authority limits found for job code {{c.jobCodeDisplay || 'Unknown'}}.</strong><br>
    Please submit a "New Authority" request instead.
  </div>
  
  <!-- REMOVE AUTHORITY: Error when no limits found -->
  <div ng-if="c.isRemoveAuthority() && c.jobCode && !c.loading && c.authorityLimits.length === 0" class="alert alert-danger">
    <i class="fa fa-exclamation-circle"></i>
    <strong>No existing authority limits found for job code {{c.jobCodeDisplay || 'Unknown'}}.</strong><br>
    Cannot proceed with removal request.
  </div>
  
  <!-- REMOVE AUTHORITY: Warning when limits exist -->
  <div ng-if="c.isRemoveAuthority() && c.jobCode && !c.loading && c.authorityLimits.length > 0" class="alert alert-warning">
    <i class="fa fa-warning"></i>
    <strong>Warning:</strong> Submitting the removal request for job code <strong>{{c.jobCodeDisplay || 'Unknown'}}</strong> will remove all the existing authority limits shown below.
  </div>
  
  <!-- Authority limits display -->
  <div ng-if="c.shouldShowLimits()" class="authority-limits-container">
    <h4 class="limits-header">
      <i class="fa fa-shield"></i>
      Existing Authority Limits For Job Code: <strong>{{c.jobCodeDisplay || 'Unknown'}}</strong>
    </h4>
    
    <div ng-repeat="limit in c.authorityLimits" class="limit-record">
      
      <div class="limits-grid">
        <!-- Non-Credit Authority Section (Left) -->
        <div class="limits-section non-credit-limits">
          <h6 class="section-title">
            <i class="fa fa-money"></i>
            Non-Credit Authority
          </h6>
          <div class="limits-table">
            
            <!-- Disbursement Group -->
            <div class="limit-group" ng-if="limit.disbursement_ach || limit.disbursement_wire_transfer_external || limit.disbursement_wire_transfer_internal || limit.disbursement_official_checks_external || limit.disbursement_official_checks_internal">
              <div class="group-header">Disbursement</div>
              <div class="limit-row indented" ng-if="limit.disbursement_ach">
                <span class="limit-label">ACH:</span>
                <span class="limit-value">{{limit.disbursement_ach | currency}}</span>
              </div>
              <div class="limit-row indented" ng-if="limit.disbursement_wire_transfer_external">
                <span class="limit-label">Wire Transfer External:</span>
                <span class="limit-value">{{limit.disbursement_wire_transfer_external | currency}}</span>
              </div>
              <div class="limit-row indented" ng-if="limit.disbursement_wire_transfer_internal">
                <span class="limit-label">Wire Transfer Internal:</span>
                <span class="limit-value">{{limit.disbursement_wire_transfer_internal | currency}}</span>
              </div>
              <div class="limit-row indented" ng-if="limit.disbursement_official_checks_external">
                <span class="limit-label">Official Checks External:</span>
                <span class="limit-value">{{limit.disbursement_official_checks_external | currency}}</span>
              </div>
              <div class="limit-row indented" ng-if="limit.disbursement_official_checks_internal">
                <span class="limit-label">Official Checks Internal:</span>
                <span class="limit-value">{{limit.disbursement_official_checks_internal | currency}}</span>
              </div>
            </div>
            
            <!-- Check Cashing Group -->
            <div class="limit-group" ng-if="limit.check_cashing_on_us || limit.check_cashing_not_on_us">
              <div class="group-header">Check Cashing & Cash Withdrawal</div>
              <div class="limit-row indented" ng-if="limit.check_cashing_on_us">
                <span class="limit-label">On-Us (Checks & Cash Withdrawals):</span>
                <span class="limit-value">{{limit.check_cashing_on_us | currency}}</span>
              </div>
              <div class="limit-row indented" ng-if="limit.check_cashing_not_on_us">
                <span class="limit-label">Not On-Us (Checks):</span>
                <span class="limit-value">{{limit.check_cashing_not_on_us | currency}}</span>
              </div>
            </div>
            
            <!-- Other Non-Credit Limits -->
            <div class="limit-row" ng-if="limit.remote_deposit">
              <span class="limit-label">Remote Deposit:</span>
              <span class="limit-value">{{limit.remote_deposit | currency}}</span>
            </div>
            <div class="limit-row" ng-if="limit.treasury_solutions_company_wire_limits">
              <span class="limit-label">Treasury Solutions Company Wire Limits:</span>
              <span class="limit-value">{{limit.treasury_solutions_company_wire_limits | currency}}</span>
            </div>
            <div class="limit-row" ng-if="limit.fx_wire_limits">
              <span class="limit-label">FX Wire Limits:</span>
              <span class="limit-value">{{limit.fx_wire_limits | currency}}</span>
            </div>
          </div>
        </div>
        
        <!-- Credit Authority Section (Right) -->
        <div class="limits-section credit-limits">
          <h6 class="section-title">
            <i class="fa fa-credit-card"></i>
            Credit Authority
          </h6>
          <div class="limits-table">
            
            <!-- Overdraft Group -->
            <div class="limit-group" ng-if="limit.overdraft_external_accounts || limit.overdraft_internal_accounts">
              <div class="group-header">Overdraft</div>
              <div class="limit-row indented" ng-if="limit.overdraft_external_accounts">
                <span class="limit-label">External Accounts:</span>
                <span class="limit-value">{{limit.overdraft_external_accounts | currency}}</span>
              </div>
              <div class="limit-row indented" ng-if="limit.overdraft_internal_accounts">
                <span class="limit-label">Internal Accounts:</span>
                <span class="limit-value">{{limit.overdraft_internal_accounts | currency}}</span>
              </div>
            </div>
            
            <!-- Unavailable Funds Group -->
            <div class="limit-group" ng-if="limit.unavailable_funds_external_accounts || limit.unavailable_funds_internal_accounts">
              <div class="group-header">Unavailable Funds</div>
              <div class="limit-row indented" ng-if="limit.unavailable_funds_external_accounts">
                <span class="limit-label">External Accounts:</span>
                <span class="limit-value">{{limit.unavailable_funds_external_accounts | currency}}</span>
              </div>
              <div class="limit-row indented" ng-if="limit.unavailable_funds_internal_accounts">
                <span class="limit-label">Internal Accounts:</span>
                <span class="limit-value">{{limit.unavailable_funds_internal_accounts | currency}}</span>
              </div>
            </div>
            
          </div>
        </div>
      </div>
      
      <hr ng-if="!$last" class="record-separator">
    </div>
  </div>
</div>









// CSS 

/* Main widget container */
.authority-limits-widget {
  padding: 15px;
  font-family: 'Source Sans Pro', Arial, sans-serif;
}

/* Alert messages styling */
.alert {
  padding: 12px 15px;
  border-radius: 4px;
  margin-bottom: 15px;
  border: 1px solid transparent;
}

.alert-info {
  background-color: #d9edf7;
  border-color: #bce8f1;
  color: #31708f;
}

.alert-success {
  background-color: #dff0d8;
  border-color: #d6e9c6;
  color: #3c763d;
}

.alert-warning {
  background-color: #fcf8e3;
  border-color: #faebcc;
  color: #8a6d3b;
}

.alert-danger {
  background-color: #f2dede;
  border-color: #ebccd1;
  color: #a94442;
}

/* Main container for authority limits */
.authority-limits-container {
  margin-top: 15px;
}

/* Header styling */
.limits-header {
  color: #2c3e50;
  border-bottom: 2px solid #3498db;
  padding-bottom: 8px;
  margin-bottom: 20px;
}

/* Individual limit record container */
.limit-record {
  background: #f8f9fa;
  border: 1px solid #e9ecef;
  border-radius: 6px;
  padding: 20px;
  margin-bottom: 15px;
}

/* Grid layout for credit/non-credit sections */
.limits-grid {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 20px;
}

/* Section container styling */
.limits-section {
  background: white;
  border-radius: 4px;
  padding: 15px;
  box-shadow: 0 2px 4px rgba(0,0,0,0.1);
}

/* Non-credit section (now on left) with green accent */
.non-credit-limits {
  border-left: 4px solid #27ae60;
}

/* Credit section (now on right) with red accent */
.credit-limits {
  border-left: 4px solid #e74c3c;
}

/* Section title styling */
.section-title {
  color: #2c3e50;
  margin: 0 0 12px 0;
  font-size: 14px;
  font-weight: 600;
  text-transform: uppercase;
}

.non-credit-limits .section-title {
  color: #27ae60;
}

.credit-limits .section-title {
  color: #e74c3c;
}

/* Container for limit rows */
.limits-table {
  display: flex;
  flex-direction: column;
  gap: 8px;
}

/* Grouping styles */
.limit-group {
  margin-bottom: 12px;
}

.limit-group:last-child {
  margin-bottom: 0;
}

/* Group header for disbursements, check cashing, etc. */
.group-header {
  font-weight: 600;
  color: #2c3e50;
  font-size: 13px;
  margin-bottom: 6px;
  padding-bottom: 4px;
  border-bottom: 1px solid #dee2e6;
}

/* Individual limit row */
.limit-row {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 6px 0;
  border-bottom: 1px solid #ecf0f1;
}

/* Indented rows for grouped items */
.limit-row.indented {
  padding-left: 15px;
}

.limit-row:last-child {
  border-bottom: none;
}

/* Label and value styling */
.limit-label {
  font-size: 13px;
  color: #5a6c7d;
  flex: 1;
}

.limit-value {
  font-weight: 600;
  color: #2c3e50;
  text-align: right;
}

/* Separator between multiple records */
.record-separator {
  border: 0;
  border-top: 2px solid #bdc3c7;
  margin: 20px 0;
}

/* Font Awesome icon spacing */
.fa {
  margin-right: 6px;
}

/* Loading spinner container */
.text-center {
  text-align: center;
  padding: 30px;
}

.fa-spinner {
  color: #3498db;
}

/* Mobile responsive design */
@media (max-width: 768px) {
  /* Stack sections vertically on mobile */
  .limits-grid {
    grid-template-columns: 1fr;
  }
  
  /* Stack label and value on mobile */
  .limit-row {
    flex-direction: column;
    align-items: flex-start;
    gap: 4px;
  }
  
  .limit-value {
    text-align: left;
  }
  
  /* Maintain indentation on mobile */
  .limit-row.indented {
    padding-left: 10px;
  }
}







// Server Script

(function() {

  // Check if the request is for getting authority limits
  if (input && input.action === 'getAuthorityLimits') {
    // Extract job code sys_id from the input
    var jobCode = input.job_code;
    var limits = [];
    var jobCodeDisplayValue = '';
    
    if (jobCode) {
      // Retrieve the display value of the job code for UI display
      // This converts the sys_id to the actual job code value (e.g., "JC001")
      var jobGr = new GlideRecord('x_banun_rbac_job_code');
      if (jobGr.get(jobCode)) {
        jobCodeDisplayValue = jobGr.getDisplayValue();
      }
      
      // Query the authority limits table for active limits matching this job code
      var gr = new GlideRecord('x_banun_bunow_si_0_authority_limits');
      gr.addQuery('job_code', jobCode); // Match by job code sys_id
      gr.addQuery('active', true); // Only get active records
      gr.query();
      
      // Process each authority limit record found
      while (gr.next()) {
        // Build the limit object with all authority limit fields
        var limit = {
          // Credit limits - Grouped into Overdraft and Unavailable Funds
          overdraft_external_accounts: gr.getValue('overdraft_external_accounts'),
          overdraft_internal_accounts: gr.getValue('overdraft_internal_accounts'),
          unavailable_funds_external_accounts: gr.getValue('unavailable_funds_external_accounts'),
          unavailable_funds_internal_accounts: gr.getValue('unavailable_funds_internal_accounts'),
          
          // Non-credit limits - Grouped into Disbursements, Check Cashing, and others
          disbursement_ach: gr.getValue('disbursement_ach'),
          disbursement_wire_transfer_external: gr.getValue('disbursement_wire_transfer_external'),
          disbursement_wire_transfer_internal: gr.getValue('disbursement_wire_transfer_internal'),
          disbursement_official_checks_external: gr.getValue('disbursement_official_checks_external'),
          disbursement_official_checks_internal: gr.getValue('disbursement_official_checks_internal'),
          check_cashing_on_us: gr.getValue('check_cashing_on_us'),
          check_cashing_not_on_us: gr.getValue('check_cashing_not_on_us'),
          remote_deposit: gr.getValue('remote_deposit'),
          treasury_solutions_company_wire_limits: gr.getValue('treasury_solutions_company_wire_limits'),
          fx_wire_limits: gr.getValue('fx_wire_limits')
        };
        
        // Add the limit to the array
        limits.push(limit);
      }
    }
    
    // Return the limits array and job code display value to the client
    data.limits = limits;
    data.jobCodeDisplay = jobCodeDisplayValue;
  }
})();








// client controller

api.controller = function($scope, spUtil, $timeout) {
  var c = this;
  
  // Initialize controller variables
  c.jobCode = '';          // Stores the job code sys_id
  c.jobCodeDisplay = '';   // Stores the job code display value
  c.authorityLimits = [];  // Array to hold authority limit records
  c.loading = false;       // Loading state indicator
  c.requestType = '';      // Current request type
  
  // Get the current request type value from the form
  c.getRequestTypeValue = function() {
    try {
      // Method 1: Direct g_form access
      if (typeof g_form !== 'undefined' && g_form.getValue) {
        return g_form.getValue('request_type') || '';
      }
      
      // Method 2: Parent frame g_form (Service Portal)
      if (window.parent && window.parent.g_form) {
        return window.parent.g_form.getValue('request_type') || '';
      }
      
      // Method 3: DOM query for form fields
      var requestTypeField = document.querySelector('select[name="request_type"], input[name="request_type"], [data-name="request_type"] select, [data-name="request_type"] input');
      if (requestTypeField) {
        return requestTypeField.value || requestTypeField.selectedOptions?.[0]?.value || '';
      }
      
      // Method 4: Angular scope data
      if ($scope.data && $scope.data.request_type) {
        return $scope.data.request_type;
      }
      
    } catch (e) {
    }
    
    return '';
  };
  
  // Check if current request type is "New Authority"
  c.isNewAuthority = function() {
    return c.requestType === 'new_authority';
  };
  
  // Check if current request type is "Change to Existing Authority"
  c.isChangeAuthority = function() {
    return c.requestType === 'change_to_existing_authority';
  };
  
  // Check if current request type is "Remove Authority"
  c.isRemoveAuthority = function() {
    return c.requestType === 'remove_authority';
  };
  
  // Determine if existing limits should be displayed
  c.shouldShowLimits = function() {
    if (!c.jobCode || c.loading || c.authorityLimits.length === 0) {
      return false;
    }

    return c.isChangeAuthority() || c.isRemoveAuthority() || c.isNewAuthority();
  };
  
  // Check if form submission should be blocked based on request type and limits
  c.shouldBlockSubmission = function() {
    if (!c.jobCode || c.loading) {
      return false; // Don't block if no job code or still loading
    }
    
    var hasLimits = c.authorityLimits.length > 0;
    
    // Block new authority if limits already exist
    if (c.isNewAuthority() && hasLimits) {
      return true;
    }
    
    // Block change authority if no limits exist
    if (c.isChangeAuthority() && !hasLimits) {
      return true;
    }
    
    // Block remove authority if no limits exist
    if (c.isRemoveAuthority() && !hasLimits) {
      return true;
    }
    
    return false;
  };
  
  //Retrieves the job code value from various possible sources
  c.getJobCodeValue = function() {
    try {
      // Method 1: Direct g_form access (standard ServiceNow forms)
      if (typeof g_form !== 'undefined' && g_form.getValue) {
        return g_form.getValue('job_code');
      }
      
      // Method 2: Parent frame g_form (Service Portal embedded forms)
      if (window.parent && window.parent.g_form) {
        return window.parent.g_form.getValue('job_code');
      }
      
      // Method 3: DOM query for form fields
      var jobCodeField = document.querySelector('select[name="job_code"], input[name="job_code"], [data-name="job_code"] select, [data-name="job_code"] input');
      if (jobCodeField) {
        return jobCodeField.value || jobCodeField.selectedOptions?.[0]?.value || '';
      }
      
      // Method 4: Angular scope data (Service Portal)
      if ($scope.data && $scope.data.job_code) {
        return $scope.data.job_code;
      }
      
    } catch (e) {
    }
    
    return '';
  };
  
  //Retrieves the display value of the selected job code
  c.getJobCodeDisplayValue = function() {
    try {
      // Method 1: g_form display box
      if (typeof g_form !== 'undefined' && g_form.getDisplayBox) {
        var displayBox = g_form.getDisplayBox('job_code');
        if (displayBox && displayBox.value) {
          return displayBox.value;
        }
      }
      
      // Method 2: Selected option text from dropdown
      var jobCodeField = document.querySelector('select[name="job_code"], [data-name="job_code"] select');
      if (jobCodeField && jobCodeField.selectedOptions && jobCodeField.selectedOptions[0]) {
        return jobCodeField.selectedOptions[0].text;
      }
      
      // Method 3: Reference field display input
      var displayField = document.querySelector('input[name="job_code_display"], [data-name="job_code"] input[type="text"]');
      if (displayField) {
        return displayField.value;
      }
      
    } catch (e) {
    }
    
    return '';
  };
  
  //Update form validation status based on current state
  c.updateFormValidation = function() {
    var shouldBlock = c.shouldBlockSubmission();
    
    try {
      // Update Record Producer validation variables
      if (typeof g_form !== 'undefined' && g_form.setValue) {
        g_form.setValue('authority_limits_validation_blocked', shouldBlock ? 'true' : 'false');
      }
      
      // Try parent frame as well
      if (window.parent && window.parent.g_form && window.parent.g_form.setValue) {
        window.parent.g_form.setValue('authority_limits_validation_blocked', shouldBlock ? 'true' : 'false');
      }
    } catch (e) {
    }
  };
  
  /**
   * Sets up polling mechanism to detect job code and request type changes
   * Polls every 500ms to check for changes in form fields
   */
  c.setupFieldMonitoring = function() {
    var lastJobCode = '';
    var lastRequestType = '';
    
    // Create polling interval
    var checkInterval = setInterval(function() {
      var currentJobCode = c.getJobCodeValue();
      var currentRequestType = c.getRequestTypeValue();
      
      // Check if either field has changed
      if (currentJobCode !== lastJobCode || currentRequestType !== lastRequestType) {
        lastJobCode = currentJobCode;
        lastRequestType = currentRequestType;
        c.jobCode = currentJobCode;
        c.requestType = currentRequestType;
        c.jobCodeDisplay = c.getJobCodeDisplayValue();
        
        // Use $timeout to ensure Angular digest cycle
        $timeout(function() {
          c.loadAuthorityLimits();
        });
      }
    }, 500);
    
    // Clean up interval when widget is destroyed
    $scope.$on('$destroy', function() {
      clearInterval(checkInterval);
    });
    
    // Set up direct event listeners after a delay
    $timeout(function() {
      c.setupDirectListeners();
    }, 1000);
  };
  
  /**
   * Sets up direct event listeners on form fields
   * Provides immediate response to changes when possible
   */
  c.setupDirectListeners = function() {
    // Define selectors for job code fields
    var jobCodeSelectors = [
      'select[name="job_code"]',
      'input[name="job_code"]', 
      '[data-name="job_code"] select',
      '[data-name="job_code"] input',
      '#job_code'
    ];
    
    // Define selectors for request type fields
    var requestTypeSelectors = [
      'select[name="request_type"]',
      'input[name="request_type"]',
      '[data-name="request_type"] select',
      '[data-name="request_type"] input',
      '#request_type'
    ];
    
    // Add change event listeners to job code fields
    jobCodeSelectors.forEach(function(selector) {
      var elements = document.querySelectorAll(selector);
      elements.forEach(function(element) {
        element.addEventListener('change', function() {
          $timeout(function() {
            c.jobCode = c.getJobCodeValue();
            c.jobCodeDisplay = c.getJobCodeDisplayValue();
            c.loadAuthorityLimits();
          });
        });
      });
    });
    
    // Add change event listeners to request type fields
    requestTypeSelectors.forEach(function(selector) {
      var elements = document.querySelectorAll(selector);
      elements.forEach(function(element) {
        element.addEventListener('change', function() {
          $timeout(function() {
            c.requestType = c.getRequestTypeValue();
            c.loadAuthorityLimits();
          });
        });
      });
    });
    
    // Try to set up g_form callbacks for native ServiceNow change detection
    try {
      if (typeof g_form !== 'undefined' && g_form.addOnChangeCallback) {
        g_form.addOnChangeCallback('job_code', function() {
          $timeout(function() {
            c.jobCode = c.getJobCodeValue();
            c.jobCodeDisplay = c.getJobCodeDisplayValue();
            c.loadAuthorityLimits();
          });
        });
        
        g_form.addOnChangeCallback('request_type', function() {
          $timeout(function() {
            c.requestType = c.getRequestTypeValue();
            c.loadAuthorityLimits();
          });
        });
      }
    } catch (e) {
    }
  };
  
  /**
   * Loads authority limits from the server for the selected job code
   * Makes a server call to retrieve limit data
   */
  c.loadAuthorityLimits = function() {
    // Clear limits if no job code selected
    if (!c.jobCode) {
      c.authorityLimits = [];
      c.updateFormValidation();
      return;
    }
    
    // Set loading state
    c.loading = true;
    
    // Make server call to get authority limits
    c.server.get({
      action: 'getAuthorityLimits',
      job_code: c.jobCode,
      job_code_display: c.jobCodeDisplay
    }).then(function(response) {
      // Success - update limits and display value
      c.authorityLimits = response.data.limits || [];
      if (response.data.jobCodeDisplay) {
        c.jobCodeDisplay = response.data.jobCodeDisplay;
      }
      c.loading = false;
      
      // Update form validation after loading
      c.updateFormValidation();
      
      // Setup submission blocking after limits are loaded
      $timeout(function() {
        c.setupSubmissionBlocking();
      }, 500);
    }).catch(function(error) {
      // Error - show message and clear limits
      spUtil.addErrorMessage('Failed to load authority limits');
      c.authorityLimits = [];
      c.loading = false;
      
      // Update form validation after error
      c.updateFormValidation();
    });
  };
  
  // Set up form submission blocking to prevent invalid submissions
  c.setupSubmissionBlocking = function() {
    // Find submit buttons and intercept clicks
    var submitSelectors = [
      'button[name="sysparm_ck"]',
      'input[name="sysparm_ck"]', 
      'button[type="submit"]',
      'input[type="submit"]',
      '.form_action_button',
      '#sysverb_submit',
      'button:contains("Submit")',
      'input[value*="Submit"]'
    ];
    
    function blockSubmission(e) {
      if (c.shouldBlockSubmission()) {
        e.preventDefault();
        e.stopPropagation();
        e.stopImmediatePropagation();
        
        // Show appropriate error message based on request type
        var requestType = c.requestType;
        var jobCodeDisplay = c.jobCodeDisplay || 'Unknown';
        var errorMsg = '';
        
        switch (requestType) {
          case 'new_authority':
            errorMsg = 'Authority limits already exist for job code ' + jobCodeDisplay + '. Please submit a "Change to Existing Authority" request instead.';
            break;
          case 'change_to_existing_authority':
            errorMsg = 'No authority limits found for job code ' + jobCodeDisplay + '. Please submit a "New Authority" request instead.';
            break;
          case 'remove_authority':
            errorMsg = 'No existing authority limits found for job code ' + jobCodeDisplay + '. Cannot proceed with removal request.';
            break;
          default:
            errorMsg = 'Please check your request type and job code selection.';
        }
        
        // Show error message (try different methods)
        try {
          if (typeof spUtil !== 'undefined') {
            spUtil.addErrorMessage(errorMsg);
          } else if (typeof g_form !== 'undefined' && g_form.addErrorMessage) {
            g_form.addErrorMessage(errorMsg);
          } else {
            alert(errorMsg); // Fallback
          }
        } catch (err) {
          alert(errorMsg); // Final fallback
        }
        
        return false;
      }
    }
    
    // Add event listeners to all submit buttons
    submitSelectors.forEach(function(selector) {
      var buttons = document.querySelectorAll(selector);
      buttons.forEach(function(button) {
        // Remove existing listeners to avoid duplicates
        button.removeEventListener('click', blockSubmission, true);
        // Add new listener
        button.addEventListener('click', blockSubmission, true); // Use capture phase
      });
    });
    
    // Also try to hook into g_form onSubmit if available
    try {
      if (typeof g_form !== 'undefined') {
        var originalOnSubmit = g_form.onSubmit;
        g_form.onSubmit = function() {
          if (c.shouldBlockSubmission()) {
            return false; // Block submission
          }
          // Call original onSubmit if it exists and we're not blocking
          if (originalOnSubmit) {
            return originalOnSubmit.call(this);
          }
          return true;
        };
      }
    } catch (e) {
    }
  };
  
  /**
   * Initialize widget on load
   * Sets up initial values and monitoring
   */
  $timeout(function() {
    // Get initial field values
    c.jobCode = c.getJobCodeValue();
    c.requestType = c.getRequestTypeValue();
    c.jobCodeDisplay = c.getJobCodeDisplayValue();
    
    // Load limits if job code already selected
    if (c.jobCode) {
      c.loadAuthorityLimits();
    }
    
    // Start monitoring for changes
    c.setupFieldMonitoring();
    
    // Setup initial submission blocking
    $timeout(function() {
      c.setupSubmissionBlocking();
    }, 1500);
  }, 500);
};








// Record Producer Script

// Authority Widget Record Producer Script
// Processes widget data and creates parent/child authority records

var parentId = current.getUniqueValue();
var shouldProceed = true; // Flag to control processing flow

// Check authority limits validation first
var requestType = producer.request_type ? producer.request_type.toString() : '';
var jobCode = producer.job_code ? producer.job_code.toString() : '';

// If we have both request type and job code, check if this combination should be blocked
if (requestType && jobCode) {
    // Get authority limits to check if they exist
    var limitsExist = false;
    var limitGr = new GlideRecord('x_banun_bunow_si_0_authority_limits');
    limitGr.addQuery('job_code', jobCode);
    limitGr.addQuery('active', true);
    limitGr.query();
    if (limitGr.hasNext()) {
        limitsExist = true;
    }

    var shouldBlock = false;
    var blockMessage = '';

    // Get job code display value
    var jobCodeDisplay = '';
    var jobGr = new GlideRecord('x_banun_rbac_job_code');
    if (jobGr.get(jobCode)) {
        jobCodeDisplay = jobGr.getDisplayValue();
    }

    // Check blocking conditions
    if (requestType === 'new_authority' && limitsExist) {
        shouldBlock = true;
        blockMessage = 'Authority limits already exist for job code ' + jobCodeDisplay + '. Please submit a "Change to Existing Authority" request instead.';
    } else if (requestType === 'change_to_existing_authority' && !limitsExist) {
        shouldBlock = true;
        blockMessage = 'No authority limits found for job code ' + jobCodeDisplay + '. Please submit a "New Authority" request instead.';
    } else if (requestType === 'remove_authority' && !limitsExist) {
        shouldBlock = true;
        blockMessage = 'No existing authority limits found for job code ' + jobCodeDisplay + '. Cannot proceed with removal request.';
    }

    if (shouldBlock) {
        gs.addErrorMessage(blockMessage);
        current.setAbortAction(true);
        shouldProceed = false; // Prevent further processing
    }
}

// Only proceed if authority limits validation passed
if (shouldProceed) {
    gs.info('AUTH_FIX_DEBUG: Starting form validation');
    gs.info('AUTH_FIX_DEBUG: Request type = ' + requestType);
    gs.info('AUTH_FIX_DEBUG: form_is_valid value = ' + producer.form_is_valid);
    gs.info('AUTH_FIX_DEBUG: form_validation_errors = ' + (producer.form_validation_errors || 'none'));

    var validationPassed = false;

    // Handle remove_authority validation on server side
    if (requestType === 'remove_authority') {
        gs.info('AUTH_FIX_DEBUG: Server-side remove_authority validation');
        // For remove requests, completely ignore client validation and only check business justification
        var businessNeed = producer.overall_business_need ? producer.overall_business_need.toString().trim() : '';
        if (businessNeed && businessNeed.length > 0) {
            validationPassed = true;
            gs.info('AUTH_FIX_DEBUG: Remove validation passed - business need provided');
        } else {
            gs.info('AUTH_FIX_DEBUG: Remove validation failed - business need missing');
            gs.addErrorMessage('Overall Business Need is required');
            current.setAbortAction(true);
            validationPassed = false;
        }
    } else {
        // For other request types, use the client validation result
        var formIsValid = producer.form_is_valid ? producer.form_is_valid.toString().trim() : 'false';
        validationPassed = (formIsValid === 'true' || formIsValid === true || producer.form_is_valid === true);
        gs.info('AUTH_FIX_DEBUG: Using client validation result = ' + validationPassed);

        // If client validation failed, show the client errors
        if (!validationPassed) {
            var errors = producer.form_validation_errors ? producer.form_validation_errors.toString().split('|') : ['Form validation failed'];
            gs.info('AUTH_FIX_DEBUG: Client validation failed, errors = ' + errors.join('; '));
            gs.addErrorMessage('Please correct the following errors: ' + errors.join('; '));
            current.setAbortAction(true);
        }
    }

    gs.info('AUTH_FIX_DEBUG: Final validationPassed = ' + validationPassed);

    if (validationPassed) {
        gs.info('AUTH_FIX_DEBUG: Validation passed, proceeding');

        // Set job code string fields on parent record for display purposes
        if (producer.job_code) {
            var jobCodeGR = new GlideRecord('x_banun_rbac_job_code');
            if (jobCodeGR.get(producer.job_code)) {
                current.setValue('job_code_string', jobCodeGR.getValue('job_code'));
                current.setValue('job_function_description', jobCodeGR.getValue('job_function_description'));
            }
        }

        // Process authority data if provided by widget (skip for remove requests)
        if (requestType !== 'remove_authority' && producer.authority_types && producer.authority_data) {
            var authority_types = producer.authority_types.toString().split('|');
            var authority_data_strings = producer.authority_data.toString().split('|');

            // Create child records for each authority type selected
            for (var i = 0; i < authority_types.length; i++) {
                var authorityType = authority_types[i];
                var authorityDataStr = authority_data_strings[i];

                try {
                    var authorityData = JSON.parse(authorityDataStr);

                    if (authorityType === 'non_credit') {
                        // Create non-credit authority limit record
                        var nonCreditGR = new GlideRecord('x_banun_bunow_si_0_non_credit_authority_limits');
                        nonCreditGR.initialize();
                        nonCreditGR.setValue('parent', parentId);
                        if (producer.job_code) {
                            nonCreditGR.setValue('job_code', producer.job_code);
                        }
                        if (authorityData.disbursement_ach)
                            nonCreditGR.setValue('disbursement_ach', authorityData.disbursement_ach);
                        if (authorityData.disbursement_wire_transfer_external)
                            nonCreditGR.setValue('disbursement_wire_transfer_external', authorityData.disbursement_wire_transfer_external);
                        if (authorityData.disbursement_wire_transfer_internal)
                            nonCreditGR.setValue('disbursement_wire_transfer_internal', authorityData.disbursement_wire_transfer_internal);
                        if (authorityData.disbursement_official_checks_external)
                            nonCreditGR.setValue('disbursement_official_checks_external', authorityData.disbursement_official_checks_external);
                        if (authorityData.disbursement_official_checks_internal)
                            nonCreditGR.setValue('disbursement_official_checks_internal', authorityData.disbursement_official_checks_internal);
                        if (authorityData.check_cashing_on_us)
                            nonCreditGR.setValue('check_cashing_on_us', authorityData.check_cashing_on_us);
                        if (authorityData.check_cashing_not_on_us)
                            nonCreditGR.setValue('check_cashing_not_on_us', authorityData.check_cashing_not_on_us);
                        if (authorityData.remote_deposit)
                            nonCreditGR.setValue('remote_deposit', authorityData.remote_deposit);
                        if (authorityData.treasury_solutions_company_wire_limits)
                            nonCreditGR.setValue('treasury_solutions_company_wire_limits', authorityData.treasury_solutions_company_wire_limits);
                        if (authorityData.fx_wire_limits)
                            nonCreditGR.setValue('fx_wire_limits', authorityData.fx_wire_limits);
                        nonCreditGR.insert();
                    } else if (authorityType === 'credit') {
                        // Create credit authority limit record
                        var creditGR = new GlideRecord('x_banun_bunow_si_0_credit_authority_limits');
                        creditGR.initialize();
                        creditGR.setValue('parent', parentId);
                        if (producer.job_code) {
                            creditGR.setValue('job_code', producer.job_code);
                        }
                        if (authorityData.overdraft_internal_accounts) {
                            creditGR.setValue('overdraft_internal_accounts', authorityData.overdraft_internal_accounts);
                        }
                        if (authorityData.overdraft_external_accounts) {
                            creditGR.setValue('overdraft_external_accounts', authorityData.overdraft_external_accounts);
                        }
                        if (authorityData.unavailable_funds_internal_accounts) {
                            creditGR.setValue('unavailable_funds_internal_accounts', authorityData.unavailable_funds_internal_accounts);
                        }
                        if (authorityData.unavailable_funds_external_accounts) {
                            creditGR.setValue('unavailable_funds_external_accounts', authorityData.unavailable_funds_external_accounts);
                        }
                        creditGR.insert();
                    }
                } catch (e) {
                    gs.addErrorMessage('Error processing authority data: ' + e.message);
                }
            }
        }
    }
}
