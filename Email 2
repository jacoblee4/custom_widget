//signature_authority_comparison
(function runMailScript(current, template, email, email_action, event) {
    
    var parent = current.sysapproval.getRefRecord();
    
    // Function to safely get value or return 0
    function safeGetValue(glideRecord, fieldName) {
        var value = glideRecord.getValue(fieldName);
        return parseFloat(value) || 0;
    }
    
    // Function to format currency
    function formatCurrency(value) {
        if (!value || value === 0) return '-';
        return '$' + parseFloat(value).toFixed(0).replace(/\B(?=(\d{3})+(?!\d))/g, ',');
    }
    
    // Get the job function description from the requested job code
    var jobCodeGr = new GlideRecord('x_banun_rbac_job_code');
    if (!jobCodeGr.get(parent.getValue('job_code'))) {
        return;
    }
    
    var jobFunctionDescription = jobCodeGr.getValue('job_function_description') || 
                                 jobCodeGr.getValue('u_job_function_description') ||
                                 jobCodeGr.getValue('job_function');
    
    if (!jobFunctionDescription) {
        return;
    }
    
    // Get all job codes with matching job function description
    var jobCodesList = [];
    var jobCodesGr = new GlideRecord('x_banun_rbac_job_code');
    jobCodesGr.addQuery('job_function_description', jobFunctionDescription);
    jobCodesGr.query();
    
    while (jobCodesGr.next()) {
        jobCodesList.push(jobCodesGr.sys_id.toString());
    }
    
    if (jobCodesList.length === 0) {
        return;
    }
    
    // Get the requested limits for the current request
    var requestedLimits = {
        job_code: parent.job_code.getDisplayValue(),
        sys_id: 'REQUESTED',
        isRequested: true
    };
    
    // Fetch credit limits
    var creditGr = new GlideRecord('x_banun_bunow_si_0_credit_authority_limits');
    creditGr.addQuery('parent', parent.sys_id);
    creditGr.query();
    
    if (creditGr.next()) {
        requestedLimits.overdraft_internal = safeGetValue(creditGr, 'overdraft_internal_accounts');
        requestedLimits.overdraft_external = safeGetValue(creditGr, 'overdraft_external_accounts');
        requestedLimits.unavailable_internal = safeGetValue(creditGr, 'unavailable_funds_internal_accounts');
        requestedLimits.unavailable_external = safeGetValue(creditGr, 'unavailable_funds_external_accounts');
    }
    
    // Fetch non-credit limits
    var nonCreditGr = new GlideRecord('x_banun_bunow_si_0_non_credit_authority_limits');
    nonCreditGr.addQuery('parent', parent.sys_id);
    nonCreditGr.query();
    
    if (nonCreditGr.next()) {
        requestedLimits.disbursement_ach = safeGetValue(nonCreditGr, 'disbursement_ach');
        requestedLimits.wire_internal = safeGetValue(nonCreditGr, 'disbursement_wire_transfer_internal');
        requestedLimits.wire_external = safeGetValue(nonCreditGr, 'disbursement_wire_transfer_external');
        requestedLimits.checks_internal = safeGetValue(nonCreditGr, 'disbursement_official_checks_internal');
        requestedLimits.checks_external = safeGetValue(nonCreditGr, 'disbursement_official_checks_external');
        requestedLimits.check_cashing_on_us = safeGetValue(nonCreditGr, 'check_cashing_on_us');
        requestedLimits.check_cashing_not_on_us = safeGetValue(nonCreditGr, 'check_cashing_not_on_us');
        requestedLimits.remote_deposit = safeGetValue(nonCreditGr, 'remote_deposit');
        requestedLimits.treasury_wire = safeGetValue(nonCreditGr, 'treasury_solutions_company_wire_limits');
        requestedLimits.fx_wire = safeGetValue(nonCreditGr, 'fx_wire_limits');
    }
    
    // Define all limit fields to check
    var limitFields = [
        'disbursement_ach', 'wire_internal', 'wire_external', 'checks_internal', 'checks_external',
        'check_cashing_on_us', 'check_cashing_not_on_us', 'remote_deposit', 'treasury_wire', 'fx_wire',
        'overdraft_internal', 'overdraft_external', 'unavailable_internal', 'unavailable_external'
    ];
    
    // Find the largest requested value and its field
    var largestValue = 0;
    var largestField = '';
    
    for (var i = 0; i < limitFields.length; i++) {
        var fieldName = limitFields[i];
        var value = requestedLimits[fieldName] || 0;
        if (value > largestValue) {
            largestValue = value;
            largestField = fieldName;
        }
    }
    
    if (largestValue === 0) {
        var content = '<div style="margin: 30px 0; padding: 20px; background-color: #fff3cd; border-radius: 5px; border: 1px solid #ffc107;">';
        content += '<p style="color: #856404; margin: 0;"><strong>Note:</strong> No authority limits were specified in this request, so no comparison can be shown.</p>';
        content += '</div>';
        template.print(content);
        return;
    }
    
    // Get existing authority limits for matching job codes
    var existingLimits = [];
    
    // Query by looping through job codes
    for (var j = 0; j < jobCodesList.length; j++) {
        var limitGr2 = new GlideRecord('x_banun_bunow_si_0_authority_limits');
        limitGr2.addQuery('job_code', jobCodesList[j]);
        limitGr2.query();
        
        while (limitGr2.next()) {
            var limit = {
                job_code: limitGr2.job_code.getDisplayValue(),
                sys_id: limitGr2.sys_id.toString(),
                isRequested: false
            };
            
            limit.disbursement_ach = safeGetValue(limitGr2, 'disbursement_ach');
            limit.wire_internal = safeGetValue(limitGr2, 'disbursement_wire_transfer_internal');
            limit.wire_external = safeGetValue(limitGr2, 'disbursement_wire_transfer_external');
            limit.checks_internal = safeGetValue(limitGr2, 'disbursement_official_checks_internal');
            limit.checks_external = safeGetValue(limitGr2, 'disbursement_official_checks_external');
            limit.check_cashing_on_us = safeGetValue(limitGr2, 'check_cashing_on_us');
            limit.check_cashing_not_on_us = safeGetValue(limitGr2, 'check_cashing_not_on_us');
            limit.remote_deposit = safeGetValue(limitGr2, 'remote_deposit');
            limit.treasury_wire = safeGetValue(limitGr2, 'treasury_solutions_company_wire_limits');
            limit.fx_wire = safeGetValue(limitGr2, 'fx_wire_limits');
            limit.overdraft_internal = safeGetValue(limitGr2, 'overdraft_internal_accounts');
            limit.overdraft_external = safeGetValue(limitGr2, 'overdraft_external_accounts');
            limit.unavailable_internal = safeGetValue(limitGr2, 'unavailable_funds_internal_accounts');
            limit.unavailable_external = safeGetValue(limitGr2, 'unavailable_funds_external_accounts');
            
            existingLimits.push(limit);
        }
    }
    
    // Add requested limits to the array
    existingLimits.push(requestedLimits);
    
    // Sort by the largest field value (descending)
    existingLimits.sort(function(a, b) {
        var aVal = a[largestField] || 0;
        var bVal = b[largestField] || 0;
        return bVal - aVal;
    });
    
    // Field display names mapping
    var fieldDisplayNames = {
        'disbursement_ach': 'ACH',
        'wire_internal': 'Wire Internal',
        'wire_external': 'Wire External',
        'checks_internal': 'Checks Internal',
        'checks_external': 'Checks External',
        'check_cashing_on_us': 'Check Cashing (On-Us)',
        'check_cashing_not_on_us': 'Check Cashing (Not On-Us)',
        'remote_deposit': 'Remote Deposit',
        'treasury_wire': 'Treasury Wire',
        'fx_wire': 'FX Wire',
        'overdraft_internal': 'Overdraft Internal',
        'overdraft_external': 'Overdraft External',
        'unavailable_internal': 'Unavailable Funds Internal',
        'unavailable_external': 'Unavailable Funds External'
    };
    
    // Count columns to show for colspan
    var columnsToShow = [];
    for (var f = 0; f < limitFields.length; f++) {
        var hasValue = false;
        for (var l = 0; l < existingLimits.length; l++) {
            if ((existingLimits[l][limitFields[f]] || 0) > 0) {
                hasValue = true;
                break;
            }
        }
        if (hasValue) {
            columnsToShow.push(limitFields[f]);
        }
    }
    
    var totalColumns = columnsToShow.length + 1; // +1 for Job Code column
    
    // Build the HTML content
    var content = '';
    content += '<div style="margin: 30px 0; padding: 20px; background-color: #f8f9fa; border-radius: 5px; border: 1px solid #dee2e6;">';
    content += '<h3 style="color: #00aae3; margin: 0 0 10px 0; padding-bottom: 10px; border-bottom: 2px solid #00aae3;">';
    content += 'Authority Limits Comparison';
    content += '</h3>';
    
    // Create table
    content += '<div style="overflow-x: auto;">';
    content += '<table style="width: 100%; border-collapse: collapse; background-color: #ffffff; border: 1px solid #dee2e6; border-radius: 4px; font-size: 12px;">';
    
    // Table header - Job Function row
    content += '<thead>';
    content += '<tr style="background-color: #005a8c;">';
    content += '<th colspan="' + totalColumns + '" style="padding: 12px 8px; text-align: center; font-weight: 700; color: #ffffff; font-size: 14px; border-bottom: 2px solid #dee2e6;">' + jobFunctionDescription + '</th>';
    content += '</tr>';
    
    // Column headers row
    content += '<tr style="background-color: #00aae3;">';
    content += '<th style="padding: 10px 8px; text-align: left; font-weight: 600; position: sticky; left: 0; background-color: #00aae3; z-index: 10; color: #000000;">Job Code</th>';
    
    for (var f = 0; f < columnsToShow.length; f++) {
        content += '<th style="padding: 10px 8px; text-align: right; font-weight: 600; white-space: nowrap; color: #000000;">' + 
                   fieldDisplayNames[columnsToShow[f]] + '</th>';
    }
    
    content += '</tr>';
    content += '</thead>';
    
    // Table body
    content += '<tbody>';
    
    for (var r = 0; r < existingLimits.length; r++) {
        var row = existingLimits[r];
        var rowStyle = row.isRequested ? 
            'background-color: #fff3cd; border: 2px solid #ffc107;' : 
            (r % 2 === 0 ? 'background-color: #ffffff;' : 'background-color: #f8f9fa;');
        
        content += '<tr style="' + rowStyle + '">';
        
        // Job Code column (sticky)
        var jobCodeStyle = 'padding: 8px; font-weight: ' + (row.isRequested ? '700' : '500') + '; color: #000000; position: sticky; left: 0; z-index: 5;';
        if (row.isRequested) {
            jobCodeStyle += ' background-color: #fff3cd;';
            content += '<td style="' + jobCodeStyle + '">' + row.job_code + ' <span style="color: #856404; font-size: 11px;">(REQUESTED)</span></td>';
        } else {
            jobCodeStyle += (r % 2 === 0 ? ' background-color: #ffffff;' : ' background-color: #f8f9fa;');
            content += '<td style="' + jobCodeStyle + '">' + row.job_code + '</td>';
        }
        
        // Value columns
        for (var c = 0; c < columnsToShow.length; c++) {
            var colName = columnsToShow[c];
            var value = row[colName] || 0;
            var cellStyle = 'padding: 8px; text-align: right; color: #5a6c7d;';
            
            if (row.isRequested && value > 0) {
                cellStyle += ' font-weight: 600; color: #000000;';
            }
            
            content += '<td style="' + cellStyle + '">' + formatCurrency(value) + '</td>';
        }
        
        content += '</tr>';
    }
    
    content += '</tbody>';
    content += '</table>';
    content += '</div>';
    
    if (existingLimits.length === 1) {
        content += '<p style="color: #856404; font-size: 12px; margin-top: 15px; padding: 10px; background-color: #fff3cd; border-radius: 4px;">';
        content += '⚠️ No existing authority limits found for other job codes in this job function. Only the requested limits are shown above.';
        content += '</p>';
    }
    
    content += '</div>';
    
    template.print(content);
    
})(current, template, email, email_action, event);
