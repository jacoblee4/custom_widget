(function runMailScript(current, template, email, email_action, event) {
    
    // Current is the child record (non-credit limits)
    var childRecord = current;
    
    // Validation check for child record
    if (!childRecord || !childRecord.isValidRecord()) {
        gs.error('Email Script Error: Unable to retrieve child record');
        return;
    }
    
    // Get the parent record
    var parent = childRecord.parent.getRefRecord();
    
    // Validation check for parent
    if (!parent || !parent.isValidRecord()) {
        gs.error('Email Script Error: Unable to retrieve parent Signature Authority Request record');
        return;
    }
    
    var content = '';
    var instanceURL = gs.getProperty('glide.servlet.uri');
    var parentSysId = parent.sys_id.toString();
    var recordURL = instanceURL + 'now/workspace/signature-authority-workspace/record/x_banun_bunow_si_0_signature_authority_request/' + parentSysId;
    
    content += '<div style="font-family: Arial, sans-serif; color: #000000; max-width: 800px;">';
    
    // Approval Details Section
    content += '<div style="background-color: #f8f9fa; padding: 15px; margin: 20px 0; border-left: 4px solid #007bff;">';
    content += '<h3 style="color: #0056b3; margin: 0 0 15px 0; padding-bottom: 10px; border-bottom: 2px solid #007bff;">Committee Approval Details</h3>';
    
    var hasApprovals = false;
    
    // Get the ORMC committee group sys_id from system property
    var ormcCommitteeGroupId = gs.getProperty('x_banun_bunow_si_0.bunow.ormc_committee');
    
    if (!ormcCommitteeGroupId) {
        gs.error('Email Script Error: ORMC Committee group system property not configured');
        content += '<p style="color: #dc3545; font-style: italic;">Error: Committee group configuration not found.</p>';
        content += '</div>';
        template.print(content);
        return;
    }
    
    // Get all members of the ORMC committee group
    var groupMemberIds = [];
    var groupMemberGr = new GlideRecord('sys_user_grmember');
    groupMemberGr.addQuery('group', ormcCommitteeGroupId);
    groupMemberGr.query();
    
    while (groupMemberGr.next()) {
        groupMemberIds.push(groupMemberGr.user.toString());
    }
    
    if (groupMemberIds.length === 0) {
        gs.warn('Email Script Warning: No members found in ORMC Committee group');
        content += '<p style="color: #6c757d; font-style: italic;">No committee members found in the configured group.</p>';
        content += '</div>';
        template.print(content);
        return;
    }
    
    // Get all approvals for the non-credit child record (exclude pending/requested states)
    // Only include approvals from ORMC committee members
    var approvalGr = new GlideRecord('sysapproval_approver');
    approvalGr.addQuery('sysapproval', childRecord.sys_id);
    approvalGr.addEncodedQuery('stateINapproved,rejected,not_required');
    approvalGr.addQuery('approver', 'IN', groupMemberIds.join(','));
    approvalGr.orderBy('state');
    approvalGr.orderByDesc('sys_updated_on');
    approvalGr.query();
    
    // Since orderBy doesn't give us the exact order we want (approved, rejected, not_required),
    // we'll collect all records and sort them manually
    var approvals = [];
    while (approvalGr.next()) {
        approvals.push({
            approver: approvalGr.approver.getDisplayValue(),
            approvalDate: approvalGr.sys_updated_on.getDisplayValue(),
            approverSysId: approvalGr.sys_id.toString(),
            state: approvalGr.state.toString(),
            stateDisplay: approvalGr.state.getDisplayValue(),
            updatedOn: approvalGr.sys_updated_on.getValue()
        });
    }
    
    // Custom sort: approved first, then rejected, then not_required
    approvals.sort(function(a, b) {
        var stateOrder = { 'approved': 1, 'rejected': 2, 'not_required': 3 };
        var aOrder = stateOrder[a.state] || 999;
        var bOrder = stateOrder[b.state] || 999;
        
        if (aOrder !== bOrder) {
            return aOrder - bOrder;
        }
        // Within same state, sort by most recent first
        return b.updatedOn > a.updatedOn ? 1 : -1;
    });
    
    if (approvals.length > 0) {
        hasApprovals = true;
        content += '<div style="margin-bottom: 20px;">';
        content += '<table style="width: 100%; border-collapse: collapse;">';
        
        for (var i = 0; i < approvals.length; i++) {
            var approval = approvals[i];
            var approver = approval.approver;
            var approvalDate = approval.approvalDate;
            var approverSysId = approval.approverSysId;
            var state = approval.state;
            var stateDisplay = approval.stateDisplay;
            
            // Determine styling based on state
            var borderColor = '#dee2e6';
            var bgColor = '#ffffff';
            var statusColor = '#6c757d';
            var icon = '●';
            
            if (state === 'approved') {
                borderColor = '#c3e6cb';
                bgColor = '#d4edda';
                statusColor = '#155724';
                icon = '✓';
            } else if (state === 'rejected') {
                borderColor = '#f5c6cb';
                bgColor = '#f8d7da';
                statusColor = '#721c24';
                icon = '✗';
            } else if (state === 'not_required') {
                borderColor = '#d1ecf1';
                bgColor = '#d1ecf1';
                statusColor = '#0c5460';
                icon = '○';
            }
            
            content += '<tr>';
            content += '<td style="padding: 12px; vertical-align: top; border-bottom: 1px solid ' + borderColor + '; background-color: ' + bgColor + ';">';
            content += '<div style="font-weight: bold; color: ' + statusColor + '; margin-bottom: 5px;">' + icon + ' ' + stateDisplay + ' by: ' + approver + '</div>';
            content += '<div style="color: #6c757d; font-size: 12px; margin-bottom: 8px;">' + approvalDate + '</div>';
            
            // Only show comments for approved or rejected (not for not_required)
            if (state === 'approved' || state === 'rejected') {
                // Get comments from journal entries (activity feed)
                var journalGr = new GlideRecord('sys_journal_field');
                journalGr.addQuery('element_id', approverSysId);
                journalGr.addQuery('element', 'comments');
                journalGr.orderByDesc('sys_created_on');
                journalGr.setLimit(1);
                journalGr.query();
                
                var comments = '';
                if (journalGr.next()) {
                    comments = journalGr.getValue('value') || '';
                }
                
                if (comments && comments.trim() !== '') {
                    content += '<div style="background-color: #ffffff; padding: 10px; border-radius: 4px; border: 1px solid #dee2e6;">';
                    content += '<div style="font-weight: bold; color: #495057; font-size: 12px; margin-bottom: 5px;">Comments:</div>';
                    content += '<div style="color: #000000; line-height: 1.5;">' + comments.replace(/\n/g, '<br/>') + '</div>';
                    content += '</div>';
                } else {
                    content += '<div style="color: #6c757d; font-style: italic;">No comments provided</div>';
                }
            }
            
            content += '</td>';
            content += '</tr>';
        }
        
        content += '</table>';
        content += '</div>';
    }
    
    // If no approvals found (shouldn't happen, but just in case)
    if (!hasApprovals) {
        content += '<p style="color: #6c757d; font-style: italic;">No completed approval responses available.</p>';
    }
    
    content += '</div>';
    
    
    template.print(content);
    
})(current, template, email, email_action, event);
